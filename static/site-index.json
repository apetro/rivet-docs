[
    {
        "uri": "about",
        "title": "Rivet",
        "content": "",
        "rawContent": "",
        "tags": [],
        "description": "Rivet is a focused set of front end UI components, as well as a place for documenting good UX, accessibility, and design practices. It serves as a developer’s guide for when and how to use certain patterns and how to implement them in an accessible way."
    },
    {
        "uri": "add-ons",
        "title": "A collection of **Rivet plugins, templates, and other helpful resources**",
        "content": "",
        "rawContent": "",
        "tags": [],
        "description": ""
    },
    {
        "uri": "add-ons/rivet-collapsible",
        "title": "Collapsible",
        "content": "Getting started\nThe Rivet collapsible Add-on requires the use of the core Rivet CSS. You can find out more about how to get started in the Rivet documentation. Once you are using Rivet, you can download the Rivet collapsible source files and include them in your project.\n\nNote: closest() polyfill\nThe Rivet Collapsible uses the .closest() JavaScript method which works in all modern web browsers, but requires a small polyfill to add support for Internet Explorer 11. The main Rivet JavaScript file (rivet.js) already includes the closest() polyfill so if you are using it on your page there is no need to add it.\n\n{{}}/**\n Element.closest() polyfill\n https://developer.mozilla.org/en-US/docs/Web/API/Element/closest#Polyfill\n */\nif (!Element.prototype.closest) {\n  if (!Element.prototype.matches) {\n    Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;\n  }\n\n  Element.prototype.closest = function (s) {\n    var el = this;\n    var ancestor = this;\n    if (!document.documentElement.contains(el)) return null;\n    do {\n      if (ancestor.matches(s)) return ancestor;\n      ancestor = ancestor.parentElement;\n    } while (ancestor !== null);\n    return null;\n  };\n}\n{{}}\n\n1. Include the CSS and JavaScript in your page\n{{}}\n\n{{}}\n\n2. Add the markup to your HTML\nIt is possible to either show or hide the collapsible content by default. To hide the content by default set the aria-expanded attribute on the ` element inside the .rvt-collapsibletitle element to false, then set the aria-hidden attribute on the .rvt-collapsiblecontent element to \"true\". You can hide the collapsible content by default by doing the opposite and setting aria-exapnded to a value of true and aria-hidden to a value of false`.\n\nUsing headings\nThe button that toggles the collapsible is wrapped in a heading element in the examples that follow. Any heading level can be used based on the heading structure of your app. Or, if a heading element doesn't make sense semantically it can be replaced with a generic `` element.\n\nLastly, you need to make sure to add the [data-collapsible] attribute to the button toggle element with a value that matches the id attribute of the content that you want to expand/collapse.\n\n{{}}\n\n      Default Rivet collapsible\n\n    Nostrum fugit a natus. Corporis voluptates ut odio omnis nobis voluptas. Est dolor et eum quis deleniti explicabo autem est magnam. Unde expedita ab quia maxime quia. Qui voluptas distinctio ipsa laborum laboriosam.\n\n{{}}\n\n3. Initialize the Add-on\nLastly, you'll need to initialize somewhere right before the closing `` tag of you page.\n\n{{}}\n  Collapsible.init();\n\n{{}}\n\nAccordion configuration\nIt is possible to group two or more collapsibles into an accordion configuration by wrapping them in a containing div then adding the following attributes to it:\n\nclass=\"rvt-collapsible-accordion\"\ndata-accordion\nrole=\"group\"\n\n{{}}\n\n{{}}\n\nThe rvt-collapsible-accordion class will add a small amount of margin between each collapsible and the data-accordion attribute is used as a JavaScript hook to handle keyboard navigation inside the accordion.\n\nInstalling with NPM\nThe collapsible is available to install as a dependency in your project. To install via NPM run the following in your terminal:\n\n{{}}npm install rivet-collapsible --save-dev\n{{}}\n\nIf you are using a module bundler, you can include the collapsible in your project like so:\n\n{{}}const collapsible = require('rivet-collapsible');\n\n// Initialize the plugin\nCollapsible.init();\n{{}}\n\nJavaScript API\nThe Rivet collapsible component exposes a handful of methods you can use to programmatically control the component. The .init() method must be called somewhere in your document after the rivet-collapsible.js script is included. The init() method attaches an event listener to the document that listens for clicks on buttons with the data-collapsible attribute. With that in mind you should be able to dynamically add collapsibles to the DOM without having the re-initialize the component.\n\nMethods\n\n| Method| Description                                                                                                                                                       |\n|--------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Collapsible.init() | Initializes the collapsible component |\n| Collapsible.open(button, callback) | Accepts a collapsible toggle button element [data-collapsible] and an optional callback function that is run after the collapsible is toggled opened. |\n| Collapsible.close(button, callback) | Accepts a collapsible toggle button element [data-collapsible] and an optional callback function that is run after the collapsible is toggled closed. |\n| Collapsible.destroy() | Destroys the current initialization of the collapsible component and removes its event listener.|\n",
        "rawContent": "## Getting started\nThe Rivet collapsible Add-on requires the use of the core Rivet CSS. You can find out more about how to get started in [the Rivet documentation](../../components). Once you are using Rivet, you can download the Rivet collapsible source files and include them in your project.\n\n### Note: `closest()` polyfill\nThe Rivet Collapsible uses the `.closest()` JavaScript method which works in all modern web browsers, but requires a small polyfill to add support for Internet Explorer 11. The main Rivet JavaScript file (`rivet.js`) already includes the `closest()` polyfill so if you are using it on your page there is no need to add it.\n\n{{< code lang=\"js\" >}}/**\n * Element.closest() polyfill\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/closest#Polyfill\n */\nif (!Element.prototype.closest) {\n  if (!Element.prototype.matches) {\n    Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;\n  }\n\n  Element.prototype.closest = function (s) {\n    var el = this;\n    var ancestor = this;\n    if (!document.documentElement.contains(el)) return null;\n    do {\n      if (ancestor.matches(s)) return ancestor;\n      ancestor = ancestor.parentElement;\n    } while (ancestor !== null);\n    return null;\n  };\n}\n{{< /code >}}\n\n### 1. Include the CSS and JavaScript in your page\n{{< code lang=\"html\" >}}\n<link rel=\"stylesheet\" href=\"dist/css/rivet-collapsible.min.css\">\n<script src=\"dist/js/rivet-collapsible.min.js\"></script>\n{{< /code >}}\n\n### 2. Add the markup to your HTML\nIt is possible to either show or hide the collapsible content by default. To hide the content by default set the `aria-expanded` attribute on the `<button>` element inside the `.rvt-collapsible__title` element to `false`, then set the `aria-hidden` attribute on the `.rvt-collapsible__content` element to \"true\". You can hide the collapsible content by default by doing the opposite and setting `aria-exapnded` to a value of `true` and `aria-hidden` to a value of `false`.\n\n#### Using headings\nThe button that toggles the collapsible is wrapped in a heading element in the examples that follow. Any heading level can be used based on the heading structure of your app. Or, if a heading element doesn't make sense semantically it can be replaced with a generic `<div>` element.\n\nLastly, you need to make sure to add the `[data-collapsible]` attribute to the button toggle element with a value that matches the `id` attribute of the content that you want to expand/collapse.\n\n{{< code lang=\"html\" >}}<div class=\"rvt-collapsible\">\n  <h1 class=\"rvt-collapsible__title\">\n    <button data-collapsible=\"users\" aria-expanded=\"false\">\n      <svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\">\n        <path fill=\"currentColor\" d=\"M5.5,15a1,1,0,0,1-.77-1.64L9.2,8,4.73,2.64A1,1,0,0,1,6.27,1.36L11.13,7.2a1.25,1.25,0,0,1,0,1.61L6.27,14.64A1,1,0,0,1,5.5,15ZM9.6,8.48h0Zm0-1h0Z\"/>\n      </svg>\n      <span>Default Rivet collapsible</span>\n    </button>\n  </h1>\n  <div class=\"rvt-collapsible__content\" id=\"users\" aria-hidden=\"true\">\n    <p class=\"rvt-m-all-remove\">Nostrum fugit a natus. Corporis voluptates ut odio omnis nobis voluptas. Est dolor et eum quis deleniti explicabo autem est magnam. Unde expedita ab quia maxime quia. Qui voluptas distinctio ipsa laborum laboriosam.</p>\n  </div>\n</div>\n{{< /code >}}\n\n### 3. Initialize the Add-on\nLastly, you'll need to initialize somewhere right before the closing `</body>` tag of you page.\n\n{{< code lang=\"html\" >}}<script>\n  Collapsible.init();\n</script>\n{{< /code >}}\n\n## Accordion configuration\nIt is possible to group two or more collapsibles into an accordion configuration by wrapping them in a containing `div` then adding the following attributes to it:\n\n- `class=\"rvt-collapsible-accordion\"`\n- `data-accordion`\n- `role=\"group\"`\n\n{{< code lang=\"html\" >}}\n<div class=\"rvt-collapsible-accordion\" data-accordion role=\"group\">\n  <div class=\"rvt-collapsible\">\n    <!-- Collapsible 1 markup -->\n  </div>\n  <div class=\"rvt-collapsible\">\n    <!-- Collapsible 2 markup -->\n  </div>\n  <div class=\"rvt-collapsible\">\n    <!-- Collapsible 3 markup -->\n  </div>\n</div>\n{{< /code >}}\n\nThe `rvt-collapsible-accordion` class will add a small amount of margin between each collapsible and the `data-accordion` attribute is used as a JavaScript hook to handle keyboard navigation inside the accordion.\n\n## Installing with NPM\nThe collapsible is available to install as a dependency in your project. To install via NPM run the following in your terminal:\n\n{{< code >}}npm install rivet-collapsible --save-dev\n{{< /code >}}\n\nIf you are using a module bundler, you can include the collapsible in your project like so:\n\n{{< code >}}const collapsible = require('rivet-collapsible');\n\n// Initialize the plugin\nCollapsible.init();\n{{< /code >}}\n\n## JavaScript API\nThe Rivet collapsible component exposes a handful of methods you can use to programmatically control the component. The `.init()` method must be called somewhere in your document after the `rivet-collapsible.js` script is included. The `init()` method attaches an event listener to the document that listens for clicks on buttons with the `data-collapsible` attribute. With that in mind you should be able to dynamically add collapsibles to the DOM without having the re-initialize the component.\n\n### Methods\n\n| Method| Description                                                                                                                                                       |\n|--------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `Collapsible.init()` | Initializes the collapsible component |\n| `Collapsible.open(button, callback)` | Accepts a collapsible toggle button element `[data-collapsible]` and an optional callback function that is run after the collapsible is toggled opened. |\n| `Collapsible.close(button, callback)` | Accepts a collapsible toggle button element `[data-collapsible]` and an optional callback function that is run after the collapsible is toggled closed. |\n| `Collapsible.destroy()` | Destroys the current initialization of the collapsible component and removes its event listener.|\n",
        "tags": [],
        "description": "An expand-and-collapse widget for Rivet"
    },
    {
        "uri": "add-ons/rivet-shell",
        "title": "Shell",
        "content": "Getting started\nThe Rivet shell Add-on requires the use of the core Rivet CSS. You can find out more about how to get started in the Rivet documentation. Once you are using Rivet, you can download the Rivet shell source files and include them in your project.\n\n1. Include the CCS in your page\n{{}}\n{{}}\n\n2. Add the markup to your page.\n\nShell base\nThe default Rivet layout shell comes ready to use with any of the Rivet header variations and the Rivet footer. The stage area will fill up the remaining vertical space and push the footer to the bottom of the browser window.\n\n{{}}\n\n{{}}\n\nShell base demo\n\nShell with page header\nThe shell also includes a pre-configured page-level header. The shell page header has a space for a page title, back/breadcrumb navigation, and an actions area where you can use other Rivet controls like buttons and form inputs.\n\n{{}}\n\n{{}}\n\nShell with page header demo\n\nShell sidebar\nTo offer even more flexibility, the Rivet shell also comes with a sidebar component that can be used to help layout out navigation and content.\n\n{{}}\n\n{{}}\n\nShell sidebar on smaller screens\nThe shell sidebar is hidden on screens smaller than 1080 pixels wide. You can use the Rivet header drawer to display the shell sidebar navigation on smaller screens.\n\nShell with sidebar demo",
        "rawContent": "## Getting started\nThe Rivet shell Add-on requires the use of the core Rivet CSS. You can find out more about how to get started in [the Rivet documentation](https://rivet.iu.edu/components/). Once you are using Rivet, you can download the Rivet shell source files and include them in your project.\n\n### 1. Include the CCS in your page\n{{< code lang=\"html\" >}}<link rel=\"stylesheet\" href=\"dist/css/rivet-shell.min.css\">\n{{< /code >}}\n\n### 2. Add the markup to your page.\n\n#### Shell base\nThe default Rivet layout shell comes ready to use with any of the Rivet header variations and the Rivet footer. The _stage_ area will fill up the remaining vertical space and push the footer to the bottom of the browser window.\n\n{{< code lang=\"html\" >}}<div class=\"rvt-shell\">\n  <div class=\"rvt-shell__stage\">\n    <!-- Main content \"Stage\" -->\n  </div>\n</div>\n{{< /code >}}\n\n[Shell base demo](https://indiana-university.github.io/rivet-shell/rivet-shell-empty)\n\n#### Shell with page header\nThe shell also includes a pre-configured page-level header. The shell page header has a space for a page title, back/breadcrumb navigation, and an _actions_ area where you can use other Rivet controls like buttons and form inputs.\n\n{{< code lang=\"html\" >}}<div class=\"rvt-shell\">\n  <div class=\"rvt-shell__stage\">\n    <div class=\"rivet-page-header\">\n      <!-- Page header content -->\n    </div>\n    <div class=\"rvt-p-all-md\">\n      <!-- Main content \"Stage\" -->\n    </div>\n  </div>\n</div>\n{{< /code >}}\n\n[Shell with page header demo](https://indiana-university.github.io/rivet-shell/rivet-shell-page-header-only)\n\n#### Shell sidebar\nTo offer even more flexibility, the Rivet shell also comes with a sidebar component that can be used to help layout out navigation and content.\n\n{{< code lang=\"html\" >}}<div class=\"rvt-shell\">\n  <div class=\"rvt-shell__sidebar\">\n    <!-- Sidebar content -->\n  </div>\n  <div class=\"rvt-shell__stage rvt-p-all-md\">\n    <!-- Main content \"Stage\" -->\n  </div>\n</div>\n{{< /code >}}\n\n#### Shell sidebar on smaller screens\nThe shell sidebar is hidden on screens smaller than 1080 pixels wide. You can use the [Rivet header drawer](../../components/navigation/header/#nested-navigation-inside-drawer) to display the shell sidebar navigation on smaller screens.\n\n[Shell with sidebar demo](https://indiana-university.github.io/rivet-shell/rivet-shell-sidebar/index.html)",
        "tags": [],
        "description": "A configurable set of layout components designed for applications using Rivet"
    },
    {
        "uri": "add-ons/rivet-switch",
        "title": "Switch",
        "content": "Getting started\nThe Rivet switch Add-on requires the use of the core Rivet CSS. You can find out more about how to get started in the Rivet documentation. Once you are using Rivet, you can download the Rivet switch source files and include them in your project.\n\nNote: closest() polyfill\nThe Rivet Switch uses the .closest() JavaScript method which works in all modern web browsers, but requires a small polyfill to add support for Internet Explorer 11. The main Rivet JavaScript file (rivet.js) already includes the closest() polyfill so if you are using it on your page there is no need to add it.\n\n{{}}/**\n Element.closest() polyfill\n https://developer.mozilla.org/en-US/docs/Web/API/Element/closest#Polyfill\n */\nif (!Element.prototype.closest) {\n  if (!Element.prototype.matches) {\n    Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;\n  }\n\n  Element.prototype.closest = function (s) {\n    var el = this;\n    var ancestor = this;\n    if (!document.documentElement.contains(el)) return null;\n    do {\n      if (ancestor.matches(s)) return ancestor;\n      ancestor = ancestor.parentElement;\n    } while (ancestor !== null);\n    return null;\n  };\n}\n{{}}\n\n1. Include the CCS and JavaScript in your page\n{{}}\n\n{{}}\n\n2. Add the markup to your HTML\nThe Rivet switch markup uses a HTML `` element. To use the switch add the following markup to your page.\n\n{{}}\n  On\n  Off\n\n{{}}\n\n3. Initialize the Add-on\nLastly, you'll need to initialize somewhere right before the closing `` tag of you page.\n\n{{}}\n  Switch.init();\n\n{{}}\n\nJavaScript API\nThe Rivet switch component exposes a handful of methods you can use to programmatically control the component. The .init() method must be called somewhere in your document after the rivet-switch.js script is included. The init() method attaches an event listener to the document that listens for clicks on buttons with the data-switch attribute. With that in mind you should be able to dynamically add switches to the DOM without having the re-initialize the component.\n\nMethods\n\n| Method| Description|\n|--------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Switch.init() | Initializes the switch component |\n| Switch.on(button, callback) | Accepts a switch button element [data-switch] and an optional callback function that is run after the switch is toggled on. |\n| Switch.off(button, callback) | Accepts a switch button element [data-switch] and an optional callback function that is run after the switch is toggled off. |\n\nCustom events\nThe switch component emits custom events when it's toggled on or off. You can listen for these events in your own scripts and respond to them as needed.\n\n|Event|Description|\n|----|------|\n|switchOn|Emitted when the switch is toggled on via the Switch.on() method. The value of the switch data-switch attibute is also passed along via the custom event's detail property and is available to use in your scripts as event.detail.name()|\n|switchOff|Emitted when the switch is toggled on via the Switch.off() method. The value of the switch data-switch attibute is also passed along via the custom event's detail property and is available to use in your scripts as event.detail.name()|\n\nCustom event example\n{{}}// Listen for a custom \"switchOn\" event\ndocument.addEventListener('switchOn', event => {\n  if (event.detail.name() == 'email-switch') {\n    alert('Okay, we\\'ll send you some emails!')\n  }\n  // Maybe send some data via an AJAX request, etc...\n}, false);\n{{}}\n",
        "rawContent": "## Getting started\nThe Rivet switch Add-on requires the use of the core Rivet CSS. You can find out more about how to get started in [the Rivet documentation](https://rivet.iu.edu/components/). Once you are using Rivet, you can download the Rivet switch source files and include them in your project.\n\n### Note: `closest()` polyfill\nThe Rivet Switch uses the `.closest()` JavaScript method which works in all modern web browsers, but requires a small polyfill to add support for Internet Explorer 11. The main Rivet JavaScript file (`rivet.js`) already includes the `closest()` polyfill so if you are using it on your page there is no need to add it.\n\n{{< code lang=\"js\" >}}/**\n * Element.closest() polyfill\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/closest#Polyfill\n */\nif (!Element.prototype.closest) {\n  if (!Element.prototype.matches) {\n    Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;\n  }\n\n  Element.prototype.closest = function (s) {\n    var el = this;\n    var ancestor = this;\n    if (!document.documentElement.contains(el)) return null;\n    do {\n      if (ancestor.matches(s)) return ancestor;\n      ancestor = ancestor.parentElement;\n    } while (ancestor !== null);\n    return null;\n  };\n}\n{{< /code >}}\n\n### 1. Include the CCS and JavaScript in your page\n{{< code lang=\"html\" >}}<link rel=\"stylesheet\" href=\"dist/css/rivet-switch.min.css\">\n<script src=\"dist/js/rivet-switch.min.js\"></script>\n{{< /code >}}\n\n### 2. Add the markup to your HTML\nThe Rivet switch markup uses a HTML `<button>` element. To use the switch add the following markup to your page.\n\n{{< code lang=\"html\" >}}<button class=\"rvt-switch\" data-switch=\"email-switch\" role=\"switch\" aria-checked=\"false\">\n  <span class=\"rvt-switch__on\">On</span>\n  <span class=\"rvt-switch__off\">Off</span>\n</button>\n{{< /code >}}\n\n### 3. Initialize the Add-on\nLastly, you'll need to initialize somewhere right before the closing `</body>` tag of you page.\n\n{{< code lang=\"html\" >}}<script>\n  Switch.init();\n</script>\n{{< /code >}}\n\n## JavaScript API\nThe Rivet switch component exposes a handful of methods you can use to programmatically control the component. The `.init()` method must be called somewhere in your document after the `rivet-switch.js` script is included. The `init()` method attaches an event listener to the document that listens for clicks on buttons with the `data-switch` attribute. With that in mind you should be able to dynamically add switches to the DOM without having the re-initialize the component.\n\n### Methods\n\n| Method| Description|\n|--------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `Switch.init()` | Initializes the switch component |\n| `Switch.on(button, callback)` | Accepts a switch button element `[data-switch]` and an optional callback function that is run after the switch is toggled on. |\n| `Switch.off(button, callback)` | Accepts a switch button element `[data-switch]` and an optional callback function that is run after the switch is toggled off. |\n\n### Custom events\nThe switch component emits custom events when it's toggled on or off. You can listen for these events in your own scripts and respond to them as needed.\n\n|Event|Description|\n|----|------|\n|`switchOn`|Emitted when the switch is toggled on via the `Switch.on()` method. The value of the switch `data-switch` attibute is also passed along via the custom event's `detail` property and is available to use in your scripts as `event.detail.name()`|\n|`switchOff`|Emitted when the switch is toggled on via the `Switch.off()` method. The value of the switch `data-switch` attibute is also passed along via the custom event's `detail` property and is available to use in your scripts as `event.detail.name()`|\n\n#### Custom event example\n{{< code lang=\"javascript\" >}}// Listen for a custom \"switchOn\" event\ndocument.addEventListener('switchOn', event => {\n  if (event.detail.name() == 'email-switch') {\n    alert('Okay, we\\'ll send you some emails!')\n  }\n  // Maybe send some data via an AJAX request, etc...\n}, false);\n{{< /code >}}\n\n",
        "tags": [],
        "description": "A switch component for Rivet"
    },
    {
        "uri": "blog",
        "title": "Rivet Blog",
        "content": "",
        "rawContent": "",
        "tags": [],
        "description": "Updates on new features, tutorials, and news about Rivet releases."
    },
    {
        "uri": "blog/0.5.0-migration-guide",
        "title": "0.5.0+ Migration guide",
        "content": "Overview\nThe 0.5.0 release of Rivet brings a ton of new components and features. In the future, the pace of change in Rivet will normalize, but with this latest release, we wanted to provide a quick guide to the latest version.\n\nHere's a quick list of the major additions:\n\nTabs component, including three variations: default, fitted, and vertical\nHeader updates, including better considerations for smaller screens and markup improvements\nDropdown menus\nCustom file input/upload button\nRedesigned inline form input validation styles\nSegmented buttons\nRedesigned badges\nTons of accessibility improvements\n\nHeader updates\nWe’ve improved the markup in the header to be more accessible. Previously, all dropdown menus in the header were toggled using anchor elements `. We’ve improved things by using ` elements instead. Using buttons is more semantically correct, and it avoids some accessibility pitfalls associated with having links on a page with invalid URLs.\n\nWe also made a small update to the attribute that associates dropdown toggles with the menus they control. The dropdown toggle buttons now use an attribute called data-dropdown-toggle (in place of the old data-dropdown-trigger). This change was driven by a larger effort to make a standalone dropdown component, which is also in this release 🎉\n\nHow to update the header\n\nChange all toggles that used ` tags to  tags and remove the href` attributes.\nMake sure all toggle buttons have a class of rvt-dropdown__toggle. This CSS class is specific to the header and provides styling of any dropdown toggle used there.\nUpdate the data attribute on each toggle to data-dropdown-toggle.\nWrap the dropdown toggle text in a ` with the class .rvt-dropdown__toggle-text`.\nAdd the inline svg code for the new dropdown toggle icon inside the new button element and after the toggle text. You can get the code for the dropdown icon with the main navigation example.\nAdd the role=\"menu\" ARIA attribute to all .rvt-dropdown__menu elements.\nUpdate the inline svg inside the .rvt-header__trident ``. This new code helps the header scale on smaller screens. Copy the code below.\nUpdate the inline svg code for the .rvt-drawer-button element. (This update is also related to the responsive header updates. Copy the code below.\nUpdate all instances of data-subnav-trigger in the rvt-drawer element to be data-subnav-toggle.\nUpdate the .rvt-drawer__bottom-close element that is only visible on focus to use a button element in place of the current `` element.\n\nNew trident SVG code\n{{}}\n\n        Indiana University Logo\n\n{{}}\n\nNew drawer button code\n{{}}\n    Toggle menu\n\n{{}}\n\nNew bottom (focus only) drawer close button\nWe've updated the markup for the bottom close button in the drawer (visible on focus only) to use a more semantically correct and accessible ` element in place of the old ` element it was using.\n\n{{}}Close nav{{}}\n\nNew modal close and alert dismiss icon\nWe also updated a few close icons to make them more consistent. You can update the icons in your modal close (.rvt-modalclose) and alert dismiss (.rvt-alertdismiss) buttons by pasting the following code into them.\n\n{{}}\n\n{{}}\n\nNew inline form validation style\nFinally, we added a lot of new styles for inline form validation, along with documentation on how to implement them.\n\nLearn how to use the inline validation style on text inputs and `` elements.\nLearn how to use the standalone inline alert on groups of form controls like checkboxes and radio buttons.\n\nButton styles must be applied with CSS class\nOlder versions of Rivet used a more generic set of CSS selectors to apply buttons styles. That meant that any ` element (without any classes) would be styled to look like a Rivet button by default. Starting in 0.5.0 you will need to explicitly use the CSS class .rvt-button to get the Rivet button styles. By removing the default styling on  elements, it will be easier to style them for custom components and designs. You will no longer have to override the default ` styles.\n\n{{}}\nRivet button\n\nAh ha!\n{{}}",
        "rawContent": "## Overview\nThe 0.5.0 release of Rivet brings a ton of **new components and features**. In the future, the pace of change in Rivet will normalize, but with this latest release, we wanted to provide a quick guide to the latest version.\n\n**Here's a quick list of the major additions**:\n\n- Tabs component, including three variations: default, fitted, and vertical\n- Header updates, including better considerations for smaller screens and markup improvements\n- Dropdown menus\n- Custom file input/upload button\n- Redesigned inline form input validation styles\n- Segmented buttons\n- Redesigned badges\n- Tons of accessibility improvements\n\n\n## Header updates\nWe’ve improved the markup in the header to be more accessible. Previously, all dropdown menus in the header were toggled using anchor elements `<a>`. We’ve improved things by using `<button>` elements instead. Using buttons is more semantically correct, and it avoids some accessibility pitfalls associated with having links on a page with invalid URLs.\n\nWe also made a small update to the attribute that associates dropdown toggles with the menus they control. The dropdown toggle buttons now use an attribute called `data-dropdown-toggle` (in place of the old `data-dropdown-trigger`). This change was driven by a larger effort to make a [standalone dropdown component]({{< ref \"components/navigation/dropdown.md\" >}}), which is also in this release 🎉\n\nHow to update the header\n\n1. Change all toggles that used `<a>` tags to `<button>` tags and remove the `href` attributes.\n2. Make sure all toggle buttons have a class of `rvt-dropdown__toggle`. This CSS class is specific to the header and provides styling of any dropdown toggle used there.\n3. Update the data attribute on each toggle to `data-dropdown-toggle`.\n4. Wrap the dropdown toggle text in a `<span>` with the class `.rvt-dropdown__toggle-text`.\n5. Add the inline svg code for the new dropdown toggle icon **inside the new button element and after the toggle text**. You can [get the code for the dropdown icon]({{< ref \"components/navigation/header.md#header-with-main-navigation\" >}}) with the main navigation example.\n5. Add the `role=\"menu\"` ARIA attribute to all `.rvt-dropdown__menu` elements.\n6. Update the inline svg inside the `.rvt-header__trident` `<div>`. This new code helps the header scale on smaller screens. [Copy the code below](#new-trident-svg-code).\n7. Update the inline svg code for the `.rvt-drawer-button` element. (This update is also related to the responsive header updates. [Copy the code below](#new-drawer-button-code).\n8. Update all instances of `data-subnav-trigger` in the `rvt-drawer` element to be `data-subnav-toggle`.\n9. Update the `.rvt-drawer__bottom-close` element that is only visible on focus to use a `button` element in place of the current `<a>` element.\n\n### New trident SVG code\n{{< code lang=\"html\" >}}<div class=\"rvt-header__trident\">\n    <svg class=\"rvt-header__trident-logo\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 41 48\" aria-hidden=\"true\" aria-describedby=\"iu-logo\">\n        <title id=\"iu-logo\">Indiana University Logo</title>\n        <rect width=\"41\" height=\"48\" fill=\"#900\"/>\n        <polygon points=\"24.59 12.64 24.59 14.98 26.34 14.98 26.34 27.78 22.84 27.78 22.84 10.9 24.59 10.9 24.59 8.57 16.41 8.57 16.41 10.9 18.16 10.9 18.16 27.78 14.66 27.78 14.66 14.98 16.41 14.98 16.41 12.64 8.22 12.64 8.22 14.98 9.97 14.98 9.97 30.03 12.77 33.02 18.16 33.02 18.16 36.52 16.41 36.52 16.41 39.43 24.59 39.43 24.59 36.52 22.84 36.52 22.84 33.02 28 33.02 31.01 30.03 31.01 14.98 32.78 14.98 32.78 12.64 24.59 12.64\" fill=\"#fff\"/>\n    </svg>\n</div>\n{{< /code >}}\n\n### New drawer button code\n{{< code lang=\"html\" >}}<button class=\"rvt-drawer-button\" aria-haspopup=\"true\" aria-expanded=\"false\" data-drawer-toggle=\"mobile-drawer\">\n    <span class=\"sr-only\">Toggle menu</span>\n    <svg aria-hidden=\"true\" class=\"rvt-drawer-button-open\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\">\n        <g fill=\"currentColor\">\n            <path d=\"M15,3H1A1,1,0,0,1,1,1H15a1,1,0,0,1,0,2Z\"/>\n            <path d=\"M15,9H1A1,1,0,0,1,1,7H15a1,1,0,0,1,0,2Z\"/>\n            <path d=\"M15,15H1a1,1,0,0,1,0-2H15a1,1,0,0,1,0,2Z\"/>\n        </g>\n    </svg>\n    <svg aria-hidden=\"true\" class=\"rvt-drawer-button-close\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\">\n        <path fill=\"currentColor\" d=\"M9.41,8l5.29-5.29a1,1,0,0,0-1.41-1.41L8,6.59,2.71,1.29A1,1,0,0,0,1.29,2.71L6.59,8,1.29,13.29a1,1,0,1,0,1.41,1.41L8,9.41l5.29,5.29a1,1,0,0,0,1.41-1.41Z\"/>\n    </svg>\n</button>\n{{< /code >}}\n\n### New bottom (focus only) drawer close button\nWe've updated the markup for the bottom close button in the drawer (visible on focus only) to use a more semantically correct and accessible `<button>` element in place of the old `<a>` element it was using.\n\n{{< code lang=\"html\" >}}<button class=\"rvt-drawer__bottom-close\">Close nav</button>{{< /code >}}\n\n## New modal close and alert dismiss icon\nWe also updated a few close icons to make them more consistent. You can update the icons in your modal close (`.rvt-modal__close`) and alert dismiss (`.rvt-alert__dismiss`) buttons by pasting the following code into them.\n\n{{< code lang=\"html\" >}}<svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\">\n    <path fill=\"currentColor\" d=\"M9.41,8l5.29-5.29a1,1,0,0,0-1.41-1.41L8,6.59,2.71,1.29A1,1,0,0,0,1.29,2.71L6.59,8,1.29,13.29a1,1,0,1,0,1.41,1.41L8,9.41l5.29,5.29a1,1,0,0,0,1.41-1.41Z\"/>\n</svg>\n{{< /code >}}\n\n## New inline form validation style\nFinally, we added a lot of new styles for inline form validation, along with documentation on how to implement them.\n\n- Learn how to [use the inline validation style]({{< ref \"components/forms/text-input.md#inline-validation-states\" >}}) on text inputs and `<select>` elements.\n- Learn how to [use the standalone inline alert]({{< ref \"components/overlays/alerts.md#standalone-inline-alerts\" >}}) on groups of form controls like checkboxes and radio buttons.\n\n## Button styles must be applied with CSS class\nOlder versions of Rivet used a more generic set of CSS selectors to apply buttons styles. That meant that any `<button>` element (without any classes) would be styled to look like a Rivet button by default. Starting in 0.5.0 you will need to explicitly use the CSS class `.rvt-button` to get the Rivet button styles. By removing the default styling on `<button>` elements, it will be easier to style them for custom components and designs. You will no longer have to override the default `<button>` styles.\n\n{{< code lang=\"html\" >}}<!-- Sorry, this will no longer work! -->\n<button>Rivet button</button>\n\n<!-- But, this will get you a Rivet button -->\n<button class=\"rvt-button\">Ah ha!</button>\n{{< /code >}}",
        "tags": [
            "release"
        ],
        "description": "We made some pretty substantial additions and updates to Rivet in the 0.5.0 release. Here's what you need to know."
    },
    {
        "uri": "blog/contributing-to-rivet",
        "title": "Contributing",
        "content": "Github issues\nWe’ll be using Github issues to keep track of new component submissions, bugs, design feedback, and any other suggestions related to the design system. To help us understand the kind of contribution you want to make, we ask that you first submit a Github.\n\n{{}}Create an issue{{}}\n\nGuidelines\nHere are a few guidelines to follow when creating a new issue:\n\nGo to the Rivet source repository on GitHub.\nClick the \"New Issue\" button.\nFill out the provided issue template to the best of your ability. If you are submitting a design concept for a new or existing component please attach a screenshot, a link to an Axure mockup, or feel free to link to example HTML/CSS/JavaScript (a link to a pen on Codepen would be great!). We’re looking for anything that will demonstrate your concept here. Don’t worry if it’s unstyled or lacks visual design.\nAfter you have filled out the issue template click the Submit new issue button to create your new issue.\nOnce the issue is created it will move on to the review process.\n\nReview process\nCreating an issue is just a way to start a conversation that is visible to the whole team. Anyone should feel free to create a new issue, but before a new submission moves on to a formal review process we’ll ask that it include Each one include:\n\na fairly short descriptive title\nWhat will be gained by adding this design and will be lost if we don't?\nA description of the design problem this component solves\nat least one of the following: screenshots/images of your rendered design, wireframes, design mockups, links to Codepen, jsFiddle, etc., Axure mockups, iPhone photo of a napkin sketch.\n    NOTE: If applicable, this should include a documented interaction flow, eg. states (hover, focus, click, drag...), error and success messages, etc.\nany other document, links, research you would like to include\nIf you have a specific use-case for a proposed solution, please provide some context (screenshots, links)\n\nCollaboration\n\nIf you are a developer and want help with your submission from a designer make sure to mention that when creating your issue and someone from the review team will help pair you up with a designer. Same goes for designers that want help from a developer.\n\nContent changes\nIf you are proposing a content change, please include a draft of the text content you're focusing on.\n\nProposed Status\nAfter the Github issue is created and the submission has enough information and supporting materials (i.e., the issue template is completely filled out), someone from the team will mark the issue as Proposed. Otherwise, someone from the team will ask the submitter for further information/documentation and mark the issue as needs more info.\n\nReview criteria\nOnce they have enough info, the team will do a review of the proposed design based on the following criteria:\n\nUsability — Is the interaction flow clearly documented? Is the pattern responsive? Does it follow commonly accepted best practices?\nFlexibility — Does the component meet the greatest number of use cases possible? In other words, is this a common pattern that occurs in lots of applications, or it solving a particular problem in one application?\nAccessibility — Is the pattern accessible to all intended audiences?\nVisual design — Is the contribution consistent with our visual style?\nContent — Does the pattern have plain language, correct spelling, and grammar? Does the author clearly describe actions?\n\nIf the team decides to not move forward with the design submission, the issue will be marked as archived with an explanation of why.\n",
        "rawContent": "## Github issues\nWe’ll be using Github issues to keep track of new component submissions, bugs, design feedback, and any other suggestions related to the design system. To help us understand the kind of contribution you want to make, we ask that you first [submit a Github](https://github.com/indiana-university/rivet-source/issues/new/choose).\n\n{{< button url=\"https://github.com/indiana-university/rivet-source/issues/new/choose\" >}}Create an issue{{< /button >}}\n\n## Guidelines\nHere are a few guidelines to follow when creating a new issue:\n\n1. Go to the Rivet source repository on [GitHub](https://github.com/indiana-university/rivet-source/issues/new/choose).\n2. Click the \"New Issue\" button.\n3. Fill out the provided issue template to the best of your ability. If you are submitting a design concept for a new or existing component please attach a screenshot, a link to an Axure mockup, or feel free to link to example HTML/CSS/JavaScript (a link to a pen on Codepen would be great!). We’re looking for anything that will demonstrate your concept here. Don’t worry if it’s unstyled or lacks visual design.\n4. After you have filled out the issue template click the Submit new issue button to create your new issue.\n5. Once the issue is created it will move on to the review process.\n\n## Review process\nCreating an issue is just a way to start a conversation that is visible to the whole team. Anyone should feel free to create a new issue, but before a new submission moves on to a formal review process we’ll ask that it include Each one include:\n\n- a fairly short descriptive title\n- What will be gained by adding this design and will be lost if we don't?\n- A description of the design problem this component solves\n- at least one of the following: screenshots/images of your rendered design, wireframes, design mockups, links to [Codepen](http://codepen.io/), [jsFiddle](https://jsfiddle.net/), etc., Axure mockups, iPhone photo of a napkin sketch.\n    - **NOTE**: If applicable, this should include a documented interaction flow, eg. states (hover, focus, click, drag...), error and success messages, etc.\n- any other document, links, research you would like to include\n- If you have a specific use-case for a proposed solution, please provide some context (screenshots, links)\n\n### Collaboration\n\nIf you are a developer and want help with your submission from a designer make sure to mention that when creating your issue and someone from the review team will help pair you up with a designer. Same goes for designers that want help from a developer.\n\n### Content changes\nIf you are proposing a content change, please include a draft of the text content you're focusing on.\n\n### Proposed Status\nAfter the Github issue is created and the submission has enough information and supporting materials (i.e., the issue template is completely filled out), someone from the team will mark the issue as _Proposed_. Otherwise, someone from the team will ask the submitter for further information/documentation and mark the issue as _needs more info_.\n\n### Review criteria\nOnce they have enough info, the team will do a review of the proposed design based on the following criteria:\n\n- **Usability** — Is the interaction flow clearly documented? Is the pattern responsive? Does it follow commonly accepted best practices?\n- **Flexibility** — Does the component meet the greatest number of use cases possible? In other words, is this a common pattern that occurs in lots of applications, or it solving a particular problem in one application?\n- **Accessibility** — Is the pattern accessible to all intended audiences?\n- **Visual design** — Is the contribution consistent with our visual style?\n- **Content** — Does the pattern have plain language, correct spelling, and grammar? Does the author clearly describe actions?\n\nIf the team decides to not move forward with the design submission, the issue will be marked as archived with an explanation of why.\n",
        "tags": [],
        "description": "If you have created a component you think would be useful to others or would like to make a suggestion, let us know."
    },
    {
        "uri": "blog/integrating-rivet",
        "title": "Integrating Rivet",
        "content": "\nFrontend JavaScript frameworks\nRivet comes with a vanilla JavaScript file to handle the following:\n\nopening and closing modals\ndismissing alerts\nopening drop-down menus in the header\ntoggling the drawer in the header\n\nIf you’re using a frontend JavaScript framework, you may need to adapt Rivet to suit the needs of your application.\n\nIn this article we'll look at the alert component and show how you can translate its functionality to a frontend JavaScript framework. We’ll use React for our example, but you can apply the same concepts to Angular and VueJS.\n\nRivet's included JavaScript\nRivet's JavaScript takes a traditional DOM manipulation approach to interactivity using browser APIs like querySelectorAll() to get DOM elements and manipulate their attributes. Frameworks like React manage interactivity by binding those attributes to data or state.\n\nThese are two different approaches for handling the interactive aspects of a component, but we can use either approach to accomplish the same goal. (For example, we could add a class or remove an element from the DOM using either approach.)\n\nThe Rivet Alert\nWithout any JavaScript involved, the base Alert component can still be used to display messages that cannot be dismissed, for example:\n\n{{}}\n\n        Scheduled System Maintenance\n\n    This system will be unavailable on August 1st due to scheduled system maintenance. Please check back on August 2nd.\n\n{{}}\n\nDismissible alert\nIn some cases, it’s a better user experience to allow the user to dismiss the alert message. We can add a close button to remove it from the DOM.\n\n{{}}\nThank you!\nWe have received your application. Check your email in a few weeks to find out if you’ve been admitted.\n\n    Dismiss this alert\n\n{{}}\n\nBreaking down Rivet’s JS\nWe’ll first look at how the dismiss functionality is implemented in Rivet’s JS. In the next section, we’ll review how to apply the same rules to React.\n\nIn Rivet's JS we use querySelectorAll() to get all of the .rvt-alert__dismiss buttons on the page.\n\n{{}}var dismissButtons = document.querySelectorAll('.rvt-alertdismiss, .alertdismiss');\n{{}}\n\nNext, we use a function called dismissAlert. This will find the dismiss button’s parent element, which is.rvt-alert.\n\n{{}}var dismissAlert = function(context) {\n    var elToDismiss = context.parentNode;\n    elToDismiss.parentNode.removeChild(elToDismiss);\n}\n{{}}\n\nFinally, we loop through all the alert dismiss buttons on the page and attach an event listener. This event listener will remove the alert when clicked.\n\n{{}}for (var i = 0; i }}\n\nTranslating to React\nReact takes a different approach where all of a component’s markup and methods are written together in a single component. Rather than manipulating it directly, React keeps a virtual copy of the DOM and (re)renders it based on some data that gets passed into a component.\n\nThis example shows the basic structure of how we might start to convert a Rivet alert.\n\n{{}}import React from 'react'\n\nexport default class Alert extends React.Component {\n    constructor(props) {\n        super(props)\n    }\n\n    render() {\n        const {children, title, type, id} = this.props;\n\n        return (\n\n                { title }\n                { children }\n\n                    Dismiss this alert\n\n        );\n    }\n}\n{{}}\n\nIn the example above we've done a few things.\n\nWe added the Rivet alert markup to our component's return() function.\nThen, we converted our HTML to JSX syntax, the syntax used in React. For example we converted any instance of class to className.\nLastly, we passed in our title, type, id, props along with React's special children prop.\n\nDismissing the alert\nAt this point we have a functional React component, but we don’t have a way to use the dismiss button. Now we need to start managing our alert component’s state. To do that, we need to add a few lines of code to our component.\n\nFirst, we'll add a state object to our constructor() function with a property called isDismissed. We’ll also set its initial value to false.\n\n{{}}constructor(props) {\n    super(props)\n    // This is where we manage state\n    this.state = { isDismissed: false }\n}\n{{}}\n\nNext up, we'll write a method for our alert component that will update the isDismissed property using React's setState() method. We'll use this later to add dismiss functionality to the dismiss button.\n\n{{}}dismissAlert() {\n    this.setState({\n        isDismissed: true\n    });\n}\n{{}}\n\nFinally, we'll add an onClick attribute to the alert dismiss button that uses the dismissAlert() method we created above.\n\n{{}}\n    ...\n\n{{}}\n\nNow our component should look something like the example below. We have converted our Rivet markup to JSX, passed in our props, added our state object, and written a method to dismiss our alert.\n\nNote, how we have to bind() the context of the new dismissAlert() method inside our component's constructor() function. You can read more about why in the React docs.\n\n{{}}import React from 'react'\n\nexport default class Alert extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = { isDismissed: false }\n        this.dismissAlert = this.dismissAlert.bind(this)\n    }\n\n    dismissAlert() {\n        this.setState({\n            isDismissed: true\n        });\n    }\n\n    render() {\n        const {children, title, type, id} = this.props;\n\n        return (\n\n                { title }\n                { children }\n\n                    Dismiss this alert\n\n        );\n    }\n}\n{{}}\n\nPutting it all together\nThe last step we need to add is conditionally showing the alert based on the state of of our isDismissed property. To do this we'll use a conditional (ternary) operator with the return statement. This will check the status of the  isDismissed variable and render the alert if it is false.\n\n{{}}return this.state.isDismissed ? null : (\n\n         ... Alert JSX\n\n);\n{{}}\n\nWrapping up\nNow we have a working Rivet alert component ready to use in React projects. We’ve purposefully kept this article simple, but you could do more interesting things that would make this component more flexible, like passing in a prop that would make a dismiss button optional.\n\nNow we can use our alert component in our app like so:\n\n{{}}\n    We have received your application. Check your email in a few weeks to find out if you’ve been admitted.\n\n{{}}\n\nJust to recap, here's the code for our final React component:\n\n{{}}class Alert extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { isDismissed: false }\n        this.dismissAlert = this.dismissAlert.bind(this);\n    }\n\n    dismissAlert() {\n        this.setState({\n            isDismissed: true\n        });\n    }\n\n    render() {\n        const {children, title, type, id} = this.props;\n\n        return this.state.isDismissed ? null : (\n\n                { title }\n                { children }\n\n                    Dismiss this alert\n\n        );\n    }\n}\n{{}}\n\nExample\nYou can have a look at the alert component we just created on Codepen. Do you have any ideas on how to improve it or make it more flexible? Let us know or open an issue on Rivet!\n\nSee the Pen Rivet React alert by Levi McGranahan (@levimcg) on CodePen.\n",
        "rawContent": "\n## Frontend JavaScript frameworks\nRivet comes with a vanilla JavaScript file to handle the following:\n\n- opening and closing [modals](/components/overlays/modals)\n- dismissing [alerts](/components/overlays/alerts)\n- opening [drop-down menus in the header](/components/navigation/header#main-navigation-with-dropdowns)\n- toggling the drawer in the [header](/components/navigation/header)\n\nIf you’re using a frontend JavaScript framework, you may need to adapt Rivet to suit the needs of your application.\n\nIn this article we'll look at the [alert](/components/overlays/alerts/) component and show how you can translate its functionality to a frontend JavaScript framework. We’ll use [React](https://reactjs.org) for our example, but you can apply the same concepts to [Angular](https://angularjs.org/) and [VueJS](https://vuejs.org/).\n\n## Rivet's included JavaScript\nRivet's JavaScript takes a traditional DOM manipulation approach to interactivity using browser APIs like `querySelectorAll()` to get DOM elements and manipulate their attributes. Frameworks like React manage interactivity by binding those attributes to data or [state](https://reactjs.org/docs/state-and-lifecycle.html#adding-local-state-to-a-class).\n\nThese are two different approaches for handling the interactive aspects of a component, but we can use either approach to accomplish the same goal. (For example, we could add a class or remove an element from the DOM using either approach.)\n\n## The Rivet Alert\nWithout any JavaScript involved, the base Alert component can still be used to display messages that cannot be dismissed, for example:\n\n{{< example lang=\"html\" >}}<div class=\"rvt-alert rvt-alert--info rvt-m-bottom-md\"\n     role=\"alertdialog\"\n     aria-labelledby=\"information-alert-title\">\n    <h1 class=\"rvt-alert__title\" id=\"information-alert-title\">\n        Scheduled System Maintenance\n    </h1>\n    <p class=\"rvt-alert__message\">This system will be unavailable on August 1st due to scheduled system maintenance. Please check back on August 2nd.</p>\n</div>\n{{< /example >}}\n\n### Dismissible alert\nIn some cases, it’s a better user experience to allow the user to dismiss the alert message. We can add a close button to remove it from the DOM.\n\n{{< example lang=\"html\" >}}<div class=\"rvt-alert rvt-alert--success rvt-m-bottom-md m-top-sm\" role=\"alertdialog\" aria-labelledby=\"success-alert-title\">\n<h1 class=\"rvt-alert__title\" id=\"success-alert-title\">Thank you!</h1>\n<p class=\"rvt-alert__message\">We have received your application. Check your email in a few weeks to find out if you’ve been admitted.</p>\n<button class=\"rvt-alert__dismiss\">\n    <span class=\"v-hide\">Dismiss this alert</span>\n    <svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\">\n        <path d=\"M10,8l5.63-5.63a1.39,1.39,0,0,0-2-2L8,6,2.37.41a1.39,1.39,0,0,0-2,2L6,8,.41,13.63a1.39,1.39,0,1,0,2,2L8,10l5.63,5.63a1.39,1.39,0,0,0,2-2Z\" style=\"fill: #333\"/>\n    </svg>\n</button>\n</div>\n{{< /example >}}\n\n## Breaking down Rivet’s JS\nWe’ll first look at how the dismiss functionality is implemented in Rivet’s JS. In the next section, we’ll review how to apply the same rules to React.\n\nIn Rivet's JS we use `querySelectorAll()` to get all of the `.rvt-alert__dismiss` buttons on the page.\n\n{{< code lang=\"javascript\" >}}var dismissButtons = document.querySelectorAll('.rvt-alert__dismiss, .alert__dismiss');\n{{< /code >}}\n\nNext, we use a function called `dismissAlert`. This will find the dismiss button’s parent element, which is`.rvt-alert`.\n\n{{< code lang=\"javascript\" >}}var dismissAlert = function(context) {\n    var elToDismiss = context.parentNode;\n    elToDismiss.parentNode.removeChild(elToDismiss);\n}\n{{< /code >}}\n\nFinally, we loop through all the alert dismiss buttons on the page and attach an event listener. This event listener will remove the alert when clicked.\n\n{{< code lang=\"javascript\" >}}for (var i = 0; i < els.length; i++) {\n    els[i].addEventListener('click', function() {\n        dismissAlert(this);\n    });\n}\n{{< /code >}}\n\n## Translating to React\nReact takes a different approach where all of a component’s markup and methods are written together in a single component. Rather than manipulating it directly, React keeps a virtual copy of the DOM and (re)renders it based on some data that gets passed into a component.\n\nThis example shows the basic structure of how we might start to convert a Rivet alert.\n\n{{< code >}}import React from 'react'\n\nexport default class Alert extends React.Component {\n    constructor(props) {\n        super(props)\n    }\n\n    render() {\n        const {children, title, type, id} = this.props;\n\n        return (\n            <div className={`rvt-alert rvt-alert--${ type ? type : 'info' }`}\n                 role=\"alertdialog\"\n                 aria-labelledby={id}>\n                <h1 className=\"rvt-alert__title\" id={id}>{ title }</h1>\n                <p className=\"rvt-alert__message\">{ children }</p>\n                <button className=\"rvt-alert__dismiss\">\n                    <span className=\"v-hide\">Dismiss this alert</span>\n                    <svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\">\n                        <path d=\"M10,8l5.63-5.63a1.39,1.39,0,0,0-2-2L8,6,2.37.41a1.39,1.39,0,0,0-2,2L6,8,.41,13.63a1.39,1.39,0,1,0,2,2L8,10l5.63,5.63a1.39,1.39,0,0,0,2-2Z\" />\n                    </svg>\n                </button>\n            </div>\n        );\n    }\n}\n{{< /code >}}\n\nIn the example above we've done a few things.\n\n1. We added the Rivet alert markup to our component's `return()` function.\n2. Then, we converted our HTML to [JSX syntax](https://reactjs.org/docs/introducing-jsx.html), the syntax used in React. For example we converted any instance of `class` to `className`.\n3. Lastly, we passed in our `title`, `type`, `id`, `props` along with React's special `children` `prop`.\n\n### Dismissing the alert\nAt this point we have a functional React component, but we don’t have a way to use the dismiss button. Now we need to start managing our alert component’s state. To do that, we need to add a few lines of code to our component.\n\nFirst, we'll add a `state` object to our `constructor()` function with a property called `isDismissed`. We’ll also set its initial value to `false`.\n\n{{< code lang=\"javascript\" >}}constructor(props) {\n    super(props)\n    // This is where we manage state\n    this.state = { isDismissed: false }\n}\n{{< /code >}}\n\nNext up, we'll write a method for our alert component that will update the `isDismissed` property using React's `setState()` method. We'll use this later to add dismiss functionality to the dismiss button.\n\n{{< code lang=\"javascript\" >}}dismissAlert() {\n    this.setState({\n        isDismissed: true\n    });\n}\n{{< /code >}}\n\nFinally, we'll add an `onClick` attribute to the alert dismiss button that uses the `dismissAlert()` method we created above.\n\n{{< code lang=\"javascript\" >}}<button className=\"rvt-alert__dismiss\" onClick={this.dismissAlert}>\n    ...\n</button>\n{{< /code >}}\n\nNow our component should look something like the example below. We have converted our Rivet markup to JSX, passed in our `props`, added our state object, and written a method to dismiss our alert.\n\nNote, how we have to `bind()` the context of the new `dismissAlert()` method inside our component's `constructor()` function. You can read more about why in the [React docs](https://reactjs.org/docs/hello-world.html).\n\n{{< code >}}import React from 'react'\n\nexport default class Alert extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = { isDismissed: false }\n        this.dismissAlert = this.dismissAlert.bind(this)\n    }\n\n    dismissAlert() {\n        this.setState({\n            isDismissed: true\n        });\n    }\n\n    render() {\n        const {children, title, type, id} = this.props;\n\n        return (\n            <div className={`rvt-alert rvt-alert--${ type ? type : 'info' }`}\n                 role=\"alertdialog\"\n                 aria-labelledby={id}>\n                <h1 className=\"rvt-alert__title\" id={id}>{ title }</h1>\n                <p className=\"rvt-alert__message\">{ children }</p>\n                <button className=\"rvt-alert__dismiss\" onClick={this.dismissAlert}>\n                    <span className=\"v-hide\">Dismiss this alert</span>\n                    <svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\">\n                        <path d=\"M10,8l5.63-5.63a1.39,1.39,0,0,0-2-2L8,6,2.37.41a1.39,1.39,0,0,0-2,2L6,8,.41,13.63a1.39,1.39,0,1,0,2,2L8,10l5.63,5.63a1.39,1.39,0,0,0,2-2Z\" />\n                    </svg>\n                </button>\n            </div>\n        );\n    }\n}\n{{< /code >}}\n\n## Putting it all together\nThe last step we need to add is conditionally showing the alert based on the state of of our `isDismissed` property. To do this we'll use a conditional (ternary) operator with the `return` statement. This will check the status of the  `isDismissed` variable and render the alert if it is false.\n\n{{< code lang=\"javascript\" >}}return this.state.isDismissed ? null : (\n    <div className={`rvt-alert rvt-alert--${ type ? type : 'info' }`}\n         role=\"alertdialog\"\n         aria-labelledby={id}>\n\n         ... Alert JSX\n\n    </div>\n);\n{{< /code >}}\n\n## Wrapping up\nNow we have a working Rivet alert component ready to use in React projects. We’ve purposefully kept this article simple, but you could do more interesting things that would make this component more flexible, like passing in a `prop` that would make a dismiss button optional.\n\nNow we can use our alert component in our app like so:\n\n{{< code lang=\"html\" >}}<Alert\n    type=\"success\"\n    title=\"Thank you!\"\n    id=\"001\">\n    We have received your application. Check your email in a few weeks to find out if you’ve been admitted.\n</Alert>\n{{< /code >}}\n\nJust to recap, here's the code for our final React component:\n\n{{< code lang=\"javascript\" >}}class Alert extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { isDismissed: false }\n        this.dismissAlert = this.dismissAlert.bind(this);\n    }\n\n    dismissAlert() {\n        this.setState({\n            isDismissed: true\n        });\n    }\n\n    render() {\n        const {children, title, type, id} = this.props;\n\n        return this.state.isDismissed ? null : (\n            <div className={`rvt-alert rvt-alert--${ type ? type : 'info' }`}\n                 role=\"alertdialog\"\n                 aria-labelledby={id}>\n                <h1 className=\"rvt-alert__title\" id={id}>{ title }</h1>\n                <p className=\"rvt-alert__message\">{ children }</p>\n                <button className=\"rvt-alert__dismiss\" onClick={this.dismissAlert}>\n                    <span className=\"v-hide\">Dismiss this alert</span>\n                    <svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\">\n                        <path d=\"M10,8l5.63-5.63a1.39,1.39,0,0,0-2-2L8,6,2.37.41a1.39,1.39,0,0,0-2,2L6,8,.41,13.63a1.39,1.39,0,1,0,2,2L8,10l5.63,5.63a1.39,1.39,0,0,0,2-2Z\" />\n                    </svg>\n                </button>\n            </div>\n        );\n    }\n}\n{{< /code >}}\n\n## Example\nYou can have a look at the alert component we just created on Codepen. Do you have any ideas on how to improve it or make it more flexible? <a href=\"mailto:rivet@iu.edu?subject=Rivet React components\">Let us know</a> or <a href=\"https://github.com/indiana-university/rivet-source/issues/new/choose\">open an issue on Rivet</a>!\n\n<p data-height=\"300\" data-theme-id=\"13463\" data-slug-hash=\"rYBEXJ\" data-default-tab=\"js,result\" data-user=\"levimcg\" data-embed-version=\"2\" data-pen-title=\"Rivet React alert\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/levimcg/pen/rYBEXJ/\">Rivet React alert</a> by Levi McGranahan (<a href=\"https://codepen.io/levimcg\">@levimcg</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n",
        "tags": [],
        "description": "Rivet can be integrated with any frontend Javascript framework, including React, Angular and VueJS."
    },
    {
        "uri": "blog/release-1-2-1",
        "title": "Rivet 1.2.1 patch release",
        "content": "",
        "rawContent": "",
        "tags": [],
        "description": "Rivet 1.2.1 is now available. This patch release fixes a bug in the modal JavaScript where using a modal without a corresponding trigger would throw errors."
    },
    {
        "uri": "blog/why-we-built-rivet",
        "title": "Why we built Rivet",
        "content": "\n\nFrom the time students enroll in and graduate from IU, they encounter dozens of apps and software titles that are unique to the university. Often these apps don’t look, feel, or function the same way - so they must relearn how to navigate new systems each time they encounter them.\n\nWhile we recognize these challenges within UITS, we believe they are symptoms of larger software industry problems. Software development is rarely constrained, which means a variety of solutions can be applied to any given challenge. But it also leads to disjointed user experiences. Often developers must start from scratch when they build new software simply because there is no standard way of handling it.\n\nPeople need consistent, familiar, and accessible software experiences, and developers need a standardized system that also responds to IU’s evolving needs. In other words, IU needs a design system.\n\nIU needs a design system\nA design system contains assets that developers can use to create patterns across software titles. It includes guidelines for contribution, so anyone in the IU development community can make suggestions for improvements. And it makes the job of maintaining software much easier.\n\nCollective Efforts\nTypically a design system has input from many developers and designers. Problems and solutions are addressed by an entire team. That helps both designers and developers avoid reinventing designs and code each time they start on a new project. And because it offers a single source of assets, it also helps standardize their work.\n\nMaintenance\nSoftware is considered a product, but it doesn’t wear out or get replaced (unlike traditional consumer goods). Code and designs created years ago still exist in many places, demanding constant maintenance and upgrading.\n\nA design system strips assets down to their barest essentials. These lightweight pieces rely on simplified code - so they are much easier to update or upgrade. Dan Cedarholm, author of Bulletproof Web Design, said it best: “Breaking interfaces down into patterns has been immensely helpful in learning and re-evaluating the best possible code to implement.”\n\nWhy not Bootstrap\nBootstrap is just one of many front-end frameworks used in software development. It’s fast and easy to implement. But it’s also full of rarely used extras, leading to bloated code. Teams using Bootstrap often build additional layers of customization above the base code.\n\n    Illustration of layers of customization for Bootstrap (left) versus Rivet (right).\n\nThis means design patterns and styles are often different from those of the organization. Further, original designs can be difficult to implement in Bootstrap’s structured environment, particularly within tight timelines.\n\n> “How do we create a consistent visual library and unified patterns across a range of systems?\"\n\nWhile Bootstrap offers developers much in the way of markup and CSS, there are some major disadvantages:\n\nBootstrap is not designed for the Indiana University experience\nBootstrap does not document good user experience patterns or interface practices\nBootstrap does not meet the university’s Web Accessibility policy out of the box\n\nBut it’s difficult to ignore Bootstrap’s benefits: It offers a starting place for developers and designers and a consistent visual library, which is why so many teams use it (especially at the enterprise level). So at this point, the question becomes: How do we create something similar that also addresses IU’s needs?\n\nRivet — a sustainable, responsive design system for IU\nWith familiarity being a key component of usability, IU needs a toolset of its own for creating web applications. Rivet is a lightweight, intentional, and focused set of front-end components and tools that allow people at IU to have a familiar experience on all IU web applications. By having our own design system we can include everyone and address everyone's needs.. When there are accessibility issues, we fix them right away.\n\n> “Rivet is not just a set of UI components, it is a place for documenting good UX, accessibility, and design practices. It is a guide of when and how to use certain patterns and implement them in an accessible way.\"\n\nWe want people to reach out to us with requests and suggestions — that way, we’re making decisions about IU software together. By using a system designed by members of the university, university developers can worry less about whether stylings match the IU brand, and focus more on actual product creation.\n\n{{}}Contribute to Rivet{{}}\n",
        "rawContent": "<figure class=\"rvtd-article-figure rvt-m-top-xxl rvt-p-left-xxl rvt-p-right-xxl p-bottom-xxl\">\n    <img src=\"../../img/homepage-hero.png\" alt=\"A Rivet web application on mobile, tablet, and desktop devices\">\n</figure>\n\nFrom the time students enroll in and graduate from IU, they encounter dozens of apps and software titles that are unique to the university. Often these apps don’t look, feel, or function the same way - so they must relearn how to navigate new systems each time they encounter them.\n\nWhile we recognize these challenges within UITS, we believe they are symptoms of larger software industry problems. Software development is rarely constrained, which means a variety of solutions can be applied to any given challenge. But it also leads to disjointed user experiences. Often developers must start from scratch when they build new software simply because there is no standard way of handling it.\n\nPeople need consistent, familiar, and accessible software experiences, and developers need a standardized system that also responds to IU’s evolving needs. In other words, IU needs a design system.\n\n## IU needs a design system\nA design system contains assets that developers can use to create patterns across software titles. It includes guidelines for contribution, so anyone in the IU development community can make suggestions for improvements. And it makes the job of maintaining software much easier.\n\n### Collective Efforts\nTypically a design system has input from many developers and designers. Problems and solutions are addressed by an entire team. That helps both designers and developers avoid reinventing designs and code each time they start on a new project. And because it offers a single source of assets, it also helps standardize their work.\n\n### Maintenance\nSoftware is considered a product, but it doesn’t wear out or get replaced (unlike traditional consumer goods). Code and designs created years ago still exist in many places, demanding constant maintenance and upgrading.\n\nA design system strips assets down to their barest essentials. These lightweight pieces rely on simplified code - so they are much easier to update or upgrade. Dan Cedarholm, author of _Bulletproof Web Design_, said it best: “Breaking interfaces down into patterns has been immensely helpful in learning and re-evaluating the best possible code to implement.”\n\n## Why not Bootstrap\nBootstrap is just one of many front-end frameworks used in software development. It’s fast and easy to implement. But it’s also full of rarely used extras, leading to bloated code. Teams using Bootstrap often build additional layers of customization above the base code.\n\n<figure class=\"rvtd-article-figure p-top-xxl p-bottom-xxl\">\n    <img src=\"../../img/docs/rvtd-bootstrap-diagram.png\" alt=\"This diagram shows how developers have to layer customization on top of Bootstrap code\">\n    <figcaption>Illustration of layers of customization for Bootstrap (left) versus Rivet (right).</figcaption>\n</figure>\n\nThis means design patterns and styles are often different from those of the organization. Further, original designs can be difficult to implement in Bootstrap’s structured environment, particularly within tight timelines.\n\n> “How do we create a consistent visual library and unified patterns across a range of systems?\"\n\nWhile Bootstrap offers developers much in the way of markup and CSS, there are some major disadvantages:\n\n- Bootstrap is not designed for the Indiana University experience\n- Bootstrap does not document good user experience patterns or interface practices\n- Bootstrap does not meet the university’s Web Accessibility policy out of the box\n\nBut it’s difficult to ignore Bootstrap’s benefits: It offers a starting place for developers and designers and a consistent visual library, which is why so many teams use it (especially at the enterprise level). So at this point, the question becomes: How do we create something similar that also addresses IU’s needs?\n\n## Rivet — a sustainable, responsive design system for IU\nWith familiarity being a key component of usability, IU needs a toolset of its own for creating web applications. Rivet is a lightweight, intentional, and focused set of front-end components and tools that allow people at IU to have a familiar experience on all IU web applications. By having our own design system we can _include_ everyone and address everyone's needs.. When there are accessibility issues, we fix them right away.\n\n> “Rivet is not just a set of UI components, it is a place for documenting good UX, accessibility, and design practices. It is a guide of when and how to use certain patterns and implement them in an accessible way.\"\n\nWe want people to reach out to us with requests and suggestions — that way, we’re making decisions about IU software together. By using a system designed by members of the university, university developers can worry less about whether stylings match the IU brand, and focus more on actual product creation.\n\n<div class=\"rvt-m-top-lg\">\n{{< button url=\"contributing-to-rivet\">}}Contribute to Rivet{{< /button >}}\n</div>",
        "tags": [],
        "description": "Some thoughts about why we built Rivet, a new design system for software at IU."
    },
    {
        "uri": "components",
        "title": "Components",
        "content": "",
        "rawContent": "",
        "tags": [],
        "description": ""
    },
    {
        "uri": "components/forms",
        "title": "Forms",
        "content": "",
        "rawContent": "",
        "tags": [],
        "description": ""
    },
    {
        "uri": "components/forms/buttons-segmented",
        "title": "Segmented Buttons",
        "content": "\nSegmented button examples\n{{}}\n    Primary one\n    Primary two\n    Primary three\n\n{{}}\n\nSecondary modifier\nThe segmented buttons can be used with any of Rivet's button modifiers.\n{{}}\n    Secondary one\n    Secondary two\n    Secondary three\n\n{{}}\n\nAccessibility notes\nWhen using the segmented button, it’s important to apply the ARIA attribute role=\"group\" to the `` container. This conveys two things to assistive technologies (AT):\n\nThe buttons are related to one another\nAT should announce that the buttons are part of a group\n\nIn addition to the ARIA group role, use the aria-label attribute to provide more information to AT. This is especially important if you are using more than one set of segmented buttons on a page.\n\nAs an alternative, you could also use an aria-labelledby attribute. Its value should correspond to the id of text that labels what the segmented button controls.See this article on associating related controls with WAI-ARIA for more information.\n\nFitted modifier\nAdding the .rvt-button-segmented--fitted modifier to the segmented buttons' `` container will make the buttons fill the entire width of their parent container.\n\n{{}}\n    Left\n    Middle\n    Right\n\n{{}}\n\nUsing with anchor tags\nIt is possible to use segmented buttons with anchor tags if the situation calls for it (e.g., if you are using them as navigation elements that will take a user to a different URL). However, for most uses in modern web applications (e.g., triggering or toggling the visibility of content), the HTML `` element is the appropriate choice.\n\nSee this article on Links vs. Buttons in modern web applications for more information.\n\nUsing segmented buttons with dropdowns\nYou can use the segmented button along with Rivet's dropdown component to create more complex controls like in the example below. Here we are also using some padding utility classes to slightly decrease the width of the secondary action dropdown toggle.\n\n{{}}\n    Primary action\n\n            Toggle options menu\n\n            Notify all\n            Notify admins\n            Notify contributors\n            Personal settings\n\n                Profile Settings\n                Logout\n\n{{}}\n",
        "rawContent": "\n## Segmented button examples\n{{< example lang=\"html\" >}}<div class=\"rvt-button-segmented\" role=\"group\" aria-label=\"Primary controls\">\n    <button type=\"button\" class=\"rvt-button\">Primary one</button>\n    <button type=\"button\" class=\"rvt-button\">Primary two</button>\n    <button type=\"button\" class=\"rvt-button\">Primary three</button>\n</div>\n{{< /example >}}\n\n### Secondary modifier\nThe segmented buttons can be used with any of Rivet's button modifiers.\n{{< example lang=\"html\" >}}<div class=\"rvt-button-segmented\" role=\"group\" aria-label=\"Secondary controls\">\n    <button type=\"button\" class=\"rvt-button rvt-button--secondary\">Secondary one</button>\n    <button type=\"button\" class=\"rvt-button rvt-button--secondary\">Secondary two</button>\n    <button type=\"button\" class=\"rvt-button rvt-button--secondary\">Secondary three</button>\n</div>\n{{< /example >}}\n\n### Accessibility notes\nWhen using the segmented button, it’s important to apply the ARIA attribute `role=\"group\"` to the `<div>` container. This conveys two things to assistive technologies (AT):\n\n- The buttons are related to one another\n- AT should announce that the buttons are part of a group\n\nIn addition to the ARIA group role, use the `aria-label` attribute to provide more information to AT. This is especially important if you are using more than one set of segmented buttons on a page.\n\nAs an alternative, you could also use an `aria-labelledby` attribute. Its value should correspond to the `id` of text that labels what the segmented button controls.[See this article on associating related controls with WAI-ARIA](https://www.w3.org/WAI/tutorials/forms/grouping/#associating-related-controls-with-wai-aria) for more information.\n\n### Fitted modifier\nAdding the `.rvt-button-segmented--fitted` modifier to the segmented buttons' `<div>` container will make the buttons fill the entire width of their parent container.\n\n{{< example lang=\"html\" >}}<div class=\"rvt-button-segmented rvt-button-segmented--fitted\" role=\"group\" aria-label=\"Fitted group\">\n    <button type=\"button\" class=\"rvt-button rvt-button--secondary\">Left</button>\n    <button type=\"button\" class=\"rvt-button rvt-button--secondary\">Middle</button>\n    <button type=\"button\" class=\"rvt-button rvt-button--secondary\">Right</button>\n</div>\n{{< /example >}}\n\n## Using with anchor tags\nIt _is_ possible to use segmented buttons with anchor tags if the situation calls for it (e.g., if you are using them as navigation elements that will take a user to a different URL). However, for most uses in modern web applications (e.g., triggering or toggling the visibility of content), the HTML `<button>` element is the appropriate choice.\n\n[See this article on Links vs. Buttons](https://marcysutton.com/links-vs-buttons-in-modern-web-applications/) in modern web applications for more information.\n\n## Using segmented buttons with dropdowns\nYou can use the segmented button along with Rivet's dropdown component to create more complex controls like in the example below. Here we are also using some [padding utility classes]({{< ref \"components/layout/spacing.md\" >}}) to slightly decrease the width of the secondary action dropdown toggle.\n\n{{< example lang=\"html\" >}}<div class=\"rvt-button-segmented\" role=\"group\" aria-label=\"Dropdown group\">\n    <button type=\"button\" class=\"rvt-button\">Primary action</button>\n    <div class=\"rvt-dropdown\">\n        <button type=\"button\" class=\"rvt-button rvt-p-right-xs rvt-p-left-xs\" data-dropdown-toggle=\"segmented-example\">\n            <span class=\"rvt-sr-only\">Toggle options menu</span>\n            <svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\">\n                <path fill=\"currentColor\" d=\"M8,12.46a2,2,0,0,1-1.52-.7L1.24,5.65a1,1,0,1,1,1.52-1.3L8,10.46l5.24-6.11a1,1,0,0,1,1.52,1.3L9.52,11.76A2,2,0,0,1,8,12.46Z\"/>\n            </svg>\n        </button>\n        <div class=\"rvt-dropdown__menu\" id=\"segmented-example\" role=\"menu\" aria-hidden=\"true\">\n            <button type=\"button\" role=\"menuitemradio\">Notify all</button>\n            <button type=\"button\" role=\"menuitemradio\" aria-checked=\"true\">Notify admins</button>\n            <button type=\"button\" role=\"menuitemradio\">Notify contributors</button>\n            <div class=\"rvt-dropdown__menu-heading\" aria-hidden=\"true\">Personal settings</div>\n            <div role=\"group\" aria-label=\"Personal settings\">\n                <button type=\"button\" role=\"menuitem\">Profile Settings</button>\n                <button type=\"button\" role=\"menuitem\">Logout</button>\n            </div>\n        </div>\n    </div>\n</div>\n{{< /example >}}\n",
        "tags": [],
        "description": "Use the segmented button to display a group of related controls in a single line. Combine them with the dropdown to create complex menu controls."
    },
    {
        "uri": "components/forms/buttons",
        "title": "Buttons",
        "content": "\nButton examples\n{{}}\n    Primary\n    Success\n    Danger\n    Plain\n\n{{}}\n\nSecondary variations\n{{}}\n    Secondary\n    Success\n    Danger\n\n{{}}\n\n{{}}\nBe aware that buttons will automatically submit nearby forms on the page unless they have the type=\"button\" attribute.\n{{}}\n\nSmall buttons\nYou can create smaller buttons by adding the .rvt-button--small modifier class. The small button modifier can be used together with the other button modifier classes to make any variation of small buttons.\n\n{{}}\n    Primary\n    Success\n    Danger\n    Plain\n\n{{}}\n\nFull-width buttons\nIn some cases it can be helpful for buttons to have a larger click/touch area. If you need a button to take up the full width of its parent container, you can use the .rvt-button--full-width modifier.\n\n{{}}Full-width button\n{{}}\n\nWhen to use\nOpening or closing a modal or dialog\nTriggering a dropdown menu\nSubmitting data to the server\n\nWhen to consider something else\nNavigating to a new page or view in your application\nNavigating to different web page, e.g. external documentation\n\nImplementation notes\nThere are a number of button styles and sizes that can be achieved using a handful of modifier CSS classes.\n\nContextual button modifiers\nCertain contexts may require alternate button styles. For example, when a user is about to take a destructive action it may be advisable to use a different color button to alert them. In this case, adding the class .rvt-button--danger will create an orange button that matches the error alert color.\n\nThe available button color modifiers are:\n\n.rvt-button--success\n.rvt-button--success-secondary\n.rvt-button--danger\n.rvt-button--danger-secondary\n\nUsing icons inside buttons\nYou can use icons inside the `` element. (Just make sure to also include text alongside them.) Before the button icons can display properly, you need to do a few things:\n\nWrap the button text in a `` element\nUse Rivet’s utility classes to add some space between the button text and the icon\n\nFor best results, use an SVG icon that is sized to 16px by 16px.\n\n    Experimental Rivet Icon set\n    We are currently in the early stages of creating a unified icon set for Rivet. If you would like to help test them, you can find out more information in this Github repository. These icons are still very much in development and will most certainly change over time.\n\nButton icons and accessibility\nIn this example, we aria-hidden=\"true\" attribute to the the SVG elements. This communicates to screen readers that the icons are decorative and should not be read aloud.\n\nWhen you use icons inside buttons, you should still include button text to describe the action the button performs. If you want only the icon to be visible inside of a button (for example, a close button in a modal window), you should still include some visually-hidden text that describes the button’s action.\n\nSee the example below using the .rvt-sr-only utility class to visually hide the button text.\n\n{{}}\n\n        Add item\n\n        Copy\n\n        Delete\n\n        Edit entry\n\n{{}}\n\nLink and input buttons\nThe .rvt-button rvt-button--* classes are meant to be used on the ` elements, but they will work if you need to make an  tag or an  look like a button. If you're not sure whether to use a  or an ` tag, you can reference the documentation on links.\n\nButton groups\nWhen you need to display a group of buttons you can wrap them in a div with the class .rvt-button-group applied to it. The .rvt-button-group class will add an equal amount of margin to the right side of every button in the group except the last one.\n\n{{}}\n    Ok\n    Cancel\n\n{{}}\n\nIf you need to right align your buttons, you can add the .rvt-button-group--right modifier class to the .rvt-button-group div.\n\n{{}}\n    Ok\n    Cancel\n\n{{}}\n\nIn the example above, the buttons would be aligned to the right edge of the .rvt-button-group's parent container.\n\nResources\nLinks vs. Buttons in Modern Web Applications\n",
        "rawContent": "\n## Button examples\n{{< example lang=\"html\" >}}<div class=\"rvt-button-group\">\n    <button class=\"rvt-button\">Primary</button>\n    <button class=\"rvt-button rvt-button--success\">Success</button>\n    <button class=\"rvt-button rvt-button--danger\">Danger</button>\n    <button class=\"rvt-button rvt-button--plain\">Plain</button>\n</div>\n{{< /example >}}\n\n### Secondary variations\n{{< example lang=\"html\" >}}<div class=\"rvt-button-group\">\n    <button class=\"rvt-button rvt-button--secondary\">Secondary</button>\n    <button class=\"rvt-button rvt-button--success-secondary\">Success</button>\n    <button class=\"rvt-button rvt-button--danger-secondary\">Danger</button>\n</div>\n{{< /example >}}\n\n{{< alert variant=\"warning\" title=\"Button types\" >}}\nBe aware that buttons will automatically submit nearby forms on the page unless they have the `type=\"button\"` attribute.\n{{< /alert >}}\n\n### Small buttons\nYou can create smaller buttons by adding the `.rvt-button--small` modifier class. The small button modifier can be used together with the other button modifier classes to make any variation of small buttons.\n\n{{< example lang=\"html\" >}}<div class=\"rvt-button-group\">\n    <button class=\"rvt-button rvt-button--small\">Primary</button>\n    <button class=\"rvt-button rvt-button--success rvt-button--small\">Success</button>\n    <button class=\"rvt-button rvt-button--danger rvt-button--small\">Danger</button>\n    <button class=\"rvt-button rvt-button--plain rvt-button--small\">Plain</button>\n</div>\n{{< /example >}}\n\n## Full-width buttons\nIn some cases it can be helpful for buttons to have a larger click/touch area. If you need a button to take up the full width of its parent container, you can use the `.rvt-button--full-width` modifier.\n\n{{< example lang=\"html\" >}}<button class=\"rvt-button rvt-button--full-width\">Full-width button</button>\n{{< /example >}}\n\n## When to use\n- Opening or closing a modal or dialog\n- Triggering a dropdown menu\n- Submitting data to the server\n\n## When to consider something else\n- Navigating to a new page or view in your application\n- Navigating to different web page, e.g. external documentation\n\n## Implementation notes\nThere are a number of button styles and sizes that can be achieved using a handful of modifier CSS classes.\n\n### Contextual button modifiers\nCertain contexts may require alternate button styles. For example, when a user is about to take a destructive action it may be advisable to use a different color button to alert them. In this case, adding the class `.rvt-button--danger` will create an orange button that matches the [error alert color]({{< ref \"components/overlays/alerts.md\" >}}).\n\nThe available button color modifiers are:\n\n- `.rvt-button--success`\n- `.rvt-button--success-secondary`\n- `.rvt-button--danger`\n- `.rvt-button--danger-secondary`\n\n### Using icons inside buttons\nYou can use icons inside the `<button>` element. (Just make sure to also include text alongside them.) Before the button icons can display properly, you need to do a few things:\n\n1. Wrap the button text in a `<span>` element\n2. Use Rivet’s utility classes to add some space between the button text and the icon\n\nFor best results, use an SVG icon that is sized to 16px by 16px.\n\n<div class=\"alert alert--message rvt-m-bottom-lg\">\n    <h4 class=\"rvt-alert__title\" id=\"warning-alert-title\">Experimental Rivet Icon set</h4>\n    <p class=\"rvt-alert__message\">We are currently in the early stages of creating a unified icon set for Rivet. If you would like to help test them, <a href=\"https://github.com/indiana-university/rivet-icons\" target=\"_blank\" rel=\"noopener\">you can find out more information in this Github repository</a>. These icons are still very much in development and <strong>will most certainly change over time</strong>.\n</div>\n\n### Button icons and accessibility\nIn this example, we `aria-hidden=\"true\"` attribute to the the SVG elements. This communicates to screen readers that the icons are decorative and should not be read aloud.\n\nWhen you use icons inside buttons, you should still include button text to describe the action the button performs. If you want only the icon to be visible inside of a button (for example, a close button in a modal window), you should still include some visually-hidden text that describes the button’s action.\n\nSee the example below using the `.rvt-sr-only` utility class to visually hide the button text.\n\n{{< example lang=\"html\" >}}<div class=\"rvt-button-group\">\n    <button type=\"button\" class=\"rvt-button\">\n        <span class=\"rvt-m-right-xs\">Add item</span>\n        <svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\">\n            <path fill=\"currentColor\" d=\"M14,7H9V2A1,1,0,0,0,7,2V7H2A1,1,0,0,0,2,9H7v5a1,1,0,0,0,2,0V9h5a1,1,0,0,0,0-2Z\"/>\n        </svg>\n    </button>\n    <button type=\"button\" class=\"rvt-button\">\n        <span class=\"rvt-m-right-xs\">Copy</span>\n        <svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\">\n            <g fill=\"currentColor\">\n                <path d=\"M4,10.23H1.92V2H8V3h2V2A2,2,0,0,0,8,0H1.92a2,2,0,0,0-2,2v8.23a2,2,0,0,0,2,2H4Z\"/>\n                <path d=\"M14,16H8a2,2,0,0,1-2-2V7A2,2,0,0,1,8,5h6a2,2,0,0,1,2,2v7A2,2,0,0,1,14,16ZM8,7v7h6V7Z\"/>\n            </g>\n        </svg>\n    </button>\n    <button type=\"button\" class=\"rvt-button rvt-button--danger\">\n        <span class=\"rvt-m-right-xs\">Delete</span>\n        <svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\">\n            <g fill=\"currentColor\">\n                <path d=\"M8,0a8,8,0,1,0,8,8A8,8,0,0,0,8,0ZM8,14a6,6,0,1,1,6-6A6,6,0,0,1,8,14Z\"/>\n                <path d=\"M10.83,5.17a1,1,0,0,0-1.41,0L8,6.59,6.59,5.17A1,1,0,0,0,5.17,6.59L6.59,8,5.17,9.41a1,1,0,1,0,1.41,1.41L8,9.41l1.41,1.41a1,1,0,0,0,1.41-1.41L9.41,8l1.41-1.41A1,1,0,0,0,10.83,5.17Z\"/>\n            </g>\n        </svg>\n    </button>\n    <button type=\"button\" class=\"rvt-button rvt-button--secondary\">\n        <span class=\"rvt-sr-only\">Edit entry</span>\n        <svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\">\n            <path fill=\"currentColor\" d=\"M14.62,4.19,11.74,1.34a1.1,1.1,0,0,0-1.55,0L0,11.62,0,16l4.45,0L14.64,5.73A1.1,1.1,0,0,0,14.62,4.19ZM3.62,14H2V12.44l6-6L9.58,8ZM11,6.57,9.4,5,11,3.4,12.57,5Z\"/>\n        </svg>\n    </button>\n</div>\n{{< /example >}}\n\n### Link and input buttons\nThe `.rvt-button rvt-button--*` classes are meant to be used on the `<button>` elements, but they will work if you need to make an `<a>` tag or an `<input>` look like a button. If you're not sure whether to use a `<button>` or an `<a>` tag, you can reference the [documentation on links]({{< ref \"components/page-content/links.md\" >}}).\n\n## Button groups\nWhen you need to display a group of buttons you can wrap them in a `div` with the class `.rvt-button-group` applied to it. The `.rvt-button-group` class will add an equal amount of margin to the right side of every button in the group except the last one.\n\n{{< example lang=\"html\" >}}<div class=\"rvt-button-group\">\n    <button type=\"button\" class=\"rvt-button\">Ok</button>\n    <button type=\"button\" class=\"rvt-button rvt-button--secondary\">Cancel</button>\n</div>\n{{< /example >}}\n\nIf you need to right align your buttons, you can add the `.rvt-button-group--right` modifier class to the `.rvt-button-group` div.\n\n{{< example lang=\"html\" >}}<div class=\"rvt-button-group rvt-button-group--right\">\n    <button type=\"button\" class=\"rvt-button\">Ok</button>\n    <button type=\"button\" class=\"rvt-button rvt-button--secondary\">Cancel</button>\n</div>\n{{< /example >}}\n\nIn the example above, the buttons would be aligned to the right edge of the `.rvt-button-group`'s parent container.\n\n## Resources\n- [Links vs. Buttons in Modern Web Applications](https://marcysutton.com/links-vs-buttons-in-modern-web-applications/)\n",
        "tags": [],
        "description": "Buttons are used to signal actions, submit forms, or trigger new content within the current context."
    },
    {
        "uri": "components/forms/checkboxes",
        "title": "Checkboxes",
        "content": "Inline checkboxes example\n{{}}\n\n        Checkboxes inline\n\n                Option one\n\n                Option two\n\n{{}}\n\nCheckbox list example\n{{}}\n\n        Checkbox list\n\n                Option one\n\n                Option two\n\n                Option three disabled\n\n                Option four checked and disabled\n\n{{}}\n\nIndeterminate state\nThe indeterminate state is a checkbox attribute that is accessible by JavaScript only. It can be used to indicate a partially checked state. A typical use case would be nested checkboxes/selections like the following example. This article explains the indeterminate state in greater detail.\n\n{{}}\n    Indeterminate state\n\n            Parent option one\n\n                    Child option one\n\n                    Child option two\n\n            Parent option two\n\n            Parent option three\n\n{{}}\n\nAlternate markup with hidden fields\nThis example includes a hidden input in the markup, as some frameworks require. It requires that the input and label be wrapped in a .rvt-checkbox-wrapper. Here we are using the wrapper class on a `, but it will also work with generic elements like a  and `.\n\n{{}}\n    Alternate markup (visually identical)\n\n            Option one\n\n            Option two\n\n{{}}\n\nWhen to use\nUse checkboxes to allow users to pick zero, one, or many options from a list of values. A checkbox is a good choice when you need to present users a single option that they can turn on or off.\n\nWhen to consider something else\nWhen you need to present users with a list of mutually exclusive options and they can select only one option, consider using a list of radio buttons or a select input.\n\nCheckbox labels\nWrite the label so that it describes the selected state of the checkbox\nWrite the label as a phrase or an imperative sentence, and use no ending punctuation\n  Exception: If a checkbox label also labels a subordinate control that follows it, end the label with a colon\nUse sentence-style capitalization\nFor a group of checkboxes, use parallel phrasing and try to keep the length about the same for all labels\nFor a group of checkboxes, focus the label text on the differences among the options. If all the options have the same introductory text, move that text to the group label.\nUse positive phrasing. Don't phrase a label so that selecting a checkbox means not to perform an action.\n  Exception: Don't show this again checkboxes\n\nCheckbox group labels\nUse the group label to explain the purpose of the group, not how to make the selection. Assume that users know how to use checkboxes. For example, don't say, \"Select any of the following choices.\"\nEnd each label with a colon\nFor a selection of one or more dependent choices, explain the requirement on the label\n  Example: Pizza toppings (select one or more)\n\nResources\nCheckboxes vs. Radio Buttons\nMozilla Developer Network Docs\nMSDN Design Documentation\nIndeterminate Checkboxes\n",
        "rawContent": "## Inline checkboxes example\n{{< example lang=\"html\" >}}<form>\n    <fieldset>\n        <legend class=\"sr-only\">Checkboxes inline</legend>\n        <ul class=\"rvt-inline-list\">\n            <li>\n                <input type=\"checkbox\" name=\"checkbox-demo\" id=\"checkbox-1\">\n                <label for=\"checkbox-1\" class=\"rvt-m-right-sm\">Option one</label>\n            </li>\n            <li>\n                <input type=\"checkbox\" name=\"checkbox-demo\" id=\"checkbox-2\">\n                <label for=\"checkbox-2\">Option two</label>\n            </li>\n        </ul>\n    </fieldset>\n</form>\n{{< /example >}}\n\n## Checkbox list example\n{{< example lang=\"html\" >}}<form>\n    <fieldset>\n        <legend class=\"sr-only\">Checkbox list</legend>\n        <ul class=\"rvt-plain-list\">\n            <li>\n                <input type=\"checkbox\" name=\"checkbox-demo\" id=\"checkbox-3\">\n                <label for=\"checkbox-3\" class=\"rvt-m-right-sm\">Option one</label>\n            </li>\n            <li>\n                <input type=\"checkbox\" name=\"checkbox-demo\" id=\"checkbox-4\">\n                <label for=\"checkbox-4\">Option two</label>\n            </li>\n            <li>\n                <input type=\"checkbox\" name=\"checkbox-demo\" id=\"checkbox-4-disable\" disabled>\n                <label for=\"checkbox-4-disable\">Option three disabled</label>\n            </li>\n            <li>\n                <input type=\"checkbox\" name=\"checkbox-demo\" id=\"checkbox-5\" disabled checked>\n                <label for=\"checkbox-5\">Option four checked and disabled</label>\n            </li>\n        </ul>\n    </fieldset>\n</form>\n{{< /example >}}\n\n## Indeterminate state\nThe indeterminate state is a checkbox attribute that is accessible by JavaScript only. It can be used to indicate a partially checked state. A typical use case would be nested checkboxes/selections like the following example. [This article](https://css-tricks.com/indeterminate-checkboxes/) explains the indeterminate state in greater detail.\n\n{{< example lang=\"html\" >}}<fieldset>\n    <legend class=\"rvt-sr-only\">Indeterminate state</legend>\n    <ul class=\"rvt-plain-list\">\n        <li>\n            <input type=\"checkbox\" name=\"checkbox-demo\" id=\"checkbox-indeterminate\">\n            <label for=\"checkbox-indeterminate\">Parent option one</label>\n            <ul class=\"rvt-plain-list rvt-p-left-lg\">\n                <li>\n                    <input type=\"checkbox\" name=\"checkbox-demo\" id=\"checkbox-6-1\" checked>\n                    <label for=\"checkbox-6-1\">Child option one</label>\n                </li>\n                <li>\n                    <input type=\"checkbox\" name=\"checkbox-demo\" id=\"checkbox-6-2\">\n                    <label for=\"checkbox-6-2\">Child option two</label>\n                </li>\n            </ul>\n        </li>\n        <li>\n            <input type=\"checkbox\" name=\"checkbox-demo\" id=\"checkbox-7\">\n            <label for=\"checkbox-7\">Parent option two</label>\n        </li>\n        <li>\n            <input type=\"checkbox\" name=\"checkbox-demo\" id=\"checkbox-8\">\n            <label for=\"checkbox-8\">Parent option three</label>\n        </li>\n    </ul>\n</fieldset>\n{{< /example >}}\n\n## Alternate markup with hidden fields\nThis example includes a hidden input in the markup, as some frameworks require. It requires that the input and label be wrapped in a `.rvt-checkbox-wrapper`. Here we are using the wrapper class on a `<li>`, but it will also work with generic elements like a `<div>` and `<span>`.\n\n{{< example lang=\"html\" >}}<fieldset>\n    <legend class=\"rvt-ts-23 rvt-m-bottom-lg\">Alternate markup (visually identical)</legend>\n    <ul class=\"rvt-inline-list\">\n        <li class=\"rvt-checkbox-wrapper\">\n            <input type=\"checkbox\" name=\"checkbox-demo\" id=\"checkbox-9\">\n            <input type=\"hidden\">\n            <label for=\"checkbox-9\">Option one</label>\n        </li>\n        <li class=\"rvt-checkbox-wrapper\">\n            <input type=\"checkbox\" name=\"checkbox-demo\" id=\"checkbox-10\">\n            <input type=\"hidden\">\n            <label for=\"checkbox-10\">Option two</label>\n        </li>\n    </ul>\n</fieldset>\n{{< /example >}}\n\n## When to use\nUse checkboxes to allow users to pick zero, one, or many options from a list of values. A checkbox is a good choice when you need to present users a single option that they can turn on or off.\n\n## When to consider something else\nWhen you need to present users with a list of mutually exclusive options and they can select only one option, consider using a list of [radio buttons]({{< ref \"components/forms/radio-buttons.md\" >}}) or a [select input]({{< ref \"components/forms/select-input.md\" >}}).\n\n## Checkbox labels\n- Write the label so that it describes the selected state of the checkbox\n- Write the label as a phrase or an imperative sentence, and use no ending punctuation\n  - **Exception:** If a checkbox label also labels a subordinate control that follows it, end the label with a colon\n- Use sentence-style capitalization\n- For a group of checkboxes, use parallel phrasing and try to keep the length about the same for all labels\n- For a group of checkboxes, focus the label text on the differences among the options. If all the options have the same introductory text, move that text to the group label.\n- Use positive phrasing. Don't phrase a label so that selecting a checkbox means not to perform an action.\n  - **Exception: Don't show this again** checkboxes\n\n## Checkbox group labels\n- Use the group label to explain the purpose of the group, not how to make the selection. Assume that users know how to use checkboxes. For example, don't say, \"Select any of the following choices.\"\n- End each label with a colon\n- For a selection of one or more dependent choices, explain the requirement on the label\n  - Example: Pizza toppings (select one or more)\n\n## Resources\n- [Checkboxes vs. Radio Buttons](https://www.nngroup.com/articles/checkboxes-vs-radio-buttons/)\n- [Mozilla Developer Network Docs](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox)\n- [MSDN Design Documentation](https://msdn.microsoft.com/en-us/library/windows/desktop/dn742401.aspx)\n- [Indeterminate Checkboxes](https://css-tricks.com/indeterminate-checkboxes/)\n",
        "tags": [],
        "description": "Checkboxes allow users to select one or more options from a list of choices."
    },
    {
        "uri": "components/forms/file-input",
        "title": "File input",
        "content": "Custom file input example\nThe custom HTML file input (`) uses CSS to hide the default file input button and styles the associated ` element to look like a Rivet button.\n\n{{}}\n\n        Upload a file\n\n        No file selected\n\n        Upload a file\n\n        No file selected\n\n{{}}\n\nRequired elements\nIn order for the custom file input component to function and display properly, there are a few elements that are required in the markup:\n\nA .rvt-file wrapper ` with a data-upload attribute that matches the for` attribute of the input label\nA .rvt-file__preview ` with a data-file-preview attribute that matches both the for attribute of the label and the data-upload attribute of the wrapper `.\nAn aria-describedby attribute on the file ` that matches an id attribute on the .rvt-file__preview `.\n\nFile input variations\nThe custom file input can be used with any of Rivet's button modifiers to style the input to suit your needs. You can also add the multiple attribute to the file input markup to allow users to upload more than one file.\n\n{{}}\n\n        Upload a file\n\n        No file selected\n\n{{}}\n\nJavaScript API\nFileInput.init() is run once on page load, and initializes each rvt-file component that has a data-upload attribute.\n\n{{}}{{}}\n\nCustom events\n\n{{}}{{}}",
        "rawContent": "## Custom file input example\nThe custom HTML file input (`<input type=\"file\">`) uses CSS to hide the default file input button and styles the associated `<label>` element to look like a Rivet button.\n\n{{< example lang=\"html\" >}}<div class=\"rvt-file\" data-upload=\"my-file-input\">\n    <input type=\"file\" id=\"my-file-input\" aria-describedby=\"file-description\">\n    <label for=\"my-file-input\" class=\"rvt-button\">\n        <span>Upload a file</span>\n        <svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\">\n            <path fill=\"currentColor\" d=\"M10.41,1H3.5A1.3,1.3,0,0,0,2.2,2.3V13.7A1.3,1.3,0,0,0,3.5,15h9a1.3,1.3,0,0,0,1.3-1.3V4.39ZM11.8,5.21V6H9.25V3h.34ZM4.2,13V3h3V6.75A1.25,1.25,0,0,0,8.5,8h3.3v5Z\"/>\n        </svg>\n    </label>\n    <div class=\"rvt-file__preview\" data-file-preview=\"my-file-input\" id=\"file-description\">\n        No file selected\n    </div>\n</div>\n\n<div class=\"rvt-file rvt-m-top-sm\" data-upload=\"my-file-input-2\">\n    <input type=\"file\" id=\"my-file-input-2\" aria-describedby=\"file-description\" disabled>\n    <label for=\"my-file-input\" class=\"rvt-button\">\n        <span>Upload a file</span>\n        <svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\">\n            <path fill=\"currentColor\" d=\"M10.41,1H3.5A1.3,1.3,0,0,0,2.2,2.3V13.7A1.3,1.3,0,0,0,3.5,15h9a1.3,1.3,0,0,0,1.3-1.3V4.39ZM11.8,5.21V6H9.25V3h.34ZM4.2,13V3h3V6.75A1.25,1.25,0,0,0,8.5,8h3.3v5Z\"/>\n        </svg>\n    </label>\n    <div class=\"rvt-file__preview\" data-file-preview=\"my-file-input\" id=\"file-description\">\n        No file selected\n    </div>\n</div>\n{{< /example >}}\n\n## Required elements\nIn order for the custom file input component to function and display properly, there are a few elements that are required in the markup:\n\n- A `.rvt-file` wrapper `<div>` with a `data-upload` attribute that matches the `for` attribute of the input label\n- A `.rvt-file__preview` `<div>` with a `data-file-preview` attribute that matches both the `for` attribute of the label and the `data-upload` attribute of the wrapper `<div>`.\n- An `aria-describedby` attribute on the file `<input>` that matches an `id` attribute on the `.rvt-file__preview` `<div>`.\n\n## File input variations\nThe custom file input can be used with any of Rivet's [button modifiers]({{< ref \"components/forms/buttons.md#contextual-button-modifiers\" >}}) to style the input to suit your needs. You can also add the `multiple` attribute to the file input markup to allow users to upload more than one file.\n\n{{< example lang=\"html\" >}}<div class=\"rvt-file\" data-upload=\"my-file-input-two\">\n    <input type=\"file\" id=\"my-file-input-two\" aria-describedby=\"file-descrirption-two\" multiple>\n    <label for=\"my-file-input-two\" class=\"rvt-button rvt-button--secondary\">\n        <span>Upload a file</span>\n        <svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\">\n            <path fill=\"currentColor\" d=\"M10.41,1H3.5A1.3,1.3,0,0,0,2.2,2.3V13.7A1.3,1.3,0,0,0,3.5,15h9a1.3,1.3,0,0,0,1.3-1.3V4.39ZM11.8,5.21V6H9.25V3h.34ZM4.2,13V3h3V6.75A1.25,1.25,0,0,0,8.5,8h3.3v5Z\"/>\n        </svg>\n    </label>\n    <div class=\"rvt-file__preview\" data-file-preview=\"my-file-input-two\" id=\"file-descrirption-two\">\n        No file selected\n    </div>\n</div>\n{{< /example >}}\n\n## JavaScript API\n`FileInput.init()` is run once on page load, and initializes each `rvt-file` component that has a `data-upload` attribute.\n\n{{< apidocs type=\"methods\" >}}{{< /apidocs >}}\n\n### Custom events\n\n{{< apidocs type=\"events\" >}}{{< /apidocs >}}",
        "tags": [],
        "description": "A custom HTML file input that is styled to look like Rivet buttons"
    },
    {
        "uri": "components/forms/input-group",
        "title": "Input group",
        "content": "\nInput group examples\n{{}}Search\n\n        Search docs\n\nAdd new\n\n                Filter\n\n                My Stuff\n                All stuff\n                Archives\n\n{{}}\n\nImplementation notes\nForm `s must be outsite of the .rvt-input-group` container\nInputs inside an input group need a label. If you don't want them to visually appear in your design, use the .rvt-sr-only utility class to hide them visually, but still make them available to assistive technology like a screen reader.\nThe input group .rvt-input-grouptext elements are not replacements for the standard `` element. They are only meant to help describe certain form inputs.\nWhen using .rvt-input-group__text, give the input a aria-describedby attribute associated with the id of the text, as in the following examples.\n\n{{}}Email address\n\n        @iu.edu\n\nWebsite\n\n        http(s)\n\n{{}}",
        "rawContent": "\n## Input group examples\n{{< example lang=\"html\" >}}<label for=\"search\" class=\"rvt-sr-only\">Search</label>\n<div class=\"rvt-input-group\">\n    <input class=\"rvt-input-group__input\" type=\"text\" id=\"search\">\n    <div class=\"rvt-input-group__append\">\n        <button class=\"rvt-button\">Search docs</button>\n    </div>\n</div>\n\n<label for=\"segmented-prepend\" class=\"rvt-sr-only\">Add new</label>\n<div class=\"rvt-input-group rvt-m-top-xl\">\n    <div class=\"rvt-input-group__prepend\">\n        <div class=\"rvt-dropdown\">\n            <button type=\"button\" class=\"rvt-button rvt-p-right-xs rvt-p-left-xs\" data-dropdown-toggle=\"segmented-prepend-example\">\n                <span class=\"rvt-m-right-xs\">Filter</span>\n                <svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\">\n                    <path fill=\"currentColor\" d=\"M8,12.46a2,2,0,0,1-1.52-.7L1.24,5.65a1,1,0,1,1,1.52-1.3L8,10.46l5.24-6.11a1,1,0,0,1,1.52,1.3L9.52,11.76A2,2,0,0,1,8,12.46Z\"/>\n                </svg>\n            </button>\n            <div class=\"rvt-dropdown__menu\" role=\"menu\" aria-hidden=\"true\" id=\"segmented-prepend-example\">\n                <button type=\"button\" role=\"menuitemradio\">My Stuff</button>\n                <button type=\"button\" role=\"menuitemradio\" aria-checked=\"true\">All stuff</button>\n                <button type=\"button\" role=\"menuitemradio\">Archives</button>\n            </div>\n        </div>\n    </div>\n    <input class=\"rvt-input-group__input\" type=\"text\" id=\"segmented-prepend\">\n</div>\n{{< /example >}}\n\n## Implementation notes\n- Form `<label>`s must be outsite of the `.rvt-input-group` container\n- Inputs inside an input group need a label. If you don't want them to visually appear in your design, use the `.rvt-sr-only` utility class to hide them visually, but still make them available to assistive technology like a screen reader.\n- The input group `.rvt-input-group__text` elements _are not_ replacements for the standard `<label>` element. They are only meant to help describe certain form inputs.\n- When using `.rvt-input-group__text`, give the input a `aria-describedby` attribute associated with the `id` of the text, as in the following examples.\n\n{{< example lang=\"html\" >}}<label for=\"text-append-example\" >Email address</label>\n<div class=\"rvt-input-group\">\n    <input class=\"rvt-input-group__input\" type=\"text\" id=\"text-append-example\" aria-describedby=\"email-text\">\n    <div class=\"rvt-input-group__append\">\n        <div class=\"rvt-input-group__text\" id=\"email-text\">@iu.edu</div>\n    </div>\n</div>\n\n<label for=\"text-prepend-example\" class=\"rvt-sr-only\">Website</label>\n<div class=\"rvt-input-group rvt-m-top-xl\">\n    <div class=\"rvt-input-group__prepend\">\n        <div class=\"rvt-input-group__text\" id=\"website-text\">http(s)</div>\n    </div>\n    <input class=\"rvt-input-group__input\" type=\"text\" id=\"text-prepend-example\" aria-describedby=\"website-text\">\n</div>\n{{< /example >}}",
        "tags": [],
        "description": "Use input groups to combine a text input with an action button or dropdown menu."
    },
    {
        "uri": "components/forms/radio-buttons",
        "title": "Radio buttons",
        "content": "Inline radios example\n{{}}\n\n        Radio inputs inline\n\n                Option one\n\n                Option two\n\n{{}}\n\nRadio list example\n{{}}\n\n        Radio list\n\n                Option one\n\n                Option two\n\n                Option three disabled\n\n                Option four checked and disabled\n\n{{}}\n\nAlternate markup with hidden fields\nThis example includes a hidden input in the markup, as some frameworks require. It requires that the input and label be wrapped in a .rvt-radio-wrapper. Here we are using the wrapper class on a `, but it will also work with generic elements like a  and `.\n\n{{}}\n    Radio inputs inline\n\n            Option one\n\n            Option two\n\n{{}}\n\nWhen to use\nUse radio button when you need to present users with a few mutually exclusive choices and they can only select one option.\n\nWhen to consider something else\nWhen you have a longer list of mutually exclusive options (for example, a list of 50 states), consider using a select input.\n\nRadio button labels\nWrite the label as a phrase, not as a sentence, and use no ending punctuation\nUse parallel phrasing between related radio inputs, and try to keep the length about the same for all labels\nFocus the label text on the differences among the options. If all the options have the same introductory text, move that text to the group label.\nDescribe just the option with the label. Keep labels brief so it's easy to refer to them in messages and documentation. If the option requires further explanation, provide the explanation in a static text control using complete sentences and ending punctuation.\nUse sentence-style capitalization\n\nRadio button group labels\nUse the group label to explain the purpose of the group, not how to make the selection. Assume that users know how to use radio buttons.\nAll radio button groups need labels. Write the label as a word or phrase, not as a sentence, ending with a colon using static text or a\nResources\nCheckboxes vs. Radio Buttons\nMozilla Developer Network Docs\nMSDN Design Documentation\n",
        "rawContent": "## Inline radios example\n{{< example lang=\"html\" >}}<form>\n    <fieldset>\n        <legend class=\"sr-only\">Radio inputs inline</legend>\n        <ul class=\"rvt-inline-list\">\n            <li>\n                <input type=\"radio\" name=\"radio-demo\" id=\"radio-1\">\n                <label for=\"radio-1\" class=\"rvt-m-right-md\">Option one</label>\n            </li>\n            <li>\n                <input type=\"radio\" name=\"radio-demo\" id=\"radio-2\">\n                <label for=\"radio-2\">Option two</label>\n            </li>\n        </ul>\n    </fieldset>\n</form>\n{{< /example >}}\n\n## Radio list example\n{{< example lang=\"html\" >}}<form>\n    <fieldset>\n        <legend class=\"sr-only\">Radio list</legend>\n        <ul class=\"rvt-plain-list\">\n            <li>\n                <input type=\"radio\" name=\"radio-demo-2\" id=\"radio-3\">\n                <label for=\"radio-3\" class=\"rvt-m-right-sm\">Option one</label>\n            </li>\n            <li>\n                <input type=\"radio\" name=\"radio-demo-2\" id=\"radio-4\">\n                <label for=\"radio-4\">Option two</label>\n            </li>\n            <li>\n                <input type=\"radio\" name=\"radio-demo-2\" id=\"radio-4-disabled\" disabled>\n                <label for=\"radio-4-disabled\">Option three disabled</label>\n            </li>\n            <li>\n                <input type=\"radio\" name=\"radio-demo-2\" id=\"radio-5\" disabled checked>\n                <label for=\"radio-5\">Option four checked and disabled</label>\n            </li>\n        </ul>\n    </fieldset>\n</form>\n{{< /example >}}\n\n## Alternate markup with hidden fields\nThis example includes a hidden input in the markup, as some frameworks require. It requires that the input and label be wrapped in a `.rvt-radio-wrapper`. Here we are using the wrapper class on a `<li>`, but it will also work with generic elements like a `<div>` and `<span>`.\n\n{{< example lang=\"html\" >}}<fieldset>\n    <legend class=\"rvt-ts-23 rvt-m-bottom-lg\">Radio inputs inline</legend>\n    <ul class=\"rvt-inline-list\">\n        <li class=\"rvt-radio-wrapper\">\n            <input type=\"radio\" name=\"radio-demo\" id=\"radio-6\">\n            <input type=\"hidden\">\n            <label for=\"radio-6\">Option one</label>\n        </li>\n        <li class=\"rvt-radio-wrapper\">\n            <input type=\"radio\" name=\"radio-demo\" id=\"radio-7\">\n            <input type=\"hidden\">\n            <label for=\"radio-7\">Option two</label>\n        </li>\n    </ul>\n</fieldset>\n{{< /example >}}\n\n## When to use\nUse radio button when you need to present users with a few mutually exclusive choices and they can only select one option.\n\n## When to consider something else\nWhen you have a longer list of mutually exclusive options (for example, a list of 50 states), consider using a [select input]({{< relref \"select-input.md\" >}}).\n\n\n## Radio button labels\n- Write the label as a phrase, not as a sentence, and use no ending punctuation\n- Use parallel phrasing between related radio inputs, and try to keep the length about the same for all labels\n- Focus the label text on the differences among the options. If all the options have the same introductory text, move that text to the group label.\n- Describe just the option with the label. Keep labels brief so it's easy to refer to them in messages and documentation. If the option requires further explanation, provide the explanation in a static text control using complete sentences and ending punctuation.\n- Use sentence-style capitalization\n\n## Radio button group labels\n- Use the group label to explain the purpose of the group, not how to make the selection. Assume that users know how to use radio buttons.\n- All radio button groups need labels. Write the label as a word or phrase, not as a sentence, ending with a colon using static text or a ``` <legend> ```, when using a fieldset to group radios.\n\n## Resources\n- [Checkboxes vs. Radio Buttons](https://www.nngroup.com/articles/checkboxes-vs-radio-buttons/)\n- [Mozilla Developer Network Docs](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox)\n- [MSDN Design Documentation](https://msdn.microsoft.com/en-us/library/windows/desktop/dn742436.aspx)\n",
        "tags": [],
        "description": "Radio buttons allow users to select a single value out of a set number of choices."
    },
    {
        "uri": "components/forms/select-input",
        "title": "Select element",
        "content": "Select Example\n{{}}Select input:\n\n    Choose an option...\n    Option One\n    Option Two\n    Option Three\n    Option Four\n\n{{}}\n\nInline validation examples\nFor more info on how to use the Rivet form input validation states, see the examples in the text input section.\n\n{{}}Type\n\n    Choose an option...\n    Option One\n    Option Two\n    Option Three\n    Option Four\n\n        You must choose an option.\n\nType\n\n    Choose an option...\n    Option One\n    Option Two\n    Option Three\n    Option Four\n\n        You must choose an option.\n\nType\n\n    Choose an option...\n    Option One\n    Option Two\n    Option Three\n    Option Four\n\n        You must choose an option.\n\nType\n\n    Choose an option...\n    Option One\n    Option Two\n    Option Three\n    Option Four\n\n        You must choose an option.\n\n{{}}\n\nDeprecated form validation class names\nVersion 1.1.0 of Rivet updated the CSS class names for inline form validation to be consistent with class names used by other components. The table below shows the deprecated class names and their replacements.\n\nThe deprecated class names will still work in version 1.1.0. However, they will be removed in a future release.\n\n    Rivet form validation CSS classes: deprecated and new\n\n        Deprecated\n        New in 1.1.0\n\n            .rvt-inline-alert--has-info\n            .rvt-inline-alert--info\n\n            .rvt-inline-alert--is-valid\n            .rvt-inline-alert--success\n\n            .rvt-inline-alert--has-warning\n            .rvt-inline-alert--warning\n\n            .rvt-inline-alert--is-invalid\n            .rvt-inline-alert--danger\n\n            .rvt-has-info\n            .rvt-validation-info\n\n            .rvt-is-valid\n            .rvt-validation-success\n\n            .rvt-has-warning\n            .rvt-validation-warning\n\n            .rvt-is-invalid\n            .rvt-validation-danger\n\nWhen to use\nUse the select element when you need to present users with a list of mutually exclusive options and they can only select one option.\n\nWhen to consider something else\nWhen you only need to present a user with three or less options, consider using a group of radio buttons instead.\n\nSelect labels\nWrite the label as a word or phrase, not as a sentence, and end it with a colon\nUse sentence-style capitalization\n\nSelect options\nDon't make the content of the select list or combo box (or its units label) part of a sentence\nWrite each option as a word or phrase, not as a sentence, and use no ending punctuation\nUse parallel phrasing, and try to keep the length about the same for all options\nSort options in a logical order — names in alphabetical order, numbers in numeric order, and dates in chronological order. Lists with 12 or more items should be sorted alphabetically to make items easier to find.\n  Exception: One or more common items may be placed at the beginning of an otherwise sorted set of options, such as placing \"United States\" at the top of a country select. When placing items out of order, always place a non-selectable separator (---) between the unsorted and sorted items.\n",
        "rawContent": "## Select Example\n{{< example lang=\"html\" >}}<label for=\"select-demo\">Select input:</label>\n<select id=\"select-demo\">\n    <option>Choose an option...</option>\n    <option value=\"Option One\">Option One</option>\n    <option value=\"Option One\">Option Two</option>\n    <option value=\"Option One\">Option Three</option>\n    <option value=\"Option One\">Option Four</option>\n</select>\n{{< /example >}}\n\n### Inline validation examples\nFor more info on how to use the Rivet form input validation states, [see the examples in the text input section]({{< ref \"components/forms/text-input.md#inline-validation-states\" >}}).\n\n{{< example lang=\"html\" >}}<label for=\"select-info-state\">Type</label>\n<select name=\"\" id=\"select-info-state\" class=\"rvt-validation-info\" aria-describedby=\"inline-select\">\n    <option>Choose an option...</option>\n    <option value=\"Option One\">Option One</option>\n    <option value=\"Option One\">Option Two</option>\n    <option value=\"Option One\">Option Three</option>\n    <option value=\"Option One\">Option Four</option>\n</select>\n<div class=\"rvt-inline-alert rvt-inline-alert--info\">\n    <span class=\"rvt-inline-alert__icon\">\n        <svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\">\n            <g fill=\"currentColor\">\n                <path d=\"M8,16a8,8,0,1,1,8-8A8,8,0,0,1,8,16ZM8,2a6,6,0,1,0,6,6A6,6,0,0,0,8,2Z\" />\n                <path d=\"M8,12a1,1,0,0,1-1-1V8A1,1,0,0,1,9,8v3A1,1,0,0,1,8,12Z\" />\n                <circle cx=\"8\" cy=\"5\" r=\"1\" />\n            </g>\n        </svg>\n    </span>\n    <span class=\"rvt-inline-alert__message\" role=\"alert\" id=\"inline-select\">\n        You must choose an option.\n    </span>\n</div>\n\n<label for=\"valid-state\" class=\"rvt-m-top-md\">Type</label>\n<select name=\"\" id=\"valid-state\" class=\"rvt-validation-success\" aria-describedby=\"type-message\">\n    <option>Choose an option...</option>\n    <option value=\"Option One\">Option One</option>\n    <option value=\"Option One\">Option Two</option>\n    <option value=\"Option One\">Option Three</option>\n    <option value=\"Option One\">Option Four</option>\n</select>\n<div class=\"rvt-inline-alert rvt-inline-alert--success\">\n    <span class=\"rvt-inline-alert__icon\">\n        <svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\">\n            <g fill=\"currentColor\">\n                <path d=\"M10.2,5.4,7.1,9.53,5.67,8.25a1,1,0,1,0-1.34,1.5l2.05,1.82a1.29,1.29,0,0,0,.83.32h.12a1.23,1.23,0,0,0,.88-.49L11.8,6.6a1,1,0,1,0-1.6-1.2Z\"/>\n                <path d=\"M8,0a8,8,0,1,0,8,8A8,8,0,0,0,8,0ZM8,14a6,6,0,1,1,6-6A6,6,0,0,1,8,14Z\" />\n            </g>\n        </svg>\n    </span>\n    <span class=\"rvt-inline-alert__message\" role=\"alert\" id=\"type-message\">\n        You must choose an option.\n    </span>\n</div>\n\n<label for=\"select-warning-state\" class=\"rvt-m-top-md\">Type</label>\n<select name=\"\" id=\"select-warning-state\" class=\"rvt-validation-warning\" aria-describedby=\"type-message-2\">\n    <option>Choose an option...</option>\n    <option value=\"Option One\">Option One</option>\n    <option value=\"Option One\">Option Two</option>\n    <option value=\"Option One\">Option Three</option>\n    <option value=\"Option One\">Option Four</option>\n</select>\n<div class=\"rvt-inline-alert rvt-inline-alert--warning\">\n    <span class=\"rvt-inline-alert__icon\">\n        <svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\">\n            <g fill=\"currentColor\">\n                <path d=\"M11,9H5A1,1,0,0,1,5,7h6a1,1,0,0,1,0,2Z\" />\n                <path d=\"M8,16a8,8,0,1,1,8-8A8,8,0,0,1,8,16ZM8,2a6,6,0,1,0,6,6A6,6,0,0,0,8,2Z\" />\n            </g>\n        </svg>\n    </span>\n    <span class=\"rvt-inline-alert__message\" role=\"alert\" id=\"type-message-2\">\n        You must choose an option.\n    </span>\n</div>\n\n<label for=\"select-error-state\" class=\"rvt-m-top-md\">Type</label>\n<select name=\"\" id=\"select-error-state\" class=\"rvt-validation-danger\" aria-describedby=\"state-message\" aria-invalid=\"true\">\n    <option>Choose an option...</option>\n    <option value=\"Option One\">Option One</option>\n    <option value=\"Option One\">Option Two</option>\n    <option value=\"Option One\">Option Three</option>\n    <option value=\"Option One\">Option Four</option>\n</select>\n<div class=\"rvt-inline-alert rvt-inline-alert--danger\">\n    <span class=\"rvt-inline-alert__icon\">\n        <svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\">\n            <g fill=\"currentColor\">\n                <path d=\"M8,0a8,8,0,1,0,8,8A8,8,0,0,0,8,0ZM8,14a6,6,0,1,1,6-6A6,6,0,0,1,8,14Z\" />\n                <path d=\"M10.83,5.17a1,1,0,0,0-1.41,0L8,6.59,6.59,5.17A1,1,0,0,0,5.17,6.59L6.59,8,5.17,9.41a1,1,0,1,0,1.41,1.41L8,9.41l1.41,1.41a1,1,0,0,0,1.41-1.41L9.41,8l1.41-1.41A1,1,0,0,0,10.83,5.17Z\"/>\n            </g>\n        </svg>\n    </span>\n    <span class=\"rvt-inline-alert__message\" role=\"alert\" id=\"state-message\">\n        You must choose an option.\n    </span>\n</div>\n{{< /example >}}\n\n### Deprecated form validation class names\nVersion `1.1.0` of Rivet updated the CSS class names for inline form validation to be consistent with class names used by other components. The table below shows the deprecated class names and their replacements.\n\nThe deprecated class names will still work in version `1.1.0`. However, they will be removed in a future release.\n\n<table class=\"rvt-m-top-lg\">\n    <caption class=\"rvt-sr-only\">Rivet form validation CSS classes: deprecated and new</caption>\n    <thead>\n        <th>Deprecated</th>\n        <th>New in <code>1.1.0</code></th>\n    </thead>\n    <tbody>\n        <tr>\n            <td><code>.rvt-inline-alert--has-info</code></td>\n            <td><code>.rvt-inline-alert--info</code></td>\n        </tr>\n        <tr>\n            <td><code>.rvt-inline-alert--is-valid</code></td>\n            <td><code>.rvt-inline-alert--success</code></td>\n        </tr>\n        <tr>\n            <td><code>.rvt-inline-alert--has-warning</code></td>\n            <td><code>.rvt-inline-alert--warning</code></td>\n        </tr>\n        <tr>\n            <td><code>.rvt-inline-alert--is-invalid</code></td>\n            <td><code>.rvt-inline-alert--danger</code></td>\n        </tr>\n        <tr>\n            <td><code>.rvt-has-info</code></td>\n            <td><code>.rvt-validation-info</code></td>\n        </tr>\n        <tr>\n            <td><code>.rvt-is-valid</code></td>\n            <td><code>.rvt-validation-success</code></td>\n        </tr>\n        <tr>\n            <td><code>.rvt-has-warning</code></td>\n            <td><code>.rvt-validation-warning</code></td>\n        </tr>\n        <tr>\n            <td><code>.rvt-is-invalid</code></td>\n            <td><code>.rvt-validation-danger</code></td>\n        </tr>\n    </tbody>\n</table>\n\n## When to use\nUse the select element when you need to present users with a list of mutually exclusive options and they can **only select one option**.\n\n## When to consider something else\nWhen you only need to present a user with three or less options, consider using a group of [radio buttons]({{< ref \"components/forms/radio-buttons.md\" >}}) instead.\n\n## Select labels\n- Write the label as a word or phrase, not as a sentence, and end it with a colon\n- Use sentence-style capitalization\n\n## Select options\n- Don't make the content of the select list or combo box (or its units label) part of a sentence\n- Write each option as a word or phrase, not as a sentence, and use no ending punctuation\n- Use parallel phrasing, and try to keep the length about the same for all options\n- Sort options in a logical order — names in alphabetical order, numbers in numeric order, and dates in chronological order. Lists with 12 or more items should be sorted alphabetically to make items easier to find.\n  - **Exception:** One or more common items may be placed at the beginning of an otherwise sorted set of options, such as placing \"United States\" at the top of a country select. When placing items out of order, always place a non-selectable separator (---) between the unsorted and sorted items.\n",
        "tags": [],
        "description": "The select element creates a dropdown that allows users to choose one item from a list."
    },
    {
        "uri": "components/forms/text-input",
        "title": "Text inputs",
        "content": "Text input example\n{{}}Text Input\n\nThis is a note about this field.\n\nText Input (disabled)\n\n{{}}\n\nInline validation states\n\n    Validation styles\n    You can use all Rivet validation CSS classes (.rvt-validation-success, .rvt-validation-danger, .rvt-validation-warning, and .rvt-validation-info) on any of the HTML5 text input types, select elements, or text areas.\n\nRivet provides the markup and styles for various states of inline form validation. These inline validation states should be used in combination with alerts to provide helpful validation error messages to users.\n\nDeprecated form validation class names\nVersion 1.1.0 of Rivet updated the CSS class names for inline form validation to be consistent with class names used by other components. The table below shows the deprecated class names and their replacements.\n\nThe deprecated class names will still work in version 1.1.0. However, they will be removed in a future release.\n\n    Rivet form validation CSS classes: deprecated and new\n\n        Deprecated\n        New in 1.1.0\n\n            .rvt-inline-alert--has-info\n            .rvt-inline-alert--info\n\n            .rvt-inline-alert--is-valid\n            .rvt-inline-alert--success\n\n            .rvt-inline-alert--has-warning\n            .rvt-inline-alert--warning\n\n            .rvt-inline-alert--is-invalid\n            .rvt-inline-alert--danger\n\n            .rvt-has-info\n            .rvt-validation-info\n\n            .rvt-is-valid\n            .rvt-validation-success\n\n            .rvt-has-warning\n            .rvt-validation-warning\n\n            .rvt-is-invalid\n            .rvt-validation-danger\n\nForm validation tips\n\nRivet does not make any assumptions about whether you’re using server- or client-side form validation. We only provide the HTML and CSS needed to create the validation states. That said, here are some tips for creating usable form error-handling experiences:\n\nValidate after the user submits the form. We recommend avoiding on-the-fly validation as the user types. This can cause too many unnecessary interruptions for users.\nSummarize multiple errors using a Rivet page-level alert at the top of the form. Provide links to the invalid fields in this summary. This makes it easier for keyboard and assistive technology users to jump directly to the invalid field (which is especially important on longer forms).\nMove focus to the error summary at the top of the form so that the errors will be announced right away to screen readers. This step is important. Otherwise, screen reader users would need to navigate all the way back through a page to get to that summary.\nUse the aria-describedby attribute on the invalid fields, and match the id to an element that describes what caused the error.\nUse the aria-invalid attribute set to true on invalid fields where appropriate. This will convey the invalid state to assistive technologies like screen readers.\n    When not to use the aria-invalid attribute: Input errors for groups of inputs like checkboxes and radio buttons need to be handled slightly differently. Read this section on using the standalone inline alert for handling these input errors.\n\n{{}}First name\n\n        First name is valid!\n\nPassword\n\n        Your Password is weak.\n\nUsername\n\n        The Username you entered is taken.\n\nDescription\n\n        The\n        Description tells users more about this stuff.\n\n{{}}\n\nTextarea example\n\n{{}}Textarea\n\nTextarea (disabled)\n\n{{}}\n\nTextarea inline validation states\n\n{{}}Essay\n\n        Your Essay is valid!\n\nResponse\n\n        Your Response has some misspellings!\n\nDescription\n\n        Your Description has special characters that need to be replaced.\n\nMessage\n\n        Add a Message to give users more information.\n\n{{}}\n\nWhen to use\nUse a text input for information that will only take up one line: a name, phone number, city, etc. Use textareas for information that includes multiple sentences or lines: descriptions, issues, proposals, etc.\n\nWhen to consider something else\nDon’t ask the user to describe anything in a text input, which can hide text from view if the line is too long.\nSimilarly, don’t ask users to copy large amounts of information from a document and paste it into a textarea. If possible, use a file input, and let them upload those documents instead.\n\nMicrocopy notes\nKeep labels clear and concise―around two to three words and never more than eight. But don’t be afraid to be descriptive or use a human voice. “Describe the problem you’re having” is clearer and kinder than “Problem description.”\n\nAccessibility notes\nEvery text input must have a ` element associated with it. Placeholder (placeholder=`) text is not a substitute for using a label element and most browsers render placeholder text at inaccessible contrast ratios.\nIf you need to visually hide a label use the Rivet screen reader only utility class. That way the label text will still be accessible to screenreaders.\nAvoid labeling text inputs implicitly i.e. wrapping inputs with label. Assistive technologies understand explicitly labeled (matching for and id) attributes elements better.\n\nResources\nUse the copy as a guide, not a crutch\n",
        "rawContent": "## Text input example\n{{< example lang=\"html\" >}}<label for=\"demo-1\">Text Input</label>\n<input type=\"text\" id=\"demo-1\" aria-describedby=\"demo-1-note\">\n<small id=\"demo-1-note\" class=\"rvt-display-block rvt-m-bottom-md\">This is a note about this field.</small>\n\n<label for=\"demo-2\">Text Input (disabled)</label>\n<input type=\"text\" id=\"demo-2\" class=\"rvt-m-bottom-md\" disabled>\n{{< /example >}}\n\n## Inline validation states\n\n<div class=\"rvt-alert rvt-alert--info rvt-m-bottom-md rvt-m-top-md\" aria-labelledby=\"information-alert-title\">\n    <h3 class=\"rvt-alert__title\" id=\"information-alert-title\">Validation styles</h3>\n    <p class=\"rvt-alert__message\">You can use all Rivet validation CSS classes (<code>.rvt-validation-success</code>, <code>.rvt-validation-danger</code>, <code>.rvt-validation-warning</code>, and <code>.rvt-validation-info</code>) on any of the HTML5 text input types, <a href=\"../select-input\">select elements</a>, or <a href=\"#textarea-example\">text areas</a>.</p>\n</div>\n\nRivet provides the markup and styles for various states of inline form validation. These inline validation states should be used in combination with [alerts]({{< ref \"components/overlays/alerts.md\" >}}) to provide helpful validation error messages to users.\n\n### Deprecated form validation class names\nVersion `1.1.0` of Rivet updated the CSS class names for inline form validation to be consistent with class names used by other components. The table below shows the deprecated class names and their replacements.\n\nThe deprecated class names will still work in version `1.1.0`. However, they will be removed in a future release.\n\n<table class=\"rvt-m-top-lg\">\n    <caption class=\"rvt-sr-only\">Rivet form validation CSS classes: deprecated and new</caption>\n    <thead>\n        <th>Deprecated</th>\n        <th>New in <code>1.1.0</code></th>\n    </thead>\n    <tbody>\n        <tr>\n            <td><code>.rvt-inline-alert--has-info</code></td>\n            <td><code>.rvt-inline-alert--info</code></td>\n        </tr>\n        <tr>\n            <td><code>.rvt-inline-alert--is-valid</code></td>\n            <td><code>.rvt-inline-alert--success</code></td>\n        </tr>\n        <tr>\n            <td><code>.rvt-inline-alert--has-warning</code></td>\n            <td><code>.rvt-inline-alert--warning</code></td>\n        </tr>\n        <tr>\n            <td><code>.rvt-inline-alert--is-invalid</code></td>\n            <td><code>.rvt-inline-alert--danger</code></td>\n        </tr>\n        <tr>\n            <td><code>.rvt-has-info</code></td>\n            <td><code>.rvt-validation-info</code></td>\n        </tr>\n        <tr>\n            <td><code>.rvt-is-valid</code></td>\n            <td><code>.rvt-validation-success</code></td>\n        </tr>\n        <tr>\n            <td><code>.rvt-has-warning</code></td>\n            <td><code>.rvt-validation-warning</code></td>\n        </tr>\n        <tr>\n            <td><code>.rvt-is-invalid</code></td>\n            <td><code>.rvt-validation-danger</code></td>\n        </tr>\n    </tbody>\n</table>\n\n### Form validation tips\n\nRivet does not make any assumptions about whether you’re using server- or client-side form validation. We only provide the HTML and CSS needed to create the validation states. That said, here are some tips for creating usable form error-handling experiences:\n\n- **Validate after the user submits the form**. We recommend avoiding on-the-fly validation as the user types. This can cause too many unnecessary interruptions for users.\n- **Summarize multiple errors** using a [Rivet page-level alert]({{< ref \"components/overlays/alerts.md\" >}}) at the top of the form. Provide links to the invalid fields in this summary. This makes it easier for keyboard and assistive technology users to jump directly to the invalid field (which is especially important on longer forms).\n- Move focus to the error summary at the top of the form so that the errors will be announced right away to screen readers. **This step is important**. Otherwise, screen reader users would need to navigate all the way back through a page to get to that summary.\n- **Use the `aria-describedby` attribute** on the invalid fields, and match the id to an element that describes what caused the error.\n- **Use the `aria-invalid` attribute** set to true on invalid fields where appropriate. This will convey the invalid state to assistive technologies like screen readers.\n    - **When not to use the `aria-invalid` attribute**: Input errors for groups of inputs like checkboxes and radio buttons need to be handled slightly differently. [Read this section on using the standalone inline alert]({{< ref \"components/overlays/alerts.md#standalone-inline-alerts\" >}}) for handling these input errors.\n\n\n{{< example lang=\"html\" >}}<label for=\"rvt-success-state\">First name</label>\n<input type=\"text\" id=\"rvt-success-state\" class=\"rvt-validation-success\" aria-describedby=\"first-name-message\">\n<div class=\"rvt-inline-alert rvt-inline-alert--success\">\n    <span class=\"rvt-inline-alert__icon\">\n        <svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\">\n            <g fill=\"currentColor\">\n                <path d=\"M10.2,5.4,7.1,9.53,5.67,8.25a1,1,0,1,0-1.34,1.5l2.05,1.82a1.29,1.29,0,0,0,.83.32h.12a1.23,1.23,0,0,0,.88-.49L11.8,6.6a1,1,0,1,0-1.6-1.2Z\"/>\n                <path d=\"M8,0a8,8,0,1,0,8,8A8,8,0,0,0,8,0ZM8,14a6,6,0,1,1,6-6A6,6,0,0,1,8,14Z\" />\n            </g>\n        </svg>\n    </span>\n    <span class=\"rvt-inline-alert__message\" id=\"first-name-message\">\n        <strong>First name</strong> is valid!\n    </span>\n</div>\n\n<label for=\"rvt-warning-state\" class=\"rvt-m-top-md\">Password</label>\n<input type=\"text\" id=\"rvt-warning-state\" class=\"rvt-validation-warning\" aria-describedby=\"password-message\">\n<div class=\"rvt-inline-alert rvt-inline-alert--warning\">\n    <span class=\"rvt-inline-alert__icon\">\n        <svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\">\n            <g fill=\"currentColor\">\n                <path d=\"M11,9H5A1,1,0,0,1,5,7h6a1,1,0,0,1,0,2Z\" />\n                <path d=\"M8,16a8,8,0,1,1,8-8A8,8,0,0,1,8,16ZM8,2a6,6,0,1,0,6,6A6,6,0,0,0,8,2Z\" />\n            </g>\n        </svg>\n    </span>\n    <span class=\"rvt-inline-alert__message\" id=\"password-message\">\n        Your <strong>Password</strong> is weak.\n    </span>\n</div>\n\n<label for=\"rvt-error-state\" class=\"rvt-m-top-md\">Username</label>\n<input type=\"text\" id=\"rvt-error-state\" class=\"rvt-validation-danger\" aria-describedby=\"username-message\" aria-invalid=\"true\">\n<div class=\"rvt-inline-alert rvt-inline-alert--danger\">\n    <span class=\"rvt-inline-alert__icon\">\n        <svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\">\n            <g fill=\"currentColor\">\n                <path d=\"M8,0a8,8,0,1,0,8,8A8,8,0,0,0,8,0ZM8,14a6,6,0,1,1,6-6A6,6,0,0,1,8,14Z\" />\n                <path d=\"M10.83,5.17a1,1,0,0,0-1.41,0L8,6.59,6.59,5.17A1,1,0,0,0,5.17,6.59L6.59,8,5.17,9.41a1,1,0,1,0,1.41,1.41L8,9.41l1.41,1.41a1,1,0,0,0,1.41-1.41L9.41,8l1.41-1.41A1,1,0,0,0,10.83,5.17Z\"/>\n            </g>\n        </svg>\n    </span>\n    <span class=\"rvt-inline-alert__message\" id=\"username-message\">\n        The <strong>Username</strong> you entered is taken.\n    </span>\n</div>\n\n<label for=\"error-state\" class=\"rvt-m-top-md\">Description</label>\n<input type=\"text\" id=\"error-state\" class=\"rvt-validation-info\" aria-describedby=\"description-message\">\n<div class=\"rvt-inline-alert rvt-inline-alert--info\">\n    <span class=\"rvt-inline-alert__icon\">\n        <svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\">\n            <g fill=\"currentColor\">\n                <path d=\"M8,16a8,8,0,1,1,8-8A8,8,0,0,1,8,16ZM8,2a6,6,0,1,0,6,6A6,6,0,0,0,8,2Z\" />\n                <path d=\"M8,12a1,1,0,0,1-1-1V8A1,1,0,0,1,9,8v3A1,1,0,0,1,8,12Z\" />\n                <circle cx=\"8\" cy=\"5\" r=\"1\" />\n            </g>\n        </svg>\n    </span>\n    <span class=\"rvt-inline-alert__message\" id=\"description-message\">\n        The\n        <strong>Description</strong> tells users more about this stuff.\n    </span>\n</div>\n{{< /example >}}\n\n## Textarea example\n\n{{< example lang=\"html\" >}}<label for=\"demo-3\">Textarea</label>\n<textarea id=\"demo-3\" class=\"rvt-m-bottom-md\"></textarea>\n\n<label for=\"demo-4\">Textarea (disabled)</label>\n<textarea id=\"demo-4\" class=\"rvt-m-bottom-md\" disabled></textarea>\n{{< /example >}}\n\n### Textarea inline validation states\n\n{{< example lang=\"html\" >}}<label for=\"textarea-success-state\">Essay</label>\n<textarea type=\"text\" id=\"textarea-success-state\" class=\"rvt-validation-success\" aria-describedby=\"essay-message\"></textarea>\n<div class=\"rvt-inline-alert rvt-inline-alert--success\">\n    <span class=\"rvt-inline-alert__icon\">\n        <svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\">\n            <g fill=\"currentColor\">\n                <path d=\"M10.2,5.4,7.1,9.53,5.67,8.25a1,1,0,1,0-1.34,1.5l2.05,1.82a1.29,1.29,0,0,0,.83.32h.12a1.23,1.23,0,0,0,.88-.49L11.8,6.6a1,1,0,1,0-1.6-1.2Z\"/>\n                <path d=\"M8,0a8,8,0,1,0,8,8A8,8,0,0,0,8,0ZM8,14a6,6,0,1,1,6-6A6,6,0,0,1,8,14Z\" />\n            </g>\n        </svg>\n    </span>\n    <span class=\"rvt-inline-alert__message\" id=\"essay-message\">\n        Your <strong>Essay</strong> is valid!\n    </span>\n</div>\n\n<label for=\"textarea-warning-state\" class=\"rvt-m-top-md\">Response</label>\n<textarea type=\"text\" id=\"textarea-warning-state\" class=\"rvt-validation-warning\" aria-describedby=\"response-message\"></textarea>\n<div class=\"rvt-inline-alert rvt-inline-alert--warning\">\n    <span class=\"rvt-inline-alert__icon\">\n        <svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\">\n            <g fill=\"currentColor\">\n                <path d=\"M11,9H5A1,1,0,0,1,5,7h6a1,1,0,0,1,0,2Z\" />\n                <path d=\"M8,16a8,8,0,1,1,8-8A8,8,0,0,1,8,16ZM8,2a6,6,0,1,0,6,6A6,6,0,0,0,8,2Z\" />\n            </g>\n        </svg>\n    </span>\n    <span class=\"rvt-inline-alert__message\" id=\"response-message\">\n        Your <strong>Response</strong> has some misspellings!\n    </span>\n</div>\n\n<label for=\"textarea-error-state\" class=\"rvt-m-top-md\">Description</label>\n<textarea type=\"text\" id=\"textarea-error-state\" class=\"rvt-validation-danger\" aria-describedby=\"description-message\" aria-invalid=\"true\"></textarea>\n<div class=\"rvt-inline-alert rvt-inline-alert--danger\">\n    <span class=\"rvt-inline-alert__icon\">\n        <svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\">\n            <g fill=\"currentColor\">\n                <path d=\"M8,0a8,8,0,1,0,8,8A8,8,0,0,0,8,0ZM8,14a6,6,0,1,1,6-6A6,6,0,0,1,8,14Z\" />\n                <path d=\"M10.83,5.17a1,1,0,0,0-1.41,0L8,6.59,6.59,5.17A1,1,0,0,0,5.17,6.59L6.59,8,5.17,9.41a1,1,0,1,0,1.41,1.41L8,9.41l1.41,1.41a1,1,0,0,0,1.41-1.41L9.41,8l1.41-1.41A1,1,0,0,0,10.83,5.17Z\"\n                />\n            </g>\n        </svg>\n    </span>\n    <span class=\"rvt-inline-alert__message\" id=\"description-message\">\n        Your <strong>Description</strong> has special characters that need to be replaced.\n    </span>\n</div>\n\n<label for=\"textarea-info-state\" class=\"rvt-m-top-md\">Message</label>\n<textarea type=\"text\" id=\"textarea-info-state\" class=\"rvt-validation-info\" aria-describedby=\"message-message\"></textarea>\n<div class=\"rvt-inline-alert rvt-inline-alert--info\">\n    <span class=\"rvt-inline-alert__icon\">\n        <svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\">\n            <g fill=\"currentColor\">\n                <path d=\"M8,16a8,8,0,1,1,8-8A8,8,0,0,1,8,16ZM8,2a6,6,0,1,0,6,6A6,6,0,0,0,8,2Z\" />\n                <path d=\"M8,12a1,1,0,0,1-1-1V8A1,1,0,0,1,9,8v3A1,1,0,0,1,8,12Z\" />\n                <circle cx=\"8\" cy=\"5\" r=\"1\" />\n            </g>\n        </svg>\n    </span>\n    <span class=\"rvt-inline-alert__message\" id=\"message-message\">\n        Add a <strong>Message</strong> to give users more information.\n    </span>\n</div>\n{{< /example >}}\n\n## When to use\nUse a text input for information that will only take up one line: a name, phone number, city, etc. Use textareas for information that includes multiple sentences or lines: descriptions, issues, proposals, etc.\n\n## When to consider something else\n- Don’t ask the user to describe anything in a text input, which can hide text from view if the line is too long.\n- Similarly, don’t ask users to copy large amounts of information from a document and paste it into a textarea. If possible, use a file input, and let them upload those documents instead.\n\n## Microcopy notes\nKeep labels clear and concise―around two to three words and never more than eight. But don’t be afraid to be descriptive or use a human voice. “Describe the problem you’re having” is clearer and kinder than “Problem description.”\n\n## Accessibility notes\n- Every text input must have a `<label>` element associated with it. Placeholder (`placeholder=`) text is not a substitute for using a label element and most browsers render placeholder text at inaccessible [contrast ratios](https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast-contrast.html).\n- If you need to visually hide a label use the Rivet [screen reader only utility class](https://rivet.iu.edu/components/utilities/display/#screen-reader-only). That way the label text will still be accessible to screenreaders.\n- Avoid labeling text inputs implicitly i.e. wrapping inputs with label. Assistive technologies understand explicitly labeled (matching `for` and `id`) attributes elements better.\n\n## Resources\n[Use the copy as a guide, not a crutch](https://www.smashingmagazine.com/2013/06/five-ways-prevent-bad-microcopy/#3-use-copy-as-a-guide-not-a-crutch)\n",
        "tags": [],
        "description": "Text inputs are the basic building blocks of forms. They allow users to enter various types of data into web-based forms."
    },
    {
        "uri": "components/getting-started",
        "title": "Getting started",
        "content": "",
        "rawContent": "",
        "tags": [],
        "description": ""
    },
    {
        "uri": "components",
        "title": "Components",
        "content": "Stay up to date\nJoin the email list to get updates on releases, new features, examples, and how-to guides.\n\n{{}}Subscribe{{}}\n{{}}Manage your settings{{}}\n\nGet started\nThe Rivet components documentation contains examples, code snippets, and guidance on UX best-practices. There are several ways you can use Rivet in your project. The following instructions will help you get started.\n\nDownload Rivet\nYou can download a ZIP file that contains the compiled and minified CSS and JavaScript, images, and a starter HTML file.\n\n{{}}\n\n    Download Rivet\n{{}}\n\nDownload contents\nThe download contains the following files:\n\nCompiled CSS (expanded and minified versions)\nCompiled JavaScript (expanded and minified versions)\nSass source files\nStarter index.html file\n\n{{}}css/\n  |—— rivet.css\n  |—— rivet.min.css\njs/\n  |—— rivet.js\n  |—— rivet.min.js\nsass/\n  |—— components/\n  |—— core/\n  |—— libs/\n  |—— utilities/\n  |—— rivet.scss\nindex.html\n{{}}\n\nAxure UI and Wireframe kit\n\n        We've created an Axure wireframe kit with accurate representations of all the Rivet components. Download the Axure\n            kit to help you create prototypes that will translate to Rivet components.\n\n          Download Axure kit\n\nHosted CSS and JavaScript\n{{}}\nThe hosted CSS and JavaScript assets are a good solution for prototyping ideas, early stages of development, and small apps that don't get heavy traffic. We recommend managing Rivet as a dependency with NPM as a long-term solution for production apps with a large number of regular users.\n{{}}\n\nThe quickest way to get started with Rivet is using the centrally-hosted CSS and JavaScript files. Copy and paste this ` element to ` of your document. Make sure it is placed before any other stylesheets.\n\n{{}}{{}}\n\nRivet has a minimal amount of JavaScript that is required for some components, like the header. Copy and paste this link and add to the end of your document, just before the closing `` tag.\n\n{{}}{{}}\n\nStarter template\nHere's a basic starter template with the hosted CSS and JavaScript hooked up. Copy and paste into your favorite editor to start using Rivet.\n\n{{}}\n\n    Rivet starter file\n\n        Skip to content\n\n                Indiana University Logo\n\n            Application Title\n\n                Accessibility\n\n                Privacy Notice\n\n                Copyright &copy; 2019 The Trustees of Indiana University\n\n{{}}\n\nUsing Rivet with other frameworks\nCurrently Rivet does not support the use of additional CSS frameworks like Bootstrap, Foundation, etc.  If you choose to use one of these frameworks alongside Rivet it is up to you to resolve any conflicts that arise.\n",
        "rawContent": "## Stay up to date\nJoin the email list to get updates on releases, new features, examples, and how-to guides.\n\n<div class=\"rvt-button-group\">\n{{< button url=\"https://list.iu.edu/sympa/subscribe/rivet-l\" variant=\"secondary\" analytics-category=\"click\">}}Subscribe{{< /button >}}\n{{< button url=\"https://list.iu.edu/sympa/sigrequest/rivet-l\" variant=\"plain\" analytics-category=\"click\">}}Manage your settings{{< /button >}}\n</div>\n\n## Get started\nThe Rivet components documentation contains examples, code snippets, and guidance on UX best-practices. There are several ways you can use Rivet in your project. The following instructions will help you get started.\n\n## Download Rivet\nYou can download a ZIP file that contains the compiled and minified CSS and JavaScript, images, and a starter HTML file.\n\n{{< button url=\"https://github.com/indiana-university/rivet-source/releases/download/v1.4.0/rivet.zip\" variant=\"secondary\" analytics-action=\"download\" analytics-category=\"click\">}}\n    <svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\">\n      <g fill=\"currentColor\">\n        <path d=\"M14.25,11a1,1,0,0,0-1,1v1H2.75V12a1,1,0,0,0-2,0v1.75A1.25,1.25,0,0,0,2,15H14a1.25,1.25,0,0,0,1.25-1.25V12A1,1,0,0,0,14.25,11Z\"/>\n        <path d=\"M7.29,10.71a1,1,0,0,0,1.41,0l4-4a1,1,0,0,0-1.41-1.41L9,7.59V1A1,1,0,0,0,7,1V7.59L4.71,5.29A1,1,0,0,0,3.29,6.71Z\"/>\n      </g>\n    </svg>\n    <span class=\"rvt-m-left-xs\">Download Rivet</span>\n{{< /button >}}\n\n### Download contents\nThe download contains the following files:\n\n- Compiled CSS (expanded and minified versions)\n- Compiled JavaScript (expanded and minified versions)\n- Sass source files\n- Starter `index.html` file\n\n{{< code lang=\"html\" >}}css/\n  |—— rivet.css\n  |—— rivet.min.css\njs/\n  |—— rivet.js\n  |—— rivet.min.js\nsass/\n  |—— components/\n  |—— core/\n  |—— libs/\n  |—— utilities/\n  |—— rivet.scss\nindex.html\n{{< /code >}}\n\n## Axure UI and Wireframe kit\n<div class=\"rvt-grid rvt-m-top-xl\">\n    <div class=\"rvt-grid__item-4-md-up\">\n        <img src=\"../img/docs/rvtd-htu-example-axure.png\" alt=\"Rivet components on a screen\">\n    </div>\n    <div class=\"rvt-grid__item-7-md-up rvt-grid__item--last\">\n        <p>We've created an Axure wireframe kit with accurate representations of all the Rivet components. Download the Axure\n            kit to help you create prototypes that will translate to Rivet components.</p>\n        <a\n            href=\"https://github.iu.edu/UITS/rivet/releases/download/v1.0.0/rivet-axure-1.0.rp\"\n            class=\"rvt-button rvt-button--secondary rvt-m-top-md\"\n        >\n          <svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\">\n            <g fill=\"currentColor\">\n              <path d=\"M14.25,11a1,1,0,0,0-1,1v1H2.75V12a1,1,0,0,0-2,0v1.75A1.25,1.25,0,0,0,2,15H14a1.25,1.25,0,0,0,1.25-1.25V12A1,1,0,0,0,14.25,11Z\"/>\n              <path d=\"M7.29,10.71a1,1,0,0,0,1.41,0l4-4a1,1,0,0,0-1.41-1.41L9,7.59V1A1,1,0,0,0,7,1V7.59L4.71,5.29A1,1,0,0,0,3.29,6.71Z\"/>\n            </g>\n          </svg>\n          <span class=\"rvt-m-left-xs\">Download Axure kit</span>\n        </a>\n    </div>\n</div>\n\n## Hosted CSS and JavaScript\n{{< alert variant=\"warning\" title=\"Production applications\" >}}\nThe hosted CSS and JavaScript assets are a good solution for prototyping ideas, early stages of development, and small apps that don't get heavy traffic. **We recommend managing Rivet as a dependency with NPM** as a long-term solution for production apps with a large number of regular users.\n{{< /alert >}}\n\nThe quickest way to get started with Rivet is using the centrally-hosted CSS and JavaScript files. Copy and paste this `<link>` element to `<head>` of your document. Make sure it is placed **before** any other stylesheets.\n\n{{< code lang=\"html\" analytics-label=\"assets.uits.iu.edu/css link tag\">}}<link rel=\"stylesheet\" href=\"https://assets.uits.iu.edu/css/rivet/1.4.0/rivet.min.css\">{{< /code >}}\n\nRivet has a minimal amount of JavaScript that is required for some components, like the [header](../components/navigation/header). Copy and paste this link and add to the end of your document, just before the closing `</body>` tag.\n\n{{< code lang=\"html\" analytics-label=\"assets.uits.iu.edu/js script tag\">}}<script src=\"https://assets.uits.iu.edu/javascript/rivet/1.4.0/rivet.min.js\"></script>{{< /code >}}\n\n## Starter template\nHere's a basic starter template with the hosted CSS and JavaScript hooked up. Copy and paste into your favorite editor to start using Rivet.\n\n{{< code lang=\"html\" analytics-label=\"starter template\" >}}<!DOCTYPE html>\n<html lang=\"en-US\">\n<head>\n    <meta charset=\"utf-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"https://assets.uits.iu.edu/css/rivet/1.4.0/rivet.min.css\">\n    <title>Rivet starter file</title>\n</head>\n<body>\n    <header class=\"rvt-header\" role=\"banner\">\n        <a class=\"rvt-skip-link\" href=\"#main-content\">Skip to content</a>\n        <div class=\"rvt-header__trident\">\n            <svg class=\"rvt-header__trident-logo\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 41 48\" aria-describedby=\"iu-logo\" aria-hidden=\"true\">\n                <title id=\"iu-logo\">Indiana University Logo</title>\n                <rect width=\"41\" height=\"48\" fill=\"#900\"/>\n                <polygon points=\"24.59 12.64 24.59 14.98 26.34 14.98 26.34 27.78 22.84 27.78 22.84 10.9 24.59 10.9 24.59 8.57 16.41 8.57 16.41 10.9 18.16 10.9 18.16 27.78 14.66 27.78 14.66 14.98 16.41 14.98 16.41 12.64 8.22 12.64 8.22 14.98 9.97 14.98 9.97 30.03 12.77 33.02 18.16 33.02 18.16 36.52 16.41 36.52 16.41 39.43 24.59 39.43 24.59 36.52 22.84 36.52 22.84 33.02 28 33.02 31.01 30.03 31.01 14.98 32.78 14.98 32.78 12.64 24.59 12.64\" fill=\"#fff\"/>\n            </svg>\n        </div>\n        <span class=\"rvt-header__title\">\n            <a href=\"#0\">Application Title</a>\n        </span>\n    </header>\n    <main role=\"main\" id=\"main-content\">\n\n        <!-- **************************************************************\n            Start building here!\n        *************************************************************** -->\n\n    </main>\n    <footer class=\"rvt-footer m-top-xxl\" role=\"contentinfo\">\n        <div class=\"rvt-footer__trident\">\n            <svg role=\"img\" alt=\"\" xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"25\" viewBox=\"0 0 20 25\">\n                <polygon points=\"13.33 3.32 13.33 5.21 14.76 5.21 14.76 15.64 11.9 15.64 11.9 1.9 13.33 1.9 13.33 0 6.67 0 6.67 1.9 8.09 1.9 8.09 15.64 5.24 15.64 5.24 5.21 6.67 5.21 6.67 3.32 0 3.32 0 5.21 1.43 5.21 1.43 17.47 3.7 19.91 8.09 19.91 8.09 22.76 6.67 22.76 6.67 25.13 13.33 25.13 13.33 22.76 11.9 22.76 11.9 19.91 16.1 19.91 18.56 17.47 18.56 5.21 20 5.21 20 3.32 13.33 3.32\" fill=\"#900\"/>\n            </svg>\n        </div>\n        <ul class=\"rvt-footer__aux-links\">\n            <li class=\"rvt-footer__aux-item\">\n                <a href=\"https://accessibility.iu.edu/assistance/\">Accessibility</a>\n            </li>\n            <li class=\"rvt-footer__aux-item\">\n                <!-- You can learn more about privacy policies and generate one\n                    for your site here:\n                    https://protect.iu.edu/online-safety/tools/privacy-notice/index.html -->\n                <a href=\"#0\">Privacy Notice</a>\n            </li>\n            <li class=\"rvt-footer__aux-item\">\n                <a href=\"https://www.iu.edu/copyright/index.html\">Copyright</a> &copy; 2019 The Trustees of <a href=\"https://www.iu.edu/\">Indiana University</a>\n            </li>\n        </ul>\n    </footer>\n    <script src=\"https://assets.uits.iu.edu/javascript/rivet/1.4.0/rivet.min.js\"></script>\n</body>\n</html>\n{{< /code >}}\n\n## Using Rivet with other frameworks\nCurrently Rivet does not support the use of additional CSS frameworks like Bootstrap, Foundation, etc.  If you choose to use one of these frameworks alongside Rivet it is up to you to resolve any conflicts that arise.\n",
        "tags": [],
        "description": "The Rivet components are a well-documented set of HTML, CSS, and JavaScript assets."
    },
    {
        "uri": "/getting-started/npm/",
        "title": "Install with npm",
        "content": "NPM dependency\nThese instructions assume that you are already using NPM in your project. If not, you can read these instructions on the NPM website about how to start.\n\n{{}}\nIn previous versions of Rivet a .npmrc file configured to look at IU's public registry was required to install Rivet. As of version 1.1.0 you no longer need a .npmrc file.\n{{}}\n\nInstalling via NPM\nOnce you have a package.json file configured in the root of your project, you can run the following command to install Rivet.\n\n{{}}npm install rivet-uits@1.4.0 --save-dev\n{{}}\n\nUpdating the Rivet NPM package\nWhen there is a new version of Rivet released it will be publish to the NPM registry. You can check for updates by running the npm outdated command. To actually update your NPM dependency you can run the following command at the same level as your project's package.json.\n\n{{}}npm install rivet-uits@ --save-dev\n{{}}\n\nIn this example `` would be the new version of Rivet you want to install.",
        "rawContent": "## NPM dependency\nThese instructions assume that you are already using NPM in your project. If not, you can [read these instructions](https://docs.npmjs.com/cli/init) on the NPM website about how to start.\n\n{{< alert title=\"About using a .npmrc file\" variant=\"info\" >}}\nIn previous versions of Rivet a .npmrc file configured to look at IU's public registry was required to install Rivet. As of version 1.1.0 you no longer need a .npmrc file.\n{{< /alert >}}\n\n### Installing via NPM\nOnce you have a `package.json` file configured in the root of your project, you can run the following command to install Rivet.\n\n{{< code >}}npm install rivet-uits@1.4.0 --save-dev\n{{< /code >}}\n\n### Updating the Rivet NPM package\nWhen there is a new version of Rivet released it will be publish to the NPM registry. You can check for updates by running the `npm outdated` command. To actually update your NPM dependency you can run the following command at the same level as your project's `package.json`.\n\n{{< code >}}npm install rivet-uits@<version> --save-dev\n{{< /code >}}\n\nIn this example `<version>` would be the new version of Rivet you want to install.",
        "tags": [],
        "description": "Rivet is also available to include in as a dependency in your app via NPM."
    },
    {
        "uri": "/getting-started/sass/",
        "title": "Rivet Sass",
        "content": "Using Sass\nThe Rivet CSS is built using the Sass (SCSS) CSS preprocessor. Both the Rivet .zip download and the npm package include the SCSS source files that you can use in your app.\n\nIf you are using the Rivet npm package and have a build process in place for Sass already, you can import Rivet into your project directly:\n\n{{}}@import \"node_modules/rivet-uits/sass/rivet.scss\"\n{{}}\n\nOnce you have imported the rivet.scss into your project you will then have access to all the same Sass variables to use in your project.\n\nTypography\n{{}}// Main type sizes map.\n\n$key = pixel size, $value = relational units\n\n$type-sizes: (\n  12: .75rem,\n  xxs: .75rem,\n  14: .875rem,\n  xs: .875rem,\n  16: 1rem,\n  base: 1rem,\n  18: 1.125rem,\n  20: 1.25rem,\n  sm: 1.25rem,\n  23: 1.4375rem,\n  26: 1.625rem,\n  md: 1.625rem,\n  29: 1.8125rem,\n  32: 2rem,\n  lg: 2rem,\n  36: 2.25rem,\n  41: 2.5625rem,\n  xl: 2.5625rem,\n  46: 2.875rem,\n  52: 3.25rem,\n  xxl: 3.25rem,\n);\n\n// Type Size variables\n\n$ts-12: map-get($type-sizes, 12); // .75rem (12px)\n$ts-14: map-get($type-sizes, 14);\n$ts-16: map-get($type-sizes, 16);\n$ts-18: map-get($type-sizes, 18);\n$ts-20: map-get($type-sizes, 20);\n$ts-23: map-get($type-sizes, 23);\n$ts-26: map-get($type-sizes, 26);\n$ts-29: map-get($type-sizes, 29);\n$ts-32: map-get($type-sizes, 32);\n$ts-36: map-get($type-sizes, 36);\n$ts-41: map-get($type-sizes, 41);\n$ts-46: map-get($type-sizes, 46);\n$ts-52: map-get($type-sizes, 52);\n\n// Type scale aliases\n\n$ts-xxs: $ts-12;\n$ts-xs: $ts-14;\n$ts-base: $ts-16;\n$ts-sm: $ts-20;\n$ts-md: $ts-26;\n$ts-lg: $ts-32;\n$ts-xl: $ts-41;\n$ts-xxl: $ts-52;\n\n// Font weight variables\n\n$font-weight-bold: 700;\n$font-weight-regular: 400;\n{{}}\n\nSpacing\n\n{{}}$spacing-unit: .5rem      // 8px\n\n$xxs: $spacing-unit/2;       // 4px\n$xs: $spacing-unit;          // 8px\n$sm: $spacing-unit * 2;      // 16px Base\n$md: $spacing-unit * 3;      // 24px\n$lg: $spacing-unit * 4;      // 32px\n$xl: $spacing-unit * 5;      // 40px\n$xxl: $spacing-unit * 8;     // 64px\n{{}}\n\nColor\n\n{{}}// Black variants\n\n$color-black: #333333 !default;\n\n// NOTE: black is a bit of an outlier in that the base black color\n// does not correspond to one of the following black variants like the rest\n// of the colors that follow. We will update the colors to follow a totally\n// standard convention in the next major version of Rivet.\n\n$color-black--050: #fafafa;\n$color-black--100: #eeeeee;\n$color-black--200: #dddddd;\n$color-black--300: #cccccc;\n$color-black--400: #aaaaaa;\n$color-black--500: #999999;\n$color-black--600: #777777;\n$color-black--700: #666666;\n$color-black--800: #555555;\n$color-black--900: #444444;\n\n// Blue variants\n\n$color-blue: #006298;\n\n$color-blue--050: #edf1f6;\n$color-blue--100: #dce3ee;\n$color-blue--200: #b8c8dc;\n$color-blue--300: #95adcb;\n$color-blue--400: #7194ba;\n$color-blue--500: #497ba9;\n$color-blue--600: $color-blue;\n$color-blue--700: #134a71;\n$color-blue--800: #16324b;\n$color-blue--900: #121c28;\n\n// Green variants\n\n$color-green: #008a28;\n\n$color-green--050: #eaf3e8;\n$color-green--100: #d4e8d2;\n$color-green--200: #aad1a7;\n$color-green--300: #7eb97c;\n$color-green--400: #50a253;\n$color-green--500: $color-green;\n$color-green--600: #116d23;\n$color-green--700: #16521d;\n$color-green--800: #153717;\n$color-green--900: #111f0f;\n\n// Yellow variants\n\n$color-yellow: #f5bb17;\n\n$color-yellow--050: #ffeecd;\n$color-yellow--100: #ffdd9b;\n$color-yellow--200: $color-yellow;\n$color-yellow--300: #d6a31a;\n$color-yellow--400: #b58a1b;\n$color-yellow--500: #94721b;\n$color-yellow--600: #765a19;\n$color-yellow--700: #584416;\n$color-yellow--800: #3c2e13;\n$color-yellow--900: #221b0c;\n\n// Orange variants\n\n$color-orange: #df3603;\n\n$color-orange--050: #ffece5;\n$color-orange--100: #ffd9cc;\n$color-orange--200: #ffb49a;\n$color-orange--300: #fa8e6b;\n$color-orange--400: #ef663c;\n$color-orange--500: $color-orange;\n$color-orange--600: #b02f0a;\n$color-orange--700: #82270d;\n$color-orange--800: #571e0c;\n$color-orange--900: #2f1407;\n{{}}\n\nBreakpoints\n\n{{}}// Global breakpoints\n\n$breakpoints: (\n  sm: (480em/16),\n  md: (740em/16),\n  lg: (1080em/16),\n  xl: (1260em/16),\n  xxl: (1400em/16)\n);\n\n$breakpoint-sm: map-get($breakpoints, 'sm');\n$breakpoint-md: map-get($breakpoints, 'md');\n$breakpoint-lg: map-get($breakpoints, 'lg');\n$breakpoint-xl: map-get($breakpoints, 'xl');\n$breakpoint-xxl: map-get($breakpoints, 'xxl');\n{{}}\n\nShadows\n\n{{}}// Standard shadow(s)\n\n$shadow-base: 0 1px 3px 2px rgba(0, 0, 0, .07);\n{{}}",
        "rawContent": "## Using Sass\nThe Rivet CSS is built using the Sass (SCSS) CSS preprocessor. Both the Rivet `.zip` download and [the npm package]({{< relref \"npm.md\" >}}) include the SCSS source files that you can use in your app.\n\nIf you are using the Rivet npm package and have a build process in place for Sass already, you can import Rivet into your project directly:\n\n{{< code lang=\"scss\" >}}@import \"node_modules/rivet-uits/sass/rivet.scss\"\n{{< /code >}}\n\nOnce you have imported the `rivet.scss` into your project you will then have access to all the same Sass variables to use in your project.\n\n## Typography\n{{< code lang=\"scss\" >}}// Main type sizes map.\n\n$key = pixel size, $value = relational units\n\n$type-sizes: (\n  12: .75rem,\n  xxs: .75rem,\n  14: .875rem,\n  xs: .875rem,\n  16: 1rem,\n  base: 1rem,\n  18: 1.125rem,\n  20: 1.25rem,\n  sm: 1.25rem,\n  23: 1.4375rem,\n  26: 1.625rem,\n  md: 1.625rem,\n  29: 1.8125rem,\n  32: 2rem,\n  lg: 2rem,\n  36: 2.25rem,\n  41: 2.5625rem,\n  xl: 2.5625rem,\n  46: 2.875rem,\n  52: 3.25rem,\n  xxl: 3.25rem,\n);\n\n// Type Size variables\n\n$ts-12: map-get($type-sizes, 12); // .75rem (12px)\n$ts-14: map-get($type-sizes, 14);\n$ts-16: map-get($type-sizes, 16);\n$ts-18: map-get($type-sizes, 18);\n$ts-20: map-get($type-sizes, 20);\n$ts-23: map-get($type-sizes, 23);\n$ts-26: map-get($type-sizes, 26);\n$ts-29: map-get($type-sizes, 29);\n$ts-32: map-get($type-sizes, 32);\n$ts-36: map-get($type-sizes, 36);\n$ts-41: map-get($type-sizes, 41);\n$ts-46: map-get($type-sizes, 46);\n$ts-52: map-get($type-sizes, 52);\n\n\n// Type scale aliases\n\n$ts-xxs: $ts-12;\n$ts-xs: $ts-14;\n$ts-base: $ts-16;\n$ts-sm: $ts-20;\n$ts-md: $ts-26;\n$ts-lg: $ts-32;\n$ts-xl: $ts-41;\n$ts-xxl: $ts-52;\n\n// Font weight variables \n\n$font-weight-bold: 700;\n$font-weight-regular: 400;\n{{< /code >}}\n\n## Spacing\n\n{{< code lang=\"scss\" >}}$spacing-unit: .5rem      // 8px\n\n$xxs: $spacing-unit/2;       // 4px\n$xs: $spacing-unit;          // 8px\n$sm: $spacing-unit * 2;      // 16px Base\n$md: $spacing-unit * 3;      // 24px\n$lg: $spacing-unit * 4;      // 32px\n$xl: $spacing-unit * 5;      // 40px\n$xxl: $spacing-unit * 8;     // 64px\n{{< /code >}}\n\n## Color\n\n{{< code lang=\"scss\" >}}// Black variants\n\n$color-black: #333333 !default;\n\n// NOTE: black is a bit of an outlier in that the base black color\n// does not correspond to one of the following black variants like the rest\n// of the colors that follow. We will update the colors to follow a totally\n// standard convention in the next major version of Rivet.\n\n$color-black--050: #fafafa;\n$color-black--100: #eeeeee;\n$color-black--200: #dddddd;\n$color-black--300: #cccccc;\n$color-black--400: #aaaaaa;\n$color-black--500: #999999;\n$color-black--600: #777777;\n$color-black--700: #666666;\n$color-black--800: #555555;\n$color-black--900: #444444;\n\n// Blue variants\n\n$color-blue: #006298;\n\n$color-blue--050: #edf1f6;\n$color-blue--100: #dce3ee;\n$color-blue--200: #b8c8dc;\n$color-blue--300: #95adcb;\n$color-blue--400: #7194ba;\n$color-blue--500: #497ba9;\n$color-blue--600: $color-blue;\n$color-blue--700: #134a71;\n$color-blue--800: #16324b;\n$color-blue--900: #121c28;\n\n// Green variants\n\n$color-green: #008a28;\n\n$color-green--050: #eaf3e8;\n$color-green--100: #d4e8d2;\n$color-green--200: #aad1a7;\n$color-green--300: #7eb97c;\n$color-green--400: #50a253;\n$color-green--500: $color-green;\n$color-green--600: #116d23;\n$color-green--700: #16521d;\n$color-green--800: #153717;\n$color-green--900: #111f0f;\n\n// Yellow variants\n\n$color-yellow: #f5bb17;\n\n$color-yellow--050: #ffeecd;\n$color-yellow--100: #ffdd9b;\n$color-yellow--200: $color-yellow;\n$color-yellow--300: #d6a31a;\n$color-yellow--400: #b58a1b;\n$color-yellow--500: #94721b;\n$color-yellow--600: #765a19;\n$color-yellow--700: #584416;\n$color-yellow--800: #3c2e13;\n$color-yellow--900: #221b0c;\n\n// Orange variants\n\n$color-orange: #df3603;\n\n$color-orange--050: #ffece5;\n$color-orange--100: #ffd9cc;\n$color-orange--200: #ffb49a;\n$color-orange--300: #fa8e6b;\n$color-orange--400: #ef663c;\n$color-orange--500: $color-orange;\n$color-orange--600: #b02f0a;\n$color-orange--700: #82270d;\n$color-orange--800: #571e0c;\n$color-orange--900: #2f1407;\n{{< /code >}}\n\n## Breakpoints\n\n{{< code lang=\"scss\" >}}// Global breakpoints\n\n$breakpoints: (\n  sm: (480em/16),\n  md: (740em/16),\n  lg: (1080em/16),\n  xl: (1260em/16),\n  xxl: (1400em/16)\n);\n\n$breakpoint-sm: map-get($breakpoints, 'sm');\n$breakpoint-md: map-get($breakpoints, 'md');\n$breakpoint-lg: map-get($breakpoints, 'lg');\n$breakpoint-xl: map-get($breakpoints, 'xl');\n$breakpoint-xxl: map-get($breakpoints, 'xxl');\n{{< /code >}}\n\n## Shadows\n\n{{< code lang=\"scss\" >}}// Standard shadow(s)\n\n$shadow-base: 0 1px 3px 2px rgba(0, 0, 0, .07);\n{{< /code >}}",
        "tags": [],
        "description": "Use Rivet's Sass source files in your project"
    },
    {
        "uri": "components/information",
        "title": "Information",
        "content": "",
        "rawContent": "",
        "tags": [],
        "description": ""
    },
    {
        "uri": "components/information/changelog",
        "title": "Changelog",
        "content": "",
        "rawContent": "",
        "tags": [],
        "description": "Detailed information about fixes, additions, and updates in each release"
    },
    {
        "uri": "components/information/component-status",
        "title": "Component status",
        "content": "Status descriptions\n\n    Status description table\n\n        Name\n        Desciption\n        Label\n\n            Ready\n            This component is ready to use in production.\n            Ready\n\n            Beta\n            This component is stable, but could still change slightly.\n            Beta\n\n            Alpha\n            Use with caution. This component will most likely change.\n            Alpha\n\n            Deprecated\n            Don't use this in new projects. This component will be removed in the next major version of Rivet.\n            Deprecated\n\nCurrent component statuses\n",
        "rawContent": "## Status descriptions\n<table class=\"rvt-m-top-xl m-bottom-xxl\">\n    <caption class=\"sr-only\">Status description table</caption>\n    <thead>\n        <th scope=\"col\">Name</th>\n        <th scope=\"col\">Desciption</th>\n        <th scope=\"col\">Label</th>\n    </thead>\n    <tbody>\n        <tr>\n            <th scope=\"row\">Ready</th>\n            <td>This component is ready to use in production.</td>\n            <td><span class=\"rvt-badge rvt-badge--ready\">Ready</span></td>\n        </tr>\n        <tr>\n            <th scope=\"row\">Beta</th>\n            <td>This component is stable, but could still change slightly.</td>\n            <td><span class=\"rvt-badge rvt-badge--beta\">Beta</span></td>\n        </tr>\n        <tr>\n            <th scope=\"row\">Alpha</th>\n            <td>Use with caution. This component will most likely change.</td>\n            <td><span class=\"rvt-badge rvt-badge--alpha\">Alpha</span></td>\n        </tr>\n        <tr>\n            <th scope=\"row\">Deprecated</th>\n            <td><strong>Don't use this in new projects</strong>. This component will be removed in the next major version of Rivet.</td>\n            <td><span class=\"rvt-badge rvt-badge--deprecated\">Deprecated</span></td>\n        </tr>\n    </tbody>\n</table>\n\n## Current component statuses\n",
        "tags": [],
        "description": "Each component will go through phases in its lifecycle. Below is a breakdown of the component phases."
    },
    {
        "uri": "components/information/contributing",
        "title": "Contributing",
        "content": "Github issues\nWe’ll be using Github issues to keep track of new component submissions, bugs, design feedback, and any other suggestions related to the design system. To help us understand the kind of contribution you want to make, we ask that you first submit an issue on GitHub.\n\n{{}}Create an issue{{}}\n\nGuidelines\nHere are a few guidelines to follow when creating a new issue:\n\nGo to the Rivet source repository on GitHub.\nChoose the type of issue you would like to create.\nFill out the provided issue template to the best of your ability. If you are submitting a design concept for a new or existing component please attach a screenshot, a link to a mockup, or feel free to link to example HTML/CSS/JavaScript (a link to a pen on Codepen would be great!). We’re looking for anything that will demonstrate your concept here. Don’t worry if it’s unstyled or lacks visual design.\nAfter you have filled out the issue template click the Submit new issue button to create your new issue.\nOnce the issue is created it will move on to the review process.\n\nReview process\nCreating an issue is just a way to start a conversation that is visible to the whole team. Anyone should feel free to create a new issue, but before a new submission moves on to a formal review process we’ll ask that each one includes:\n\na fairly short descriptive title\nwhat will be gained by adding this design and will be lost if we don't?\na description of the design problem this component solves\nat least one of the following: screenshots/images of your rendered design, wireframes, design mockups, links to Codepen, jsFiddle, etc., Axure mockups, iPhone photo of a napkin sketch.\n    NOTE: If applicable, this should include a documented interaction flow, eg. states (hover, focus, click, drag...), error and success messages, etc.\nany other document, links, research you would like to include\ncontext (screenshots, links) if you have a specific use case for a proposed solution\n\nCollaboration\nIf you are a developer and want help with your submission from a designer, make sure to mention that when creating your issue and someone from the review team will help pair you up with a designer. Same goes for designers that want help from a developer.\n\nContent changes\nIf you are proposing a content change, please include a draft of the text content you're focusing on.\n\nProposed Status\nAfter the Github issue is created and the submission has enough information and supporting materials (i.e., the issue template is completely filled out), someone from the team will mark the issue as Proposed. Otherwise, someone from the team will ask the submitter for further information/documentation and mark the issue as needs more info.\n\nReview criteria\nOnce they have enough info, the team will do a review of the proposed design based on the following criteria:\n\nUsability — Is the interaction flow clearly documented? Is the pattern responsive? Does it follow commonly accepted best practices?\nFlexibility — Does the component meet the greatest number of use cases possible? In other words, is this a common pattern that occurs in lots of applications, or it solving a particular problem in one application?\nAccessibility — Is the pattern accessible to all intended audiences?\nVisual design — Is the contribution consistent with our visual style?\nContent — Does the pattern have plain language, correct spelling, and grammar? Does the author clearly describe actions?\n\nIf the team decides to not move forward with the design submission, the issue will be marked as archived with an explanation of why.\n",
        "rawContent": "## Github issues\nWe’ll be using Github issues to keep track of new component submissions, bugs, design feedback, and any other suggestions related to the design system. To help us understand the kind of contribution you want to make, we ask that you first [submit an issue on GitHub](https://github.com/indiana-university/rivet-source/issues/new/choose).\n\n{{<button url=\"https://github.com/indiana-university/rivet-source/issues/new/choose\" >}}Create an issue{{< /button >}}\n\n## Guidelines\nHere are a few guidelines to follow when creating a new issue:\n\n1. Go to the Rivet source repository on [GitHub](https://github.com/indiana-university/rivet-source/issues/new/choose).\n2. Choose the type of issue you would like to create.\n3. Fill out the provided issue template to the best of your ability. If you are submitting a design concept for a new or existing component please attach a screenshot, a link to a mockup, or feel free to link to example HTML/CSS/JavaScript (a link to a pen on Codepen would be great!). We’re looking for anything that will demonstrate your concept here. Don’t worry if it’s unstyled or lacks visual design.\n4. After you have filled out the issue template click the Submit new issue button to create your new issue.\n5. Once the issue is created it will move on to the review process.\n\n## Review process\nCreating an issue is just a way to start a conversation that is visible to the whole team. Anyone should feel free to create a new issue, but before a new submission moves on to a formal review process we’ll ask that each one includes:\n\n- a fairly short descriptive title\n- what will be gained by adding this design and will be lost if we don't?\n- a description of the design problem this component solves\n- at least one of the following: screenshots/images of your rendered design, wireframes, design mockups, links to [Codepen](http://codepen.io/), [jsFiddle](https://jsfiddle.net/), etc., Axure mockups, iPhone photo of a napkin sketch.\n    - **NOTE**: If applicable, this should include a documented interaction flow, eg. states (hover, focus, click, drag...), error and success messages, etc.\n- any other document, links, research you would like to include\n- context (screenshots, links) if you have a specific use case for a proposed solution\n\n### Collaboration\nIf you are a developer and want help with your submission from a designer, make sure to mention that when creating your issue and someone from the review team will help pair you up with a designer. Same goes for designers that want help from a developer.\n\n### Content changes\nIf you are proposing a content change, please include a draft of the text content you're focusing on.\n\n### Proposed Status\nAfter the Github issue is created and the submission has enough information and supporting materials (i.e., the issue template is completely filled out), someone from the team will mark the issue as _Proposed_. Otherwise, someone from the team will ask the submitter for further information/documentation and mark the issue as _needs more info_.\n\n### Review criteria\nOnce they have enough info, the team will do a review of the proposed design based on the following criteria:\n\n- **Usability** — Is the interaction flow clearly documented? Is the pattern responsive? Does it follow commonly accepted best practices?\n- **Flexibility** — Does the component meet the greatest number of use cases possible? In other words, is this a common pattern that occurs in lots of applications, or it solving a particular problem in one application?\n- **Accessibility** — Is the pattern accessible to all intended audiences?\n- **Visual design** — Is the contribution consistent with our visual style?\n- **Content** — Does the pattern have plain language, correct spelling, and grammar? Does the author clearly describe actions?\n\nIf the team decides to not move forward with the design submission, the issue will be marked as archived with an explanation of why.\n",
        "tags": [],
        "description": "If you have created a component you think would be useful to others or would like to make a suggestion, let us know."
    },
    {
        "uri": "components/information/roadmap",
        "title": "Roadmap",
        "content": "Our focus is to keep Rivet healthy, growing, and serving the people using it. To help us accomplish that, we've identified three areas where we should prioritize our efforts: Infrastructure; production; and documentation, education, and outreach. Although the specific tasks will come and go, the general categories of work will remain the same.\n\nTo that end, our roadmap focuses on higher-level objectives that will help us accomplish our goals.\n\nQ1: Processes and team organization\nWith our proposal to create a dedicated design system team approved, the early part of 2019 we’ll focus some of our time recruiting and hiring a full-time front-end developer/engineer that will be 100% dedicated to Rivet. The proposal also adds two other 50% dedicated Rivet teams members (from within UXO), so we’ll also spend early 2019 developing a plan for how we’ll organize ourselves to get work done as a team.\n\nQ1 Goals\nHire new front-end developer\nEstablish team project management processes and release schedule\n    Identify metrics for measuring success. What do we measure—adoption, satisfaction, improved user experience? How do we measure it?\n    Plan for regular releases in specific time increments\n    Build in dedicated time for bug fixes, tackling technical debt, etc. at regular increments\nIncrease visibility of public backlog. Possibly use Github API to pull backlog info into the Rivet website.\nEstablish a process for soliciting community feedback on public backlog items to help us better prioritize new features and requests. For example, create a regular communications schedule for asking community members to visit the public backlog and up vote or down vote requests using built-in Github reactions feature.\nEstablish an official QA process for new additions and updates to existing components/patterns and document it in an easily accessible location\n\nQ2: Rivet Community Workshops & information architecture overhaul\nIn the spring we’re planning the first Rivet Community Workshop. This workshop will be a one-day event where developers and designers can learn about Rivet, contribute to Rivet, and meet other developers using Rivet. We’ll be focusing on creating a workshop format that we can use going forward as we establish a regular (at least one per semester) workshop schedule.\n\nIn addition to planning and having our first community workshop, we’ll be reworking the information architecture of the the main Rivet documentation site. As Rivet has grown, it’s become clear that there’s a need for larger, more complex design patterns in addition to the current lower level components. We’re already in the early stages of design and planning for this IA overhaul. In the second quarter, we’ll build and launch these updates.\n\nQ2 Goals\nCreate content plan for both tracks (Coding track and Tutorial track) of community workshop.\nCommunications and outreach for workshop\nRestructure Documentation content to move toward high-level categories, e.g. Base styles, Components, Patterns, Templates\n\nQ3: Summer 2019 production sprint\nBy summer our goal is to have the Rivet team up to full speed. In between the spring and fall semesters, we’ll focus most of our efforts on production, including designing and building more complex patterns and templates.\n\nAs part of this production sprint, we’ll spend some time exploring what the future of Rivet might look like. For instance, how will Rivet and the IU Style Guide eventually merge together?\n\nQ3 Goals\nDesign, build, and document more complex design patterns, e.g. address form, date and time entry patterns, toolbars, complex navigation\nBuild and document common templates that can help developers get started building applications quickly without having to spend time making high-level layout decisions\nEvaluate the Rivet code base architecture and create a proposal for how we might restructure the next major version of Rivet. We want to make it easier to incorporate parts of Rivet into other projects, so this next version should be less monolithic and more modular. For instance, we’ll explore how Rivet’s form styles would work in the IU Framework/Style guide or other marketing projects.\n\nQ4: Fall Community Workshop and Rivet 2020\nIn the last quarter of 2019, we’ll hold another community workshop. In the early part of the fall, we’ll spend some time reflecting on what worked and what didn’t from our spring workshop, and we'll make any needed adjustments to the workshop content.\n\nToward the end of 2019, we’ll have had almost a full year with a dedicated design system team and hopefully a bit more insight into what we might be able to achieve in 2020. We’ll spend time measuring what we’ve accomplished and evaluating what worked and what didn’t.\n\nQ4 Goals\nCreate/revise content plan for both tracks (Coding track and Tutorial track) of community workshop.\nCommunications and outreach for community workshop\nRivet team retreat—planning for 2020 Roadmap\n",
        "rawContent": "Our focus is to keep Rivet healthy, growing, and serving the people using it. To help us accomplish that, we've identified three areas where we should prioritize our efforts: **Infrastructure**; **production**; and **documentation**, **education**, and **outreach**. Although the specific tasks will come and go, the general categories of work will remain the same.\n\nTo that end, our roadmap focuses on higher-level objectives that will help us accomplish our goals.\n\n## Q1: Processes and team organization\nWith our proposal to create a dedicated design system team approved, the early part of 2019 we’ll focus some of our time recruiting and hiring a full-time front-end developer/engineer that will be 100% dedicated to Rivet. The proposal also adds two other 50% dedicated Rivet teams members (from within UXO), so we’ll also spend early 2019 developing a plan for how we’ll organize ourselves to get work done as a team.\n\n### Q1 Goals\n- Hire new front-end developer\n- Establish team project management processes and release schedule\n    - Identify metrics for measuring success. What do we measure—adoption, satisfaction, improved user experience? How do we measure it?\n    - Plan for regular releases in specific time increments\n    - Build in dedicated time for bug fixes, tackling technical debt, etc. at regular increments\n- Increase visibility of public backlog. Possibly use Github API to pull backlog info into the Rivet website.\n- Establish a process for soliciting community feedback on public backlog items to help us better prioritize new features and requests. For example, create a regular communications schedule for asking community members to visit the public backlog and up vote or down vote requests using built-in Github reactions feature.\n- Establish an official QA process for new additions and updates to existing components/patterns and document it in an easily accessible location\n\n## Q2: Rivet Community Workshops & information architecture overhaul\nIn the spring we’re planning the first Rivet Community Workshop. This workshop will be a one-day event where developers and designers can learn about Rivet, contribute to Rivet, and meet other developers using Rivet. We’ll be focusing on creating a workshop format that we can use going forward as we establish a regular (at least one per semester) workshop schedule.\n\nIn addition to planning and having our first community workshop, we’ll be reworking the information architecture of the the main Rivet documentation site. As Rivet has grown, it’s become clear that there’s a need for larger, more complex design patterns in addition to the current lower level components. We’re already in the early stages of design and planning for this IA overhaul. In the second quarter, we’ll build and launch these updates.\n\n### Q2 Goals\n- Create content plan for both tracks (Coding track and Tutorial track) of community workshop.\n- Communications and outreach for workshop\n- Restructure Documentation content to move toward high-level categories, e.g. Base styles, Components, Patterns, Templates\n\n## Q3: Summer 2019 production sprint\nBy summer our goal is to have the Rivet team up to full speed. In between the spring and fall semesters, we’ll focus most of our efforts on production, including designing and building more complex patterns and templates.\n\nAs part of this production sprint, we’ll spend some time exploring what the future of Rivet might look like. For instance, how will Rivet and the IU Style Guide eventually merge together?\n\n### Q3 Goals\n- Design, build, and document more complex design patterns, e.g. address form, date and time entry patterns, toolbars, complex navigation\n- Build and document common templates that can help developers get started building applications quickly without having to spend time making high-level layout decisions\n- Evaluate the Rivet code base architecture and create a proposal for how we might restructure the next major version of Rivet. We want to make it easier to incorporate parts of Rivet into other projects, so this next version should be less monolithic and more modular. For instance, we’ll explore how Rivet’s form styles would work in the IU Framework/Style guide or other marketing projects.\n\n## Q4: Fall Community Workshop and Rivet 2020\nIn the last quarter of 2019, we’ll hold another community workshop. In the early part of the fall, we’ll spend some time reflecting on what worked and what didn’t from our spring workshop, and we'll make any needed adjustments to the workshop content.\n\nToward the end of 2019, we’ll have had almost a full year with a dedicated design system team and hopefully a bit more insight into what we might be able to achieve in 2020. We’ll spend time measuring what we’ve accomplished and evaluating what worked and what didn’t.\n\n### Q4 Goals\n- Create/revise content plan for both tracks (Coding track and Tutorial track) of community workshop.\n- Communications and outreach for community workshop\n- Rivet team retreat—planning for 2020 Roadmap\n\n\n\n",
        "tags": [],
        "description": "Our plans for Rivet in 2019 and beyond"
    },
    {
        "uri": "components/layout/box",
        "title": "Box",
        "content": "{{}}\nThe box is new as of 1.2.0. If you need help moving to 1.2.0, see our instructions for updating Rivet.\n{{}}\n\nDefault box\nThe most basic version of the box component includes a subtle rounded border and a white background. Padding and margins should be applied with Rivet's spacing utility classes.\n\nAdditional variants of the box component can be created using the elements described in the following sections.\n\n{{}}\n  This is basic box\n\n{{}}\n\nBox body\nNesting an element with the .rvt-box__body class inside the box will add equal amounts of padding to each side of the box.\n\n{{}}\n\n    This is a basic box\n\n{{}}\n\nBox header and footer\nOptional header and footer elements can be nested inside the box to create more complex layouts.\n\nIn this example, we are using the .rvt-boxheader, .rvt-boxbody, and .rvt-box__footer elements to visually group content.\n\n{{}}\n\n    Header text\n\n    This is a box with a header, a footer, and some content with a\n        link.\n\n    Footer text\n\n{{}}\n\nLight box variant\nYou can remove the subtle gray header and footer background by using the .rvt-box--light variant. This can be helpful in reducing visual clutter when using multiple box components on the same page.\n\n{{}}\n\n    Header text\n\n    This is a box with a header, a footer, and some content with a\n        link.\n\n    Footer text\n\n{{}}\n\nBox rows\nThe .rvt-box__row class adds a small amount of padding and a subtle top border. This works particularly well for displaying lists of content within a Box.\n\nBox rows with a list\nIn the following example, we're using Rivet's plain list utility class along with the .rvt-box__row class to style the list items.\n\n{{}}\n\n      A link in a row\n\n      Some text in a row\n\n      Some text in a row\n\n{{}}\n\nBox rows with generic elements\nBox rows can also be created using div elements if lists do not make sense semantically.\n\n{{}}\n\n      Plain box row one\n\n      Plain box row two\n\n      Plain box row three\n\n{{}}\n\n{{}}\nTo ensure correct styling, a series of box rows must be wrapped in a parent element, such as a ul or div. Do not wrap box rows in an element with the .rvt-box__body class applied, as the extra padding will prevent the rows from filling the full width of the box.\n{{}}\n\nCompact box variant\nThe compact variant of the box component reduces the amount of padding applied to a box's header, footer, and content. This variant can be useful in situations where you are displaying large amounts of data and need to conserve vertical space.\n\n{{}}\n\n    A box with rows\n\n      Some text in a row\n\n      Some text in a row\n\n      Some text in a row\n\n{{}}\n\nColored box variant\nThe box component also supports colored variants based on Rivet's alert color naming conventions.\n\nThe colored box variants should be used sparingly and only to indicate some sort of state (error, warning, success, etc.) or call out important information in your application.\n\nThere are four colored box variants that follow Rivet's alert color naming convention:\n\n.rvt-box--info\n.rvt-box--success\n.rvt-box--warning\n.rvt-box--danger\n\n{{}}\n\n    A box with rows\n\n      Some text in a row\n\n      Some text in a row\n\n      Some text in a row\n\n{{}}\n\nColored box row variants\nColors can also be applied to individual rows to call out state changes or important information:\n\n.rvt-box__row--info\n.rvt-box__row--success\n.rvt-box__row--warning\n.rvt-box__row--danger\n\nThe row variant modifier classes add a subtle background color and left border that matches each of Rivet's alert styles.\n\n{{}}\n\n    A box with rows\n\n      Default row\n\n      Info row variant\n\n      Success row variant\n\n      Warning row variant\n\n      Danger row variant\n\n{{}}\n\nCard variant\nThe card variant of the box component can be used along with Rivet's type scale utilities and spacing utilities to create basic card layouts. Adding the .rvt-box--card modifier class adds a subtle shadow to help visually separate the the box content from the background.\n\n{{}}\n\n    This is the card variant of a box with a body element\n\n{{}}\n\nCard image\nThe card variant can include an optional image. Nesting an img inside an element with the .rvt-box__image class will apply the proper sizing, cropping, and border radius.\n\n{{}}\n\n    Card title\n    This is the card variant of a box with a body element\n    Card link\n\n{{}}\n\n{{}}\nThe element with the .rvt-boximage class must be the first child of .rvt-box so that the image sits flush with the sides of the box (see above example). It should not be used inside elements with the .rvt-boxbody or .rvt-box__row classes.\n{{}}\n",
        "rawContent": "{{< alert variant=\"info\" title=\"New in Rivet 1.2.0\" >}}\nThe box is new as of 1.2.0. If you need help moving to 1.2.0, see our [instructions for updating Rivet](/components/#updating-the-rivet-npm-package\").\n{{< /alert >}}\n\n## Default box\nThe most basic version of the box component includes a subtle rounded border and a white background. Padding and margins should be applied with [Rivet's spacing utility classes]({{< ref \"/components/layout/spacing.md\" >}}).\n\nAdditional variants of the box component can be created using the elements described in the following sections.\n\n{{< example lang=\"html\" spacious=\"true\" >}}<div class=\"rvt-box\">\n  This is basic box\n</div>\n{{< /example >}}\n\n## Box body\nNesting an element with the `.rvt-box__body` class inside the box will add equal amounts of padding to each side of the box.\n\n{{< example lang=\"html\" spacious=\"true\" >}}<div class=\"rvt-box\">\n  <div class=\"rvt-box__body\">\n    This is a basic box\n  </div>\n</div>\n{{< /example >}}\n\n## Box header and footer\nOptional header and footer elements can be nested inside the box to create more complex layouts.\n\nIn this example, we are using the `.rvt-box__header`, `.rvt-box__body`, and `.rvt-box__footer` elements to visually group content.\n\n{{< example lang=\"html\" spacious=\"true\" >}}<div class=\"rvt-box\">\n  <div class=\"rvt-box__header\">\n    Header text\n  </div>\n  <div class=\"rvt-box__body\">\n    <p class=\"rvt-m-all-remove\">This is a box with a header, a footer, and some content with <a href=\"#\">a\n        link</a>.</p>\n  </div>\n  <div class=\"rvt-box__footer rvt-text-right\">\n    Footer text\n  </div>\n</div>\n{{< /example >}}\n\n## Light box variant\nYou can remove the subtle gray header and footer background by using the `.rvt-box--light` variant. This can be helpful in reducing visual clutter when using multiple box components on the same page.\n\n{{< example lang=\"html\" spacious=\"true\" >}}<div class=\"rvt-box rvt-box--light\">\n  <div class=\"rvt-box__header\">\n    Header text\n  </div>\n  <div class=\"rvt-box__body\">\n    <p class=\"rvt-m-all-remove\">This is a box with a header, a footer, and some content with <a href=\"#\">a\n        link</a>.</p>\n  </div>\n  <div class=\"rvt-box__footer rvt-text-right\">\n    Footer text\n  </div>\n</div>\n{{< /example >}}\n\n## Box rows\nThe `.rvt-box__row` class adds a small amount of padding and a subtle top border. This works particularly well for displaying lists of content within a Box.\n\n### Box rows with a list\nIn the following example, we're using Rivet's plain list utility class along with the `.rvt-box__row` class to style the list items.\n\n{{< example lang=\"html\" spacious=\"true\" >}}<div class=\"rvt-box\">\n  <ul class=\"rvt-plain-list\">\n    <li class=\"rvt-box__row\">\n      <a href=\"#\" class=\"rvt-link-bold\">A link in a row</a>\n    </li>\n    <li class=\"rvt-box__row rvt-box__row--selected\">\n      Some text in a row\n    </li>\n    <li class=\"rvt-box__row\">\n      Some text in a row\n    </li>\n  </ul>\n</div>\n{{< /example >}}\n\n### Box rows with generic elements\nBox rows can also be created using `div` elements if lists do not make sense semantically.\n\n{{< example lang=\"html\" spacious=\"true\" >}}\n<div class=\"rvt-box\">\n  <div>\n    <div class=\"rvt-box__row\">\n      Plain box row one\n    </div>\n    <div class=\"rvt-box__row\">\n      Plain box row two\n    </div>\n    <div class=\"rvt-box__row\">\n      Plain box row three\n    </div>\n  </div>\n</div>\n{{< /example >}}\n\n{{< alert variant=\"warning\" title=\"Box rows must be wrapped in a parent element\" >}}\nTo ensure correct styling, a series of box rows must be wrapped in a parent element, such as a `ul` or `div`. Do not wrap box rows in an element with the `.rvt-box__body` class applied, as the extra padding will prevent the rows from filling the full width of the box.\n{{< /alert >}}\n\n## Compact box variant\nThe compact variant of the box component reduces the amount of padding applied to a box's header, footer, and content. This variant can be useful in situations where you are displaying large amounts of data and need to conserve vertical space.\n\n{{< example lang=\"html\" spacious=\"true\">}}<div class=\"rvt-box rvt-box--compact\">\n  <div class=\"rvt-box__header\">\n    A box with rows\n  </div>\n  <ul class=\"rvt-plain-list\">\n    <li class=\"rvt-box__row\">\n      Some text in a row\n    </li>\n    <li class=\"rvt-box__row\">\n      Some text in a row\n    </li>\n    <li class=\"rvt-box__row\">\n      Some text in a row\n    </li>\n  </ul>\n</div>\n{{< /example >}}\n\n## Colored box variant\nThe box component also supports colored variants based on [Rivet's alert color naming conventions]({{< ref \"/components/overlays/alerts.md\" >}}).\n\nThe colored box variants should be used sparingly and only to indicate some sort of state (error, warning, success, etc.) or call out important information in your application.\n\nThere are four colored box variants that follow Rivet's alert color naming convention:\n\n- `.rvt-box--info`\n- `.rvt-box--success`\n- `.rvt-box--warning`\n- `.rvt-box--danger`\n\n{{< example lang=\"html\" spacious=\"true\">}}<div class=\"rvt-box rvt-box--danger\">\n  <div class=\"rvt-box__header\">\n    A box with rows\n  </div>\n  <ul class=\"rvt-plain-list\">\n    <li class=\"rvt-box__row\">\n      Some text in a row\n    </li>\n    <li class=\"rvt-box__row\">\n      Some text in a row\n    </li>\n    <li class=\"rvt-box__row\">\n      Some text in a row\n    </li>\n  </ul>\n</div>\n{{< /example >}}\n\n### Colored box row variants\nColors can also be applied to individual rows to call out state changes or important information:\n\n- `.rvt-box__row--info`\n- `.rvt-box__row--success`\n- `.rvt-box__row--warning`\n- `.rvt-box__row--danger`\n\nThe row variant modifier classes add a subtle background color and left border that matches each of Rivet's alert styles.\n\n{{< example lang=\"html\" spacious=\"true\">}}<div class=\"rvt-box\">\n  <div class=\"rvt-box__header\">\n    A box with rows\n  </div>\n  <div>\n    <div class=\"rvt-box__row\">\n      Default row\n    </div>\n    <div class=\"rvt-box__row rvt-box__row--info\">\n      Info row variant\n    </div>\n    <div class=\"rvt-box__row rvt-box__row--success\">\n      Success row variant\n    </div>\n    <div class=\"rvt-box__row rvt-box__row--warning\">\n      Warning row variant\n    </div>\n    <div class=\"rvt-box__row rvt-box__row--danger\">\n      Danger row variant\n    </div>\n  </div>\n</div>\n{{< /example >}}\n\n## Card variant\nThe card variant of the box component can be used along with Rivet's [type scale utilities]({{< ref \"/components/layout/typography.md\" >}}) and [spacing utilities]({{< ref \"/components/layout/spacing.md\" >}}) to create basic card layouts. Adding the `.rvt-box--card` modifier class adds a subtle shadow to help visually separate the the box content from the background.\n\n{{< example lang=\"html\" spacious=\"true\" >}}<div class=\"rvt-box rvt-box--card\">\n  <div class=\"rvt-box__body\">\n    This is the card variant of a box with a body element\n  </div>\n</div>\n{{< /example >}}\n\n### Card image\nThe card variant can include an optional image. Nesting an `img` inside an element with the `.rvt-box__image` class will apply the proper sizing, cropping, and border radius.\n\n{{< example lang=\"html\" spacious=\"true\">}}<div class=\"rvt-box rvt-box--card\">\n  <div class=\"rvt-box__image\">\n    <img src=\"http://www.fillmurray.com/g/800/450\" alt=\"\">\n  </div>\n  <div class=\"rvt-box__body\">\n    <h2 class=\"rvt-ts-20 rvt-text-bold\">Card title</h2>\n    <p class=\"rvt-m-top-xxs\">This is the card variant of a box with a body element</p>\n    <a href=\"#\" class=\"rvt-link-bold\">Card link</a>\n  </div>\n</div>\n{{< /example >}}\n\n{{< alert variant=\"warning\" title=\"Card images must be the first child\" >}}\nThe element with the `.rvt-box__image` class must be the first child of `.rvt-box` so that the image sits flush with the sides of the box (see above example). It should not be used inside elements with the `.rvt-box__body` or `.rvt-box__row` classes.\n{{< /alert >}}\n",
        "tags": [],
        "description": "The box component can be used to help visually group related content"
    },
    {
        "uri": "components/layout/grid",
        "title": "Grid",
        "content": "\nAbout the grid\nThe Rivet grid is a mobile-first grid system built with flexbox. It is based on five screen sizes and uses CSS classes to specify how many columns the grid should have at each of the breakpoints listed in the following documentation.\n\nGrid breakpoints\nSee the Setting column widths section for instructions on how to apply column widths at the different breakpoint sizes.\n\n{{}}{{}}\n\n{{}}\nPlease note that using any horizontal (rvt-m-left-, rvt-p-left-, rvt-m-right-, and rvt-p-right-) spacing utilities on the .rvt-grid__item-*s will throw off the grid gutters and maybe break your layout.\n{{}}\n\nThe container\nThe .rvt-container is the basic layout unit in Rivet. A basic .rvt-container element is fluid by default. It will take up the full width of the viewport with a default of 1.5rem of padding on the left and right sides.\n\nThe container is meant to be a generic wrapper to add enough padding to the content of your application so that it doesn't bump up against the sides of the viewport. The container can be used as is without any other grid items inside, but it is required to wrap all other grid elements.\n\n{{}}\n\n            Grid item\n\n{{}}\n\nContainer sizes\nIf you need to constrain the .rvt-container to a fixed size there are four modifier classes that will set a max-width on the container.\n\nThey are:\n\n.rvt-container--freshman = 640px\n.rvt-container--sophomore = 1024px\n.rvt-container--junior = 1140px\n.rvt-container--senior = 1380px\n\n{{}}\n\n        .rvt-container--freshman\n\n        .rvt-container--sophomore\n\n        .rvt-container--junior\n\n        .rvt-container--senior\n\n{{}}\n\nCentering a container\nTo center a container that was given a max-width using the modifier classes above, you can add the modifier class .rvt-container--center.\n\n{{}}\n\n            .rvt-container--center\n\n{{}}\n\nAutomatic columns\nThe rivet grid uses the power of flexbox to evenly distribute children marked up with the CSS class .rvt-griditem inside of a parent .rvt-grid  container. So a .rvt-grid parent with four .rvt-griditem elements creates four columns with equal widths. See the example below.\n\n{{}}\n\n            Grid item\n\n            Grid item\n\n            Grid item\n\n            Grid item\n\n{{}}\n\nResponsive automatic columns\nAutomatic columns will be distributed equally across all screen sizes by default. You can use additional responsive auto grid CSS classes to specify the screen size at which you would like your grid to become an auto grid.\n\nIn the example below, we've used the -lg suffix on the .rvt-griditem CSS class. This will make a grid that starts out collapsed into a single column on all screens up to large screens (1080px wide), at which point it will become an auto grid and each .rvt-griditem-lg will become an evenly distributed column.\n\nThis convention will work for any of Rivet's named breakpoints: -sm, -md, -lg, -xl, -xxl. The example below will start out stacked on small screens and become a grid of five equal-width columns at large screens (1080px) and wider.\n\n{{}}\n\n            Auto grid item\n\n            Auto grid item\n\n            Auto grid item\n\n            Auto grid item\n\n            Auto grid item\n\n{{}}\n\nSetting column widths\n\nYou can set a specific number of columns you want grid items to span by including the number of columns in the responsive grid class. For example, adding the class .rvt-grid__item-6-md-up would make a grid item span six columns at medium screens (740px) and larger.\n\nWhen you explicitly set column widths, remember that the total number of columns should always equal 12.\n\n{{}}\n\n            4 columns medium and up\n\n            4 columns medium and up\n\n            4 columns medium and up\n\n{{}}\n\nMixing column widths with auto columns\nIt's also possible to mix and match specified columns with .rvt-grid__item auto columns. The grid items with specified columns will span the specified amount of columns and any auto grid items will fill the remaining space.\n\nIt's important to note that the auto grid items will stack at whichever grid breakpoint you specify on the non-auto grid item(s). In the example below we are using .rvt-grid__item-6-md-up to set a width of six columns on medium screens and larger, so the auto grid items will inherit the same behavior.\n\n{{}}\n\n            .rvt-grid__item\n\n            .rvt-grid__item-6-md-up\n\n            .rvt-grid__item\n\n{{}}\n\nPush and pull\nWhen you need to change the visual order of the grid items, you can use .rvt-griditem-push- and .rvt-griditem-pull- modifiers.\n\n{{}}\n\n            I'm first in the source order\n\n            I'm second in the source order\n\n{{}}\n\nRight-align last item\nYou can right-align the last item in a .rvt-grid by adding the .rvt-griditem--last modifier to any grid item. This can be helpful when using set column widths that add up to less than 12 columns. Using the .rvt-griditem--last will push the last .rvt-grid__item-* to the right, leaving the remaining columns as extra space.\n\n{{}}\n\n            Four\n\n            Seven with one left over\n\n{{}}\n\nNesting\nYou can nest new .rvt-grid blocks inside of .rvt-grid__item-* elements if you need more control over your layout.\n\n{{}}\n\n                Level one\n\n                            Level Two\n\n                        Level Two\n\n                Level one\n\n{{}}\n",
        "rawContent": "\n## About the grid\nThe Rivet grid is a mobile-first grid system built with [flexbox](https://www.w3.org/TR/css-flexbox-1/). It is based on five screen sizes and uses CSS classes to specify how many columns the grid should have at each of the breakpoints listed in the following documentation. \n\n### Grid breakpoints\nSee the [_Setting column widths_](#setting-column-widths) section for instructions on how to apply column widths at the different breakpoint sizes.\n\n{{< breakpoints >}}{{< /breakpoints >}}\n\n{{< alert variant=\"warning\" title=\"Grid and spacing utilities\" >}}\nPlease note that using any horizontal (`rvt-m-left-*`, `rvt-p-left-*`, `rvt-m-right-*`, and `rvt-p-right-*`) [spacing utilities](../spacing) on the `.rvt-grid__item-*`s will throw off the grid gutters and maybe break your layout.\n{{< /alert >}}\n\n## The container\nThe `.rvt-container` is the basic layout unit in Rivet. A basic `.rvt-container` element is fluid by default. It will take up the full width of the viewport with a default of `1.5rem` of padding on the left and right sides.\n\nThe container is meant to be a generic wrapper to add enough padding to the content of your application so that it doesn't bump up against the sides of the viewport. The container can be used as is without any other grid items inside, but it **is required to wrap all other grid elements**.\n\n{{< example lang=\"html\" >}}<div class=\"rvt-container\">\n    <div class=\"rvt-grid\">\n        <div class=\"rvt-grid__item\">\n            <span>Grid item</span>\n        </div>\n    </div>\n</div>\n{{< /example >}}\n\n### Container sizes\nIf you need to constrain the `.rvt-container` to a fixed size there are four modifier classes that will set a `max-width` on the container.\n\nThey are:\n\n- `.rvt-container--freshman` = 640px\n- `.rvt-container--sophomore` = 1024px\n- `.rvt-container--junior` = 1140px\n- `.rvt-container--senior` = 1380px\n\n{{< example lang=\"html\" >}}<div class=\"rvt-container rvt-container--freshman\">\n    <div class=\"rvt-grid\">\n        <div class=\"rvt-grid__item\"><span><code>.rvt-container--freshman</code></span></div>\n    </div>\n</div>\n<div class=\"rvt-container rvt-container--sophomore\">\n    <div class=\"rvt-grid\">\n        <div class=\"rvt-grid__item\"><span><code>.rvt-container--sophomore</code></span></div>\n    </div>\n</div>\n<div class=\"rvt-container rvt-container--junior\">\n    <div class=\"rvt-grid\">\n        <div class=\"rvt-grid__item\"><span><code>.rvt-container--junior</code></span></div>\n    </div>\n</div>\n<div class=\"rvt-container rvt-container--senior\">\n    <div class=\"rvt-grid\">\n        <div class=\"rvt-grid__item\"><span><code>.rvt-container--senior</code></span></div>\n    </div>\n</div>\n{{< /example >}}\n\n### Centering a container\nTo center a container that was given a max-width using the modifier classes above, you can add the modifier class `.rvt-container--center`.\n\n{{< example lang=\"html\" >}}<div class=\"rvt-container rvt-container--freshman rvt-container--center\">\n    <div class=\"rvt-grid\">\n        <div class=\"rvt-grid__item\">\n            <span>.rvt-container--center</span>\n        </div>\n    </div>\n</div>\n{{< /example >}}\n\n## Automatic columns\nThe rivet grid uses the power of flexbox to evenly distribute children marked up with the CSS class `.rvt-grid__item` inside of a parent `.rvt-grid`  container. So a `.rvt-grid` parent with four `.rvt-grid__item` elements creates four columns with equal widths. See the example below.\n\n{{< example lang=\"html\" >}}<div class=\"rvt-container\">\n    <div class=\"rvt-grid\">\n        <div class=\"rvt-grid__item\">\n            <span>Grid item</span>\n        </div>\n        <div class=\"rvt-grid__item\">\n            <span>Grid item</span>\n        </div>\n        <div class=\"rvt-grid__item\">\n            <span>Grid item</span>\n        </div>\n        <div class=\"rvt-grid__item\">\n            <span>Grid item</span>\n        </div>\n    </div>\n</div>\n{{< /example >}}\n\n### Responsive automatic columns\nAutomatic columns will be distributed equally across all screen sizes by default. You can use additional responsive auto grid CSS classes to specify the screen size at which you would like your grid to become an auto grid.\n\nIn the example below, we've used the `-lg` suffix on the `.rvt-grid__item` CSS class. This will make a grid that starts out collapsed into a single column on all screens up to large screens (1080px wide), at which point it will become an auto grid and each `.rvt-grid__item-lg` will become an evenly distributed column.\n\nThis convention will work for any of Rivet's named breakpoints: `-sm`, `-md`, `-lg`, `-xl`, `-xxl`. The example below will start out stacked on small screens and become a grid of five equal-width columns at large screens (1080px) and wider.\n\n{{< example lang=\"html\" >}}<div class=\"rvt-container\">\n    <div class=\"rvt-grid\">\n        <div class=\"rvt-grid__item-lg\">\n            <span>Auto grid item</span>\n        </div>\n        <div class=\"rvt-grid__item-lg\">\n            <span>Auto grid item</span>\n        </div>\n        <div class=\"rvt-grid__item-lg\">\n            <span>Auto grid item</span>\n        </div>\n        <div class=\"rvt-grid__item-lg\">\n            <span>Auto grid item</span>\n        </div>\n        <div class=\"rvt-grid__item-lg\">\n            <span>Auto grid item</span>\n        </div>\n    </div>\n</div>\n{{< /example >}}\n\n## Setting column widths\n\nYou can set a specific number of columns you want grid items to span by including the number of columns in the responsive grid class. For example, adding the class `.rvt-grid__item-6-md-up` would make a grid item span six columns at medium screens (740px) and larger.\n\nWhen you explicitly set column widths, remember that the total number of columns **should always equal 12**.\n\n{{< example lang=\"html\" >}}<div class=\"rvt-container rvt-container--junior rvt-container--center\">\n    <div class=\"rvt-grid\">\n        <div class=\"rvt-grid__item-4-md-up\">\n            <span>4 columns medium and up</span>\n        </div>\n        <div class=\"rvt-grid__item-4-md-up\">\n            <span>4 columns medium and up</span>\n        </div>\n        <div class=\"rvt-grid__item-4-md-up\">\n            <span>4 columns medium and up</span>\n        </div>\n    </div>\n</div>\n{{< /example >}}\n\n### Mixing column widths with auto columns\nIt's also possible to mix and match specified columns with `.rvt-grid__item` auto columns. The grid items with specified columns will span the specified amount of columns and any auto grid items will fill the remaining space.\n\nIt's important to note that the auto grid items will stack at whichever grid breakpoint you specify on the non-auto grid item(s). In the example below we are using `.rvt-grid__item-6-md-up` to set a width of six columns on medium screens and larger, so the auto grid items will inherit the same behavior.\n\n{{< example lang=\"html\" >}}<div class=\"rvt-container\">\n    <div class=\"rvt-grid\">\n        <div class=\"rvt-grid__item\">\n            <span><code>.rvt-grid__item</code></span>\n        </div>\n        <div class=\"rvt-grid__item-6-md-up\">\n            <span><code>.rvt-grid__item-6-md-up</code></span>\n        </div>\n        <div class=\"rvt-grid__item\">\n            <span><code>.rvt-grid__item</code></span>\n        </div>\n    </div>\n</div>\n{{< /example >}}\n\n## Push and pull\nWhen you need to change the visual order of the grid items, you can use `.rvt-grid__item-push-*` and `.rvt-grid__item-pull-*` modifiers.\n\n{{< example lang=\"html\" >}}<div class=\"rvt-container\">\n    <div class=\"rvt-grid\">\n        <div class=\"rvt-grid__item-4-md-up rvt-grid__item-push-8-md\">\n            <span>I'm first in the source order</span>\n        </div>\n        <div class=\"rvt-grid__item-8-md-up rvt-grid__item-pull-4-md\">\n            <span>I'm second in the source order</span>\n        </div>\n    </div>\n</div>\n{{< /example >}}\n\n### Right-align last item\nYou can right-align the last item in a `.rvt-grid` by adding the `.rvt-grid__item--last` modifier to any grid item. This can be helpful when using set column widths that add up to less than 12 columns. Using the `.rvt-grid__item--last` will push the last `.rvt-grid__item-*` to the right, leaving the remaining columns as extra space.\n\n{{< example lang=\"html\" >}}<div class=\"rvt-container\">\n    <div class=\"rvt-grid\">\n        <div class=\"rvt-grid__item-4-sm-up\">\n            <span>Four</span>\n        </div>\n        <div class=\"rvt-grid__item-7-sm-up rvt-grid__item--last\">\n            <span>Seven with one left over</span>\n        </div>\n    </div>\n</div>\n{{< /example >}}\n\n## Nesting\nYou can nest new `.rvt-grid` blocks inside of `.rvt-grid__item-*` elements if you need more control over your layout.\n\n{{< example lang=\"html\" >}}<div class=\"rvt-container\">\n    <div class=\"rvt-grid\">\n        <div class=\"rvt-grid__item-7-md-up rvt-grid__item-9-lg-up\">\n            <div style=\"background-color: #dce3ee; padding: .75rem;\">\n                Level one\n                <div class=\"rvt-grid\">\n                    <div class=\"rvt-grid__item-7-md-up rvt-grid__item-9-lg-up\">\n                        <div style=\"background-color: #006298; color: #fff;\">\n                            Level Two\n                        </div>\n                    </div>\n                    <div class=\"rvt-grid__item-5-md-up rvt-grid__item-3-lg-up\">\n                        <div style=\"background-color: #006298; color: #fff;\">Level Two</div>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div class=\"rvt-grid__item-5-md-up rvt-grid__item-3-lg-up\">\n            <div style=\"background-color: #dce3ee; padding: .75rem;\">\n                Level one\n            </div>\n        </div>\n    </div>\n</div>\n{{< /example >}}\n",
        "tags": [],
        "description": "A 12 column responsive grid with support for automatic columns that makes it easy to lay out your application."
    },
    {
        "uri": "components/layout/panels",
        "title": "Panels",
        "content": "{{}}\nThe panel component will be removed in the next major version of Rivet in favor of the new box component. See the box component documentation for more information.\n{{}}\n\nDefault panel\nThe default panel in Rivet has light gray background that can be used to help call out content against the default white stage area.\n\n{{}}\n    Voluptates quas voluptas a est est ut nisi. Laborum debitis perferendis voluptatem. Ut nemo sint itaque qui harum. Id unde qui architecto praesentium quo adipisci vero. Eaque deserunt voluptatum delectus eveniet quas aut modi quo. Exercitationem non voluptatem temporibus.\n\n{{}}\n\nLight modifier\nYou can also create a panel with a white background by adding the rvt-panel--light modifier. The light panel can be used when your application has a light gray background.\n\n{{}}\n\n    Voluptates quas voluptas a est est ut nisi. Laborum debitis perferendis voluptatem. Ut nemo sint itaque qui harum. Id unde qui architecto praesentium quo adipisci vero. Eaque deserunt voluptatum delectus eveniet quas aut modi quo. Exercitationem non voluptatem temporibus.\n\n{{}}\n",
        "rawContent": "{{< alert variant=\"danger\" title=\"The Panel component is deprecated\" >}}\nThe _panel_ component will be removed in the next major version of Rivet in favor of the new box component. See [the box component documentation]({{< ref \"/components/layout/box\" >}}) for more information.\n{{< /alert >}}\n\n## Default panel\nThe default panel in Rivet has light gray background that can be used to help call out content against the default white stage area.\n\n{{< example lang=\"html\" >}}<div class=\"rvt-panel\">\n    <p class=\"rvt-m-all-remove\">Voluptates quas voluptas a est est ut nisi. Laborum debitis perferendis voluptatem. Ut nemo sint itaque qui harum. Id unde qui architecto praesentium quo adipisci vero. Eaque deserunt voluptatum delectus eveniet quas aut modi quo. Exercitationem non voluptatem temporibus.</p>\n</div>\n{{< /example >}}\n\n## Light modifier\nYou can also create a panel with a white background by adding the `rvt-panel--light` modifier. The light panel can be used when your application has a light gray background.\n\n{{< example lang=\"html\" background=\"#f7f7f7\" >}}\n<div class=\"rvt-panel rvt-panel--light\">\n    <p class=\"rvt-m-all-remove\">Voluptates quas voluptas a est est ut nisi. Laborum debitis perferendis voluptatem. Ut nemo sint itaque qui harum. Id unde qui architecto praesentium quo adipisci vero. Eaque deserunt voluptatum delectus eveniet quas aut modi quo. Exercitationem non voluptatem temporibus.</p>\n</div>\n{{< /example >}}\n",
        "tags": [],
        "description": "Use panels to help group content visually or call attention to parts of your application."
    },
    {
        "uri": "components/layout/spacing",
        "title": "Spacing",
        "content": "About spacing\nTo maintain consistent spacing between components and to help create a sense of vertical rhythm, we have created a spacing system based on .5rem (8px) unit. Margins and padding can be applied using a set of CSS utility classes to add or remove margin and padding from any element.\n\nSpacing examples\n{{}}{{}}\n\nSpacing Sass variables\nIf you are using Rivet's Sass files you can directly access any spacing unit by its variable name. The spacing unit variables follow the same naming conventions as all of Rivet's spacing utility classes.\n\nVisit the Sass getting started page for a complete list of Rivet's Sass variables.\n\n{{}}// Global spacing units\n\n$spacing-unit: .5rem;        // 8px\n\n$xxs: $spacing-unit/2;       // 4px\n$xs: $spacing-unit;          // 8px\n$sm: $spacing-unit * 2;      // 16px Base\n$md: $spacing-unit * 3;      // 24px\n$lg: $spacing-unit * 4;      // 32px\n$xl: $spacing-unit * 5;      // 40px\n$xxl: $spacing-unit * 8;     // 64px\n{{}}\n\nImplementation\nThe CSS classes for the spacing system use the following conventions:\n\nrvt = namespace\nm, p = margin, padding\ntop, right, bottom, left = the top, right, bottom, left side of the element\ntb = Top and bottom of the element (e.g. rvt-m-tb-xl)\nlr = Left and right of the element (e.g. rvt-p-lr-md)\nxs = Extra Small (8px/.5rem)\nsm = Small (16px/1rem)\nmd = Medium (24px/1.5rem)\nlg = Large (32px/2rem)\nxl = Extra large (40px/2.5rem)\nxxl = Extra extra large (48px/3rem)\nnone = Remove margin/padding from any of the previous combinations\n\nSo the class .rvt-m-top-sm would add 16px/1rem of margin on all screen sizes to the top of the element it was applied to.\n\nResponsive spacing\nEach spacing utility class also comes with a set of modifiers that allow you to adjust spacing at different screen sizes. Take the following div\n\n{{}}\n\n{{}}\n\nWith these spacing classes applied, it would have 16px/1rem of bottom padding at all screen sizes and 32px/2rem of bottom padding on large screens (1080px wide) and up.\n\nSpacing modifiers\nAll spacing utilities described above have the following responsive modifiers available to them:\n\n-sm-up - screens 480–740px and wider\n-md-up - screens 740–1080px and wider\n-lg-up - screens 1080–1260px and wider\n-xl-up - screens 1260–1400px and wider\n-xxl-up - screens 1400px and wider\n\n{{}}\nSee the documentation about Rivet's global breakpoints in the grid documentation.\n{{}}\n\nResponsive removal of spacing\nSometimes you may need to totally remove the margin or padding of an element at different screen sizes. The margin/padding removal utility classes use the following pattern:\n\n.rvt-1-none-2-up\n\n*1 = m (margin) or p (padding)\n*2 = one of the following breakpoints sm, md, lg, xl, xxl\n\nResponsive spacing example\n{{}}\n\n      This box will have xxl top margin on small screens and no margin on md screens and up.\n\n{{}}\n\nAdd spacing to all sides\nUsing the size conventions above you could apply the class .rvt-p-all-xl to add an Extra large amount (40px/2.5rem) to both the top and bottom of an element.\n",
        "rawContent": "## About spacing\nTo maintain consistent spacing between components and to help create a sense of vertical rhythm, we have created a spacing system based on `.5rem` (8px) unit. Margins and padding can be applied using a set of CSS utility classes to add or remove margin and padding from any element.\n\n### Spacing examples\n{{< spacing >}}{{< /spacing >}}\n\n## Spacing Sass variables\nIf you are using [Rivet's Sass](https://github.com/indiana-university/rivet-source/blob/develop/src/sass/core/_variables.scss#L325) files you can directly access any spacing unit by its variable name. The spacing unit variables follow the same naming conventions as all of Rivet's spacing utility classes.\n\n[Visit the Sass getting started page]({{< relref \"sass.md\" >}}) for a complete list of Rivet's Sass variables.\n\n{{< code lang=\"scss\" >}}// Global spacing units\n\n$spacing-unit: .5rem;        // 8px\n\n$xxs: $spacing-unit/2;       // 4px\n$xs: $spacing-unit;          // 8px\n$sm: $spacing-unit * 2;      // 16px Base\n$md: $spacing-unit * 3;      // 24px\n$lg: $spacing-unit * 4;      // 32px\n$xl: $spacing-unit * 5;      // 40px\n$xxl: $spacing-unit * 8;     // 64px\n{{</ code >}}\n\n## Implementation\nThe CSS classes for the spacing system use the following conventions:\n\n- `rvt` = namespace\n- `m`, `p` = margin, padding\n- `top`, `right`, `bottom`, `left` = the top, right, bottom, left side of the element\n- `tb` = **Top and bottom** of the element (e.g. `rvt-m-tb-xl`)\n- `lr` = **Left and right** of the element (e.g. `rvt-p-lr-md`)\n- `xs` = Extra Small (8px/.5rem)\n- `sm` = Small (16px/1rem)\n- `md` = Medium (24px/1.5rem)\n- `lg` = Large (32px/2rem)\n- `xl` = Extra large (40px/2.5rem)\n- `xxl` = Extra extra large (48px/3rem)\n- `none` = Remove margin/padding from any of the previous combinations\n\nSo the class `.rvt-m-top-sm` would add 16px/1rem of margin on all screen sizes to the top of the element it was applied to.\n\n### Responsive spacing\nEach spacing utility class also comes with a set of modifiers that allow you to adjust spacing at different screen sizes. Take the following `div`\n\n{{< code >}}<div class=\"rvt-p-bottom-sm rvt-p-bottom-lg-lg-up\">\n    <!-- markup -->\n</div>\n{{< /code >}}\n\nWith these spacing classes applied, it would have 16px/1rem of bottom padding at all screen sizes and 32px/2rem of bottom padding on large screens (1080px wide) and up.\n\n### Spacing modifiers\nAll spacing utilities described above have the following responsive modifiers available to them:\n\n- `-sm-up` - screens **480–740px** and wider\n- `-md-up` - screens **740–1080px** and wider\n- `-lg-up` - screens **1080–1260px** and wider\n- `-xl-up` - screens **1260–1400px** and wider\n- `-xxl-up` - screens **1400px** and wider\n\n{{< alert variant=\"info\" title=\"Rivet breakpoints\" >}}\nSee the documentation about Rivet's global breakpoints in [the grid documentation](../grid/#grid-breakpoints).\n{{< /alert >}}\n\n#### Responsive removal of spacing\nSometimes you may need to totally remove the margin or padding of an element at different screen sizes. The margin/padding removal utility classes use the following pattern:\n\n`.rvt-*1-none-*2-up`\n\n- `*1` = `m` (margin) or `p` (padding)\n- `*2` = one of the following breakpoints `sm`, `md`, `lg`, `xl`, `xxl`\n\n#### Responsive spacing example\n{{< example >}}<div class=\"rvt-m-top-xxl rvt-m-top-none-lg-up\">\n  <div class=\"rvt-box\">\n    <div class=\"rvt-box__body\">\n      <p>This box will have xxl top margin on small screens and no margin on md screens and up.</p>\n    </div>\n  </div>\n</div>\n{{< /example >}}\n\n### Add spacing to all sides\nUsing the size conventions above you could apply the class `.rvt-p-all-xl` to add an Extra large amount (40px/2.5rem) to both the top and bottom of an element.\n",
        "tags": [],
        "description": "A robust set of responsive spacing utilities to help fine-tune your layout."
    },
    {
        "uri": "components/layout/typography",
        "title": "Typography",
        "content": "\nAbout the type scale\nTypography is the core component of any interface. Rivet uses a defined Major Second type scale that has been rounded to the nearest whole pixel value. Using sizes from this scale will help create a hierarchy and consistency throughout your application.\n\nType scale examples\n{{}}{{}}\n\nType scale Sass variables\nIf you are using Rivet's Sass files you can directly access any value in the Rivet type scale by its variable name. All of the type scale values are stored in a Sass map that we use to produce the type scale utility classes, including the aliases listed in the following documentation.\n\nVisit the Sass getting started page for a complete list of Rivet's Sass variables.\n\n{{}}// Main Sass map\n\n$type-sizes: (\n  12: .75rem,\n  xxs: .75rem,\n  14: .875rem,\n  xs: .875rem,\n  16: 1rem,\n  base: 1rem,\n  18: 1.125rem,\n  20: 1.25rem,\n  sm: 1.25rem,\n  23: 1.4375rem,\n  26: 1.625rem,\n  md: 1.625rem,\n  29: 1.8125rem,\n  32: 2rem,\n  lg: 2rem,\n  36: 2.25rem,\n  41: 2.5625rem,\n  xl: 2.5625rem,\n  46: 2.875rem,\n  52: 3.25rem,\n  xxl: 3.25rem,\n)\n{{}}\n\nFrom the main Sass map we then create shortcut variables for each type size, as well as a set of memorable alias variables e.g. -xxs, -xs, -sm, -md, -lg, -xl, -xxl.\n\n{{}}// Type Size variables\n\n$ts-12: map-get($type-sizes, 12);\n$ts-14: map-get($type-sizes, 14);\n$ts-16: map-get($type-sizes, 16);\n$ts-18: map-get($type-sizes, 18);\n$ts-20: map-get($type-sizes, 20);\n$ts-23: map-get($type-sizes, 23);\n$ts-26: map-get($type-sizes, 26);\n$ts-29: map-get($type-sizes, 29);\n$ts-32: map-get($type-sizes, 32);\n$ts-36: map-get($type-sizes, 36);\n$ts-41: map-get($type-sizes, 41);\n$ts-46: map-get($type-sizes, 46);\n$ts-52: map-get($type-sizes, 52);\n\n// Type scale aliases\n\n$ts-xxs: $ts-12;\n$ts-xs: $ts-14;\n$ts-base: $ts-16;\n$ts-sm: $ts-20;\n$ts-md: $ts-26;\n$ts-lg: $ts-32;\n$ts-xl: $ts-41;\n$ts-xxl: $ts-52;\n{{}}\n\nUsing typography Sass variables\nHere's an example of how you might use the type scale Sass variables when customizing Rivet:\n\n{{}}.custom-heading {\n  font-size: $ts-26; // Font size = 26px/1.625rem\n  font-weight: 700;\n}\n{{}}\n\nTypeface\nBenton Sans is an official IU font and is available for free to all IU schools, departments, offices, and affiliated units.\n\nFont weight\nFont weight can be used to emphasize different parts of your interface and help enforce visual hierarchy. Rivet uses Benton Sans Regular and Benton Sans Bold font weights.\n\nImplementation notes\nType scale classes should only be applied to typographic elements such as headings, paragraphs, and list items containing text. Rivet uses rem to express font sizes, so adding type scale classes to block-level container elements may cause unexpected results.\n\nTry to keep the number of different font sizes you use in your application to a minimum. The size of fonts depends on the design of you application, but picking a handful of font sizes and sticking to them makes it easier to maintain consistency throughout the interface.\n\nType scale aliases\nTo make it easier to keep type sizes to a minimum we have create a few CSS utility classes that follow the same naming convention as the Rivet spacing utilities. These type scale alias utilities are mapped directly to type sizes in the the Rivet type scale shown in the table above.\n\n.rvt-ts-xxs\n.rvt-ts-xs\n.rvt-ts-sm\n.rvt-ts-md\n.rvt-ts-lg\n.rvt-ts-xl\n.rvt-ts-xxl\n\n{{}}Fulfilling the promise\nFulfilling the promise\nFulfilling the promise\nFulfilling the promise\nFulfilling the promise\nFulfilling the promise\nFulfilling the promise\n{{}}\n\nResponsive type scale\nEach type scale helper class comes with a set of modifiers that allow you to adjust font-size at different screen sizes. Here's an example.\n\n{{}}Profile page\nThe profile page is where you can select your personal settings.\n{{}}\n\nGiven the markup above, the h1 would have a font size of 1.25rem/20px on all screens small and larger, and 2.25rem/36px on medium screens(740px wide) and larger.\n\nThe responsive type scale CSS classes use the following conventions:\n\n-sm-up - screens 480–740px and wider\n-md-up - screens 740–1080px and wider\n-lg-up - screens 1080–1260px and wider\n-xl-up - screens 1260–1400px and wider\n-xxl-up - screens 1400px and wider\n\n{{}}\nSee the documentation about Rivet's global breakpoints in the grid documentation.\n{{}}\n\n[type-variables]: https://github.com/indiana-university/rivet-source/blob/develop/src/sass/core/_variables.scss\n[sass-maps]: http://sass-lang.com/documentation/file.SASS_REFERENCE.html#maps\n",
        "rawContent": "\n## About the type scale\nTypography is the core component of any interface. Rivet uses a defined [Major Second](http://type-scale.com/?size=16&scale=1.125&text=A%20Visual%20Type%20Scale&webfont=Libre+Baskerville&font-family=%27Libre%20Baskerville%27,%20serif&font-weight=400&font-family-headers=&font-weight-headers=inherit&background-color=white&font-color=#333) type scale that has been rounded to the nearest whole pixel value. Using sizes from this scale will help create a hierarchy and consistency throughout your application.\n\n## Type scale examples\n{{< typescale >}}{{< /typescale >}}\n\n## Type scale Sass variables\nIf you are using [Rivet's Sass][type-variables] files you can directly access any value in the Rivet type scale by its variable name. All of the type scale values are stored in a [Sass map][sass-maps] that we use to produce the type [scale utility classes](./#type-scale-examples), including the [aliases listed in the following documentation](./#type-scale-aliases).\n\n[Visit the Sass getting started page]({{< relref \"sass.md\" >}}) for a complete list of Rivet's Sass variables.\n\n{{< code lang=\"scss\" >}}// Main Sass map\n\n$type-sizes: (\n  12: .75rem,\n  xxs: .75rem,\n  14: .875rem,\n  xs: .875rem,\n  16: 1rem,\n  base: 1rem,\n  18: 1.125rem,\n  20: 1.25rem,\n  sm: 1.25rem,\n  23: 1.4375rem,\n  26: 1.625rem,\n  md: 1.625rem,\n  29: 1.8125rem,\n  32: 2rem,\n  lg: 2rem,\n  36: 2.25rem,\n  41: 2.5625rem,\n  xl: 2.5625rem,\n  46: 2.875rem,\n  52: 3.25rem,\n  xxl: 3.25rem,\n)\n{{< /code >}}\n\nFrom the main Sass map we then create shortcut variables for each type size, as well as a set of memorable alias variables e.g. `-xxs`, `-xs`, `-sm`, `-md`, `-lg`, `-xl`, `-xxl`.\n\n{{< code lang=\"scss\" >}}// Type Size variables\n\n$ts-12: map-get($type-sizes, 12);\n$ts-14: map-get($type-sizes, 14);\n$ts-16: map-get($type-sizes, 16);\n$ts-18: map-get($type-sizes, 18);\n$ts-20: map-get($type-sizes, 20);\n$ts-23: map-get($type-sizes, 23);\n$ts-26: map-get($type-sizes, 26);\n$ts-29: map-get($type-sizes, 29);\n$ts-32: map-get($type-sizes, 32);\n$ts-36: map-get($type-sizes, 36);\n$ts-41: map-get($type-sizes, 41);\n$ts-46: map-get($type-sizes, 46);\n$ts-52: map-get($type-sizes, 52);\n\n// Type scale aliases\n\n$ts-xxs: $ts-12;\n$ts-xs: $ts-14;\n$ts-base: $ts-16;\n$ts-sm: $ts-20;\n$ts-md: $ts-26;\n$ts-lg: $ts-32;\n$ts-xl: $ts-41;\n$ts-xxl: $ts-52;\n{{< /code >}}\n\n### Using typography Sass variables\nHere's an example of how you might use the type scale Sass variables when customizing Rivet:\n\n{{< code lang=\"scss\" >}}.custom-heading {\n  font-size: $ts-26; // Font size = 26px/1.625rem\n  font-weight: 700;\n}\n{{< /code >}}\n\n## Typeface\nBenton Sans is an official IU font and is available for free to all IU schools, departments, offices, and affiliated units.\n\n## Font weight\nFont weight can be used to emphasize different parts of your interface and help enforce visual hierarchy. Rivet uses Benton Sans Regular and Benton Sans Bold font weights.\n\n## Implementation notes\nType scale classes should only be applied to typographic elements such as headings, paragraphs, and list items containing text. Rivet uses `rem` to express font sizes, so adding type scale classes to block-level container elements may cause unexpected results.\n\nTry to keep the number of different font sizes you use in your application to a minimum. The size of fonts depends on the design of you application, but picking a handful of font sizes and sticking to them makes it easier to maintain consistency throughout the interface.\n\n### Type scale aliases\nTo make it easier to keep type sizes to a minimum we have create a few CSS utility classes that follow the same naming convention as the [Rivet spacing utilities](../spacing). These type scale alias utilities are mapped directly to type sizes in the the Rivet type scale [shown in the table above](#type-scale-examples).\n\n- `.rvt-ts-xxs`\n- `.rvt-ts-xs`\n- `.rvt-ts-sm`\n- `.rvt-ts-md`\n- `.rvt-ts-lg`\n- `.rvt-ts-xl`\n- `.rvt-ts-xxl`\n\n{{< example lang=\"html\" >}}<h1 class=\"rvt-ts-xxs\">Fulfilling the promise</h1>\n<h1 class=\"rvt-ts-xs\">Fulfilling the promise</h1>\n<h1 class=\"rvt-ts-sm\">Fulfilling the promise</h1>\n<h1 class=\"rvt-ts-md\">Fulfilling the promise</h1>\n<h1 class=\"rvt-ts-lg\">Fulfilling the promise</h1>\n<h1 class=\"rvt-ts-xl\">Fulfilling the promise</h1>\n<h1 class=\"rvt-ts-xxl\">Fulfilling the promise</h1>\n{{< /example >}}\n\n### Responsive type scale\nEach type scale helper class comes with a set of modifiers that allow you to adjust font-size at different screen sizes. Here's an example.\n\n{{< example lang=\"html\" >}}<h1 class=\"rvt-ts-20 rvt-ts-32-md-up\">Profile page</h1>\n<p class=\"rvt-ts-14\">The profile page is where you can select your personal settings.</p>\n{{< /example >}}\n\nGiven the markup above, the `h1` would have a font size of 1.25rem/20px on all screens small and larger, and 2.25rem/36px on medium screens(740px wide) and larger.\n\nThe responsive type scale CSS classes use the following conventions:\n\n- `-sm-up` - screens **480–740px** and wider\n- `-md-up` - screens **740–1080px** and wider\n- `-lg-up` - screens **1080–1260px** and wider\n- `-xl-up` - screens **1260–1400px** and wider\n- `-xxl-up` - screens **1400px** and wider\n\n{{< alert variant=\"info\" title=\"Rivet breakpoints\" >}}\nSee the documentation about Rivet's global breakpoints in [the grid documentation](../grid/#grid-breakpoints).\n{{< /alert >}}\n\n[type-variables]: https://github.com/indiana-university/rivet-source/blob/develop/src/sass/core/_variables.scss\n[sass-maps]: http://sass-lang.com/documentation/file.SASS_REFERENCE.html#maps\n",
        "tags": [],
        "description": "Use the Rivet type scale to apply consistent typographic design to your application."
    },
    {
        "uri": "components/navigation/breadcrumb",
        "title": "Breadcrumb",
        "content": "Default breadcrumb\n{{}}\n\n         Home\n         Files\n        my-file.txt\n\n{{}}\n\nWhen to use\nUse breadcrumbs when your application has multiple levels in the navigation hierarchy. Breadcrumbs can help users navigate quickly between these levels.\n\nWhen to consider something else\nAvoid using the breadcrumb nav when your application only has one level of navigation.\n\nImplementation notes\nThe default breadcrumb is minimally styled with CSS-generated content (/) used as separators.\n\nCallout example\nThere is also a .rvt-breadcrumbs--call-out modifier class that adds a small amount of padding and a light gray background. This is useful for when you need to draw more attention to the breadcrumb.\n\n{{}}\n\n         Home\n         Files\n        my-file.txt\n\n{{}}\n\nAccessibility\nThe breadcrumb component is wrapped in a nav element so that it is announced to assistive technologies. It is also a good idea to add aria-label attributes to the nav element and current page li that describes the navigation.\n\nResources\nNN Group on the benefits of breadcrumb navigation\nARIA authoring practices example of accessible breadcrumb nav\n",
        "rawContent": "## Default breadcrumb\n{{< example lang=\"html\" >}}<nav role=\"navigation\" aria-label=\"Breadcrumbs\">\n    <ol class=\"rvt-breadcrumbs\">\n        <li><a href=\"#\"> Home </a></li>\n        <li><a href=\"#\"> Files </a></li>\n        <li aria-current=\"page\">my-file.txt</li>\n    </ol>\n</nav>\n{{< /example >}}\n\n## When to use\nUse breadcrumbs when your application has multiple levels in the navigation hierarchy. Breadcrumbs can help users navigate quickly between these levels.\n\n## When to consider something else\nAvoid using the breadcrumb nav when your application only has one level of navigation.\n\n## Implementation notes\nThe default breadcrumb is minimally styled with CSS-generated content (/) used as separators.\n\n### Callout example\nThere is also a `.rvt-breadcrumbs--call-out` modifier class that adds a small amount of padding and a light gray background. This is useful for when you need to draw more attention to the breadcrumb.\n\n{{< example lang=\"html\" >}}<nav role=\"navigation\" aria-label=\"Breadcrumbs call out\">\n    <ol class=\"rvt-breadcrumbs rvt-breadcrumbs--call-out\">\n        <li><a href=\"#\"> Home </a></li>\n        <li><a href=\"#\"> Files </a></li>\n        <li aria-current=\"page\">my-file.txt</li>\n    </ol>\n</nav>\n{{< /example >}}\n\n## Accessibility\nThe breadcrumb component is wrapped in a `nav` element so that it is announced to assistive technologies. It is also a good idea to add `aria-label` attributes to the `nav` element and current page `li` that describes the navigation.\n\n## Resources\n- [NN Group on the benefits of breadcrumb navigation](https://www.nngroup.com/articles/breadcrumb-navigation-useful/)\n- [ARIA authoring practices example of accessible breadcrumb nav](https://www.w3.org/TR/wai-aria-practices/examples/breadcrumb/index.html)\n",
        "tags": [],
        "description": "A navigation component that indicates the user's current location in the nav hierarchy"
    },
    {
        "uri": "components/navigation/dropdown",
        "title": "Dropdown",
        "content": "Dropdown example\n{{}}\n\n        Navigation menu\n\n        Item one\n        Item two\n        Item three\n        Item four\n\n            Related item three\n            Related item four\n\n{{}}\n\nWhen to use\nUse a dropdown menu when you need to give users a list of actions or links to choose from.\n\nWhen to consider something else\nAlthough similar to a native HTML `` element, the dropdown component should not be used as a replacement inside forms. Use the select element instead when you need to give users a list of mutually exclusive choices while filling out a form.\n\nAccessibility requirements\n{{% a11y %}}\nThe Rivet Dropdown is built to follow the WAI-ARIA authoring standards. It is marked up with the appropriate ARIA attributes and uses the JavaScript included in rivet.js to implement the keyboard navigation and focus management required to meet the ARIA Authoring Practices standards. If you need to create the Dropdown functionality in another framework/library like React, Angular, etc., please ensure that it meets the following accessibility requirements.\n\nFocus\nDropdown button and Menu options should have a visible keyboard :focus state\nWhen escape key Escape is pressed and the menu is active/open, focus should be returned to the Dropdown Button associated with that menu.\n(Optional) When focused on the last menu item, the down arrow key &darr; should move focus to the first menu item.\n(Optional) When focused on the first menu item, the up arrow key &uarr; should move focus to the last menu item.\n\nLabeling\nDropdown button has aria-haspopup set to true.\nMenu has role menu.\nWhen menu is visible, button has aria-expanded set to true. When menu is hidden, it is set to false.\n(Optional) Dropdown button has aria-controls attribute that refers to the Menu\nMenu visibility should be toggled using the aria-hidden attribute.\nMenu items should use the appropriate roles, states, and properties depending their functionality. More on that here.\n\nKeyboard navigation\nEnter or Space = Open Menu\nEscape = Close Active Menu\n&darr; = Open Menu (when button focused)\n&uarr;&darr; = Moves focus to previous/next menu option\n{{% /a11y %}}\n\nImplementation notes\nTo use the dropdown component, add a data attribute of data-dopdown-toggle to the button element you want to use to show/hide the menu, then add an id with a matching value to the .rvt-dropdown__menu element.\n\nRight-align modifier\nTo align the dropdown menu with the right side of the dropdown button, add the .rvt-dropdownmenu--right class to the .rvt-dropdownmenu element.\n\n{{}}\n\n        Right menu\n\n        Item one\n        Item two\n        Item three\n        Item four\n\n{{}}\n\nElements inside the dropdown menu\nThe dropdown menu will work with either links (` tags) or buttons (` tags). The keyboard navigation implementation accounts for any focusable elements, so it will work with form controls like text inputs, textareas, and select elements as well.\n\nAdditional dropdown elements\nWe’ve also included a couple of extra layout elements here for when you may need to add some visual hierarchy to your dropdowns:\n\nUse the .rvt-dropdownmenu-heading element to provide help and to label a related group of menu items. This should be a generic ` and should have an aria-hidden=\"true\" attribute applied to it so that the label for the grouped items will not be announced to screen readers twice. E.g. the .rvt-dropdownmenu-heading content and then the value of the aria-label` applied to the group (see next bullet point).\nThe dropdown heading should generally be used to group related options. Wrap related options in a ` with a role=\"group\". Using role=\"group will apply a top border to the related options. Additionally, you will need to add an aria-label` attribute with a value that describes the group. This label will be announced to screen reader users.\nTo mark a dropdown menu item as selected, add the aria attribute aria-checked=\"true\" (for js-driven/application menus), or aria-current=\"page\" (for navigation/link menus) to the menu item.\n\nThe following example shows how to implement these additional dropdown elements.\n\n{{}}\n\n        Application menu\n\n        Notify all\n        Notify admins\n        Notify contributors\n        Personal settings\n\n            Profile Settings\n            Logout\n\n{{}}\n\nA note about buttons\nWhile it is possible to use any element as a toggle for the dropdown menu, you should always use an HTML `` element. The button element was made for triggering new content within the current context or performing in-page actions. Plus, its appearance is completely styleable using CSS (so dropdown toggles don’t always need to look like the default Rivet button). Buttons are the best and most accessible choice for toggling the dropdown menu.\n\nNavigation menus vs. application menus\nThe Rivet dropdown is flexible enough to be used with lists of navigation links, or buttons that can be used for in-app JavaScript-driven behavior. There are some subtle differences in the way these two types of menus should be implemented.\n\n            Navigation menus\n\n                Navigation menus are a set of links used to navigate to pages/URLs in an application.\n                Use the aria-current=\"page\" attribute to indicate in the menu, both to screen readers and visually, if the user is on the current page.\n                Use a generic div element with the role=\"group\" attribute applied to it to group related links. This will also apply a top border to help visually separate groups of menu items.\n                NOTE: Do not use the role=\"menuitem\" attribute on links in a navigation menu. It will override the way screen readers announce items as \"Links\".\n\n            Application menus\n\n                Application menus generally contain lists of buttons that are used for JavaScript-driven/in-page behavior.\n                Application menu items (buttons) should use the role=\"menuitemradio\" when they are used to toggle JavaScript-driven functionality. Otherwise, buttons should use the role=\"menuitem\" attribute.\n                To indicate the current state of an application menu item, use the aria-checked=\"true\" attribute.\n\nJavaScript API\nThe Dropdown JavaScript exposes a couple of methods to use in your own scripts. The init() method is called by the main rivet.js file the first time the script is loaded. It will initialize the dropdown component and attach the event listeners that handle interaction.\n\nAvailable methods\nHere's a breakdown of the available Dropdown methods you can use in your scripts.\n\n{{}}{{}}\n\nCustom Events\nThe Rivet Dropdown also emits various custom events that you can listen for in your own scripts.\n\n{{}}{{}}\n\nCustom event example\nNote here that the event.detail.name() property of the customEvent object is a function that returns a String. Read more about custom events on the MDN web docs.\n\n{{}}// Listen for a custom \"dropdownOpen\" event\ndocument.addEventListener('dropdownOpen', event => {\n  if (event.detail.name() === 'my-dropdown') {\n    alert('Hey, you opened the dropdown!')\n  }\n  // Maybe send some data via an AJAX request, etc...\n}, false);\n{{}}\n",
        "rawContent": "## Dropdown example\n{{< example lang=\"html\" >}}<div class=\"rvt-dropdown\">\n    <button\n         type=\"button\"\n        class=\"rvt-button\"\n        data-dropdown-toggle=\"dropdown-navigation\"\n        aria-haspopup=\"true\"\n        aria-expanded=\"false\"\n    >\n        <span>Navigation menu</span>\n        <svg aria-hidden=\"true\" class=\"rvt-m-left-xs\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\">\n            <path fill=\"currentColor\" d=\"M8,12.46a2,2,0,0,1-1.52-.7L1.24,5.65a1,1,0,1,1,1.52-1.3L8,10.46l5.24-6.11a1,1,0,0,1,1.52,1.3L9.52,11.76A2,2,0,0,1,8,12.46Z\"/>\n        </svg>\n    </button>\n    <div\n        class=\"rvt-dropdown__menu\"\n        id=\"dropdown-navigation\"\n        aria-hidden=\"true\"\n        role=\"menu\"\n    >\n        <a href=\"#\">Item one</a>\n        <a href=\"#\">Item two</a>\n        <a href=\"#\" aria-current=\"page\">Item three</a>\n        <a href=\"#\">Item four</a>\n        <div role=\"group\" aria-label=\"Related\">\n            <a href=\"#\">Related item three</a>\n            <a href=\"#\">Related item four</a>\n        </div>\n    </div>\n</div>\n{{< /example >}}\n\n## When to use\nUse a dropdown menu when you need to give users a list of actions or links to choose from.\n\n## When to consider something else\nAlthough similar to a native HTML `<select>` element, the dropdown component should not be used as a replacement inside forms. Use the select element instead when you need to give users a list of mutually exclusive choices while filling out a form.\n\n## Accessibility requirements\n{{% a11y %}}\nThe Rivet Dropdown is built to follow the WAI-ARIA authoring standards. It is marked up with the appropriate ARIA attributes and uses the JavaScript included in `rivet.js` to implement the keyboard navigation and focus management required to meet the [ARIA Authoring Practices](http://w3c.github.io/aria-practices/) standards. If you need to create the Dropdown functionality in another framework/library like React, Angular, etc., please ensure that it meets the following accessibility requirements.\n\n### Focus\n- Dropdown button and Menu options should have a visible keyboard `:focus` state\n- When escape key <kbd>Escape</kbd> is pressed and the menu is active/open, focus should be returned to the Dropdown Button associated with that menu.\n- (Optional) When focused on the last menu item, the down arrow key <kbd>&darr;</kbd> should move focus to the first menu item.\n- (Optional) When focused on the first menu item, the up arrow key <kbd>&uarr;</kbd> should move focus to the last menu item.\n\n### Labeling\n- Dropdown button has [aria-haspopup](https://w3c.github.io/aria/#aria-haspopup) set to `true`.\n- Menu has role [menu](https://w3c.github.io/aria/#menu).\n- When menu is visible, button has [aria-expanded](https://w3c.github.io/aria/#aria-expanded) set to `true`. When menu is hidden, it is set to `false`.\n- (Optional) Dropdown button has [aria-controls](https://w3c.github.io/aria/#aria-controls) attribute that refers to the Menu\n- Menu visibility should be toggled using the `aria-hidden` attribute.\n- Menu items should use the appropriate roles, states, and properties depending their functionality. [More on that here](https://w3c.github.io/aria-practices/#menu).\n\n### Keyboard navigation\n- <kbd>Enter</kbd> or <kbd>Space</kbd> = Open Menu\n- <kbd>Escape</kbd> = Close Active Menu\n- <kbd>&darr;</kbd> = Open Menu (when button focused)\n- <kbd>&uarr;</kbd><kbd>&darr;</kbd> = Moves focus to previous/next menu option\n{{% /a11y %}}\n\n## Implementation notes\nTo use the dropdown component, add a data attribute of `data-dopdown-toggle` to the button element you want to use to show/hide the menu, then add an `id` with a matching value to the `.rvt-dropdown__menu` element.\n\n### Right-align modifier\nTo align the dropdown menu with the right side of the dropdown button, add the `.rvt-dropdown__menu--right` class to the `.rvt-dropdown__menu` element.\n\n{{< example lang=\"html\" >}}<div class=\"rvt-dropdown\">\n    <button\n        type=\"button\"\n        class=\"rvt-button rvt-button--secondary\"\n        data-dropdown-toggle=\"dropdown-right\"\n        aria-haspopup=\"true\"\n        aria-expanded=\"false\"\n    >\n        <span>Right menu</span>\n        <svg aria-hidden=\"true\" class=\"rvt-m-left-xs\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\">\n            <path fill=\"currentColor\" d=\"M8,12.46a2,2,0,0,1-1.52-.7L1.24,5.65a1,1,0,1,1,1.52-1.3L8,10.46l5.24-6.11a1,1,0,0,1,1.52,1.3L9.52,11.76A2,2,0,0,1,8,12.46Z\"/>\n        </svg>\n    </button>\n    <div\n        class=\"rvt-dropdown__menu rvt-dropdown__menu--right\"\n        id=\"dropdown-right\"\n        aria-hidden=\"true\"\n        role=\"menu\"\n    >\n        <a href=\"#\">Item one</a>\n        <a href=\"#\">Item two</a>\n        <a href=\"#\" aria-current=\"page\">Item three</a>\n        <a href=\"#\">Item four</a>\n    </div>\n</div>\n{{< /example >}}\n\n### Elements inside the dropdown menu\nThe dropdown menu will work with either links (`<a>` tags) or buttons (`<button>` tags). The keyboard navigation implementation accounts for any focusable elements, so it will work with form controls like text inputs, textareas, and select elements as well.\n\n### Additional dropdown elements\nWe’ve also included a couple of extra layout elements here for when you may need to add some visual hierarchy to your dropdowns:\n\n- Use the `.rvt-dropdown__menu-heading` element to provide help and to label a related group of menu items. This should be a generic `<div>` and should have an `aria-hidden=\"true\"` attribute applied to it so that the label for the grouped items will not be announced to screen readers twice. E.g. the `.rvt-dropdown__menu-heading` content and then the value of the `aria-label` applied to the group (see next bullet point).\n- The dropdown heading should generally be used to group related options. Wrap related options in a `<div>` with a role=\"group\". Using `role=\"group` will apply a top border to the related options. Additionally, you will need to add an `aria-label` attribute with a value that describes the group. This label will be announced to screen reader users.\n- To mark a dropdown menu item as selected, add the aria attribute `aria-checked=\"true\"` (for js-driven/application menus), or `aria-current=\"page\"` (for navigation/link menus) to the menu item.\n\nThe following example shows how to implement these additional dropdown elements.\n\n{{< example lang=\"html\" >}}<div class=\"rvt-dropdown\">\n    <button type=\"button\" class=\"rvt-button\" data-dropdown-toggle=\"dropdown-1\" aria-haspopup=\"true\" aria-expanded=\"false\">\n        <span>Application menu</span>\n        <svg aria-hidden=\"true\" class=\"rvt-m-left-xs\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\">\n            <path fill=\"currentColor\" d=\"M8,12.46a2,2,0,0,1-1.52-.7L1.24,5.65a1,1,0,1,1,1.52-1.3L8,10.46l5.24-6.11a1,1,0,0,1,1.52,1.3L9.52,11.76A2,2,0,0,1,8,12.46Z\"/>\n        </svg>\n    </button>\n    <div class=\"rvt-dropdown__menu\" id=\"dropdown-1\" role=\"menu\" aria-hidden=\"true\">\n        <button type=\"button\" role=\"menuitemradio\">Notify all</button>\n        <button type=\"button\" role=\"menuitemradio\" aria-checked=\"true\">Notify admins</button>\n        <button type=\"button\" role=\"menuitemradio\">Notify contributors</button>\n        <div class=\"rvt-dropdown__menu-heading\" aria-hidden=\"true\">Personal settings</div>\n        <div role=\"group\" aria-label=\"Personal settings\">\n            <button type=\"button\" role=\"menuitem\">Profile Settings</button>\n            <button type=\"button\" role=\"menuitem\">Logout</button>\n        </div>\n    </div>\n</div>\n{{< /example >}}\n\n### A note about buttons\nWhile it is possible to use any element as a toggle for the dropdown menu, you should always use an HTML `<button>` element. The button element was made for triggering new content within the current context or performing in-page actions. Plus, its appearance is completely styleable using CSS (so dropdown toggles don’t always need to look like the default Rivet button). **Buttons are the best and most accessible choice for toggling the dropdown menu**.\n\n## Navigation menus vs. application menus\nThe Rivet dropdown is flexible enough to be used with lists of navigation links, or buttons that can be used for in-app JavaScript-driven behavior. There are some subtle differences in the way these two types of menus should be implemented.\n\n<div class=\"rvt-p-all-sm rvt-border-all rvt-border-radius\">\n    <div class=\"rvt-grid\">\n        <div class=\"rvt-grid__item-6-md-up\">\n            <h3 class=\"rvt-text-bold rvt-m-bottom-md\">Navigation menus</h3>\n            <ul>\n                <li>Navigation menus are a set of links used to navigate to pages/URLs in an application.</li>\n                <li>Use the <code>aria-current=\"page\"</code> attribute to indicate in the menu, both to screen readers and visually, if the user is on the current page.</li>\n                <li>Use a generic <code>div</code> element with the <code>role=\"group\"</code> attribute applied to it to group related links. This will also apply a top border to help visually separate groups of menu items.</li>\n                <li><strong>NOTE</strong>: Do not use the <code>role=\"menuitem\"</code> attribute on links in a navigation menu. It will override the way screen readers announce items as \"Links\".</li>\n            </ul>\n        </div>\n        <div class=\"rvt-grid__item-6-md-up\">\n            <h3 class=\"rvt-text-bold rvt-m-bottom-md\">Application menus</h3>\n            <ul>\n                <li>Application menus generally contain lists of buttons that are used for JavaScript-driven/in-page behavior.</li>\n                <li>Application menu items (buttons) should use the <code>role=\"menuitemradio\"</code> when they are used to toggle JavaScript-driven functionality. Otherwise, buttons should use the <code>role=\"menuitem\"</code> attribute.</li>\n                <li>To indicate the current state of an application menu item, use the <code>aria-checked=\"true\"</code> attribute.</li>\n            </ul>\n        </div>\n    </div>\n</div>\n\n## JavaScript API\nThe Dropdown JavaScript exposes a couple of methods to use in your own scripts. The `init()` method is called by the main `rivet.js` file the first time the script is loaded. It will initialize the dropdown component and attach the event listeners that handle interaction.\n\n### Available methods\nHere's a breakdown of the available Dropdown methods you can use in your scripts.\n\n{{< apidocs type=\"methods\" >}}{{< /apidocs >}}\n\n### Custom Events\nThe Rivet Dropdown also emits various custom events that you can listen for in your own scripts.\n\n{{< apidocs type=\"events\" >}}{{< /apidocs >}}\n\n#### Custom event example\nNote here that the `event.detail.name()` property of the `customEvent` object is a function that returns a String. Read more about custom events on the [MDN web docs](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent).\n\n{{< code lang=\"js\" >}}// Listen for a custom \"dropdownOpen\" event\ndocument.addEventListener('dropdownOpen', event => {\n  if (event.detail.name() === 'my-dropdown') {\n    alert('Hey, you opened the dropdown!')\n  }\n  // Maybe send some data via an AJAX request, etc...\n}, false);\n{{< /code >}}\n",
        "tags": [],
        "description": "Use the dropdown component to create a list of menu options that can be toggled with a button element."
    },
    {
        "uri": "components/navigation/footer",
        "title": "Footer",
        "content": "\nAbout the footer\n\nThe Rivet footer contains and provides styles for the IU trident, copyright notice, and any supplemental links needed by your application, such as a privacy notice.\n\n{{}}\nThe previous version of the footer wrapped the IU trident and copyright in a div with the class .rivet-footer__copyright-lockup. Due to the change in placement of the copyright details, this div and class are no longer necessary.\n\nWe have deprecated the .rivet-footer__copyright-lockup class. We recommend updating your application to use the latest version of the footer.\n{{}}\n\n{{}}\n\n            Accessibility\n\n            Privacy Notice\n\n            Copyright &copy; 2019 The Trustees of Indiana University\n\n{{}}",
        "rawContent": "\n## About the footer\n\nThe Rivet footer contains and provides styles for the IU trident, copyright notice, and any supplemental links needed by your application, such as a privacy notice.\n\n{{< alert variant=\"warning\" title=\"Lockup change\" >}}\nThe previous version of the footer wrapped the IU trident and copyright in a `div` with the class `.rivet-footer__copyright-lockup`. Due to the change in placement of the copyright details, this `div` and class are no longer necessary. \n\nWe have deprecated the `.rivet-footer__copyright-lockup` class. We recommend updating your application to use the latest version of the footer.\n{{< /alert >}}\n\n{{< example lang=\"html\" >}}<footer class=\"rvt-footer\" role=\"contentinfo\">\n    <div class=\"rvt-footer__trident\">\n        <svg role=\"img\" alt=\"\" xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"25\" viewBox=\"0 0 20 25\">\n            <polygon points=\"13.33 3.32 13.33 5.21 14.76 5.21 14.76 15.64 11.9 15.64 11.9 1.9 13.33 1.9 13.33 0 6.67 0 6.67 1.9 8.09 1.9 8.09 15.64 5.24 15.64 5.24 5.21 6.67 5.21 6.67 3.32 0 3.32 0 5.21 1.43 5.21 1.43 17.47 3.7 19.91 8.09 19.91 8.09 22.76 6.67 22.76 6.67 25.13 13.33 25.13 13.33 22.76 11.9 22.76 11.9 19.91 16.1 19.91 18.56 17.47 18.56 5.21 20 5.21 20 3.32 13.33 3.32\" fill=\"#900\"/>\n        </svg>\n    </div>\n    <ul class=\"rvt-footer__aux-links\">\n        <li class=\"rvt-footer__aux-item\">\n            <a href=\"https://accessibility.iu.edu/assistance/\">Accessibility</a>\n        </li>\n        <li class=\"rvt-footer__aux-item\">\n            <!-- You can learn more about privacy policies and generate one\n                 for your site here:\n                 https://protect.iu.edu/online-safety/tools/privacy-notice/index.html -->\n            <a href=\"#0\">Privacy Notice</a>\n        </li>\n        <li class=\"rvt-footer__aux-item\">\n            <a href=\"https://www.iu.edu/copyright/index.html\">Copyright</a> &copy; 2019 The Trustees of <a href=\"https://www.iu.edu/\">Indiana University</a>\n        </li>\n    </ul>\n</footer>\n{{< /example >}}",
        "tags": [],
        "description": "The base footer provides consistent branding in a condensed space below all of your application content."
    },
    {
        "uri": "components/navigation/header",
        "title": "Header",
        "content": "\n    Header changes in Rivet 0.5.0\n    We made some significant markup changes to the header in Rivet’s 0.5.0 release. The biggest change: The dropdown in the header now uses button elements to toggle dropdown. (Previously it used anchor elements.) We also replaced the dropdown toggle’s background images with inline SVGs. Finally, we updated its data attribute. Learn how to make the necessary changes.\n\nBase header\nThe base header provides consistent branding in a condensed space. It replaces the common text “Indiana University” with a more useful link to your application’s default view. The base header is the bare minimum version of the header that must be included in your application.\n\nIdentity menu extension\nMain navigation extension\n\n{{}}\n    Skip to content\n\n            Indiana University Logo\n\n        Application Title\n\n{{}}\n\nAccessibility\nAll versions of the Rivet header should include a skip link that is only visible when in focus and that links via an id attribute to the `` element of you application. See the skip link example for more details on implementation.\n\nHeader extensibility\nThe base header can be extended to fit the navigation needs of your application by using a handful of smaller sub-components and modifier CSS classes.\n\nHeader with identity menu\nThe inclusion of an avatar and username, or only username are both appropriate choices. When your application has multiple user functions consider including the dropdown menu. When there is only one user function consider replacing the carat with a bar followed by the single function. (example:  username | Log out). On mobile, this item collapses into the side menu above all other options.\n\n{{}}\n    Skip to content\n\n            Indiana University Logo\n\n        Application Title\n\n                RS\n                rswanson\n\n                Log out\n\n            Toggle menu\n\n                RS\n                rswanson\n\n                    Log out\n\n        Close nav\n\n{{}}\n\nHeader with main navigation\nThese lists work best for priority tasks and internal navigation. Consider including no more than five items in this list. These items can optionally also include nested structural navigation as a Rivet standard styled dropdown on desktop. On mobile these items collapse into the side menu, below the identity row and above the side menu options.\n\n{{}}\n    Skip to content\n\n            Indiana University Logo\n\n        Application Title\n\n                    Nav one\n\n                            Nav two\n\n                                Dropdown icon\n\n                            Item one\n                            Item two\n                            Item three\n                            Item four\n\n                    Nav three\n\n                            Nav four\n\n                            Item one\n                            Item two\n                            Item three\n                            Item four\n\n                    RS\n                    rswanson\n\n                    Account settings\n                    Admin task one\n                    Admin task two\n\n                        Log out\n\n            Toggle menu\n\n                        RS\n                        rswanson\n\n                                Account settings\n\n                                Admin task one\n\n                                Admin task two\n\n                                Log out\n\n                    Nav one\n\n                    Nav two\n\n                                Subnav one\n\n                                Subnav two\n\n                                Subnav three\n\n                    Nav three\n\n                    Nav four\n\n                                Subnav one\n\n                                Subnav two\n\n                                Subnav three\n\n            Close nav\n\n{{}}\n\nNavigation current state\nTo indicate the current page in the navigation you can add aria-current=\"page\" to the link in the main nav and/or the drawer for that page. Using aria-current informs screenreaders that the user is focused on the link to the current page.\n\n{{}}\n\n        Nav one\n\n        Nav two\n        Nav three\n        Nav four\n\n{{}}\n\nImplementation notes\nThe main navigation extension (.rvt-headermain-nav) will always need to be used with the drawer (.rvt-drawer) component. To allow for maximum flexibility, the markup in .rvt-headermain-nav needs to be duplicated inside of the .rvt-drawernav inside of the drawer. Starting at medium screen sizes (1080px–740px) and smaller the main nav extension is hidden using display: none; and the the .rvt-drawernav (with duplicate navigation) is shown using display: block;.\n\nMain navigation with dropdowns\nTo create a nested navigation structure you can use Rivet's standard dropdown menus. Dropdown menus can be nested inside of any of the main navigation li elements and implemented using the appropriate data attributes on the dropdown.\n\nPersistent drawer\nTo keep the Rivet drawer nav visible at large screen sizes, add the .rvt-drawer-button--persistent class to the .rvt-drawer-button element.\n\nNested navigation inside drawer\nTo create a nested navigation structure, you can use Rivet's dropdown menus along with the Rivet drawer nav. Dropdown menus can be nested inside of the Rivet drawer navigation li and accompanying ` (wrapping a nested ) elements using the appropriate data attributes on the dropdown. Set the data attributes using the data-subnav-toggle attribute on the button element for the li navigation item. Then on each div sub navigation element set the id to the matching data-subnav-toggle`.\n\nAdditionally, any navigation item that will contain sub navigation items needs the has-children class for appropriate styling in the dropdown menu. Lastly, each ` sub navigation item needsaria-hidden` set to true to hide the element until the dropdown menu toggle is clicked.\n\n{{}}\n\n                    RS\n                    rswanson\n\n                            Account settings\n\n                            Admin task one\n\n                            Admin task two\n\n                            Log out\n\n            Nav one\n\n                Nav two\n\n                            Subnav one\n\n                            Subnav two\n\n                            Subnav three\n\n            Nav three\n\n                Nav four\n\n                            Subnav one\n\n                            Subnav two\n\n                            Subnav three\n\n        Close nav\n\n{{}}\n\nIdentity menu dropdown\nWhen your application has multiple user-specific functions (e.g. \"Account settings\") you can wrap the contents of the .rvt-header-id extension in a standard Rivet dropdown component. Note that you'll need to add a --has-dropdown modifier class to the .rvt-header-id__profile element to remove the default styling.\n\n{{}}\n\n            RS\n            rswanson\n\n            Account settings\n            Admin task one\n            Admin task two\n\n                Log out\n\n{{}}\n\nLight background variant\nFor applications that use a light gray background/stage, the header can also be used with the modifier class .rvt-header--light. This will give the header a white background color to help provide contrast against the stage.\n\nIf you choose to use a light gray background for your app we recommend a gray no darker than #f7f7f7.\n\n{{}}\n    Header markup...\n\n{{}}\n\nSkip navigation link\nUsers that browse websites using a keyboard only need a fast way to skip to the main content of an application without having to tab through each navigation item. All versions of the Rivet header should include a skip link that is only visible when in focus. The skip link should be the first focus-able element in the DOM and link via an id attribute to the `` element of you application.\n\nJavaScript API (Drawer)\nThe Rivet header uses JavaScript to toggle the visibility of the \"Drawer\" that contains navigation on smaller screens. The Rivet Drawer JavaScript component exposes a few APIs that you can use in your own scripts.\n\n{{}}{{}}\n\nCustom events\n\n{{}}{{}}\n\nCustom event example\nNote here that the event.detail.name() property of the customEvent object is a function that returns a String. Read more about custom events on the MDN web docs.\n\n{{}}// Listen for a custom \"drawerOpen\" event\ndocument.addEventListener('drawerOpen', event => {\n  if (event.detail.name() === 'my-drawer') {\n    alert('Hey, you opened the drawer!')\n  }\n  // Maybe send some data via an AJAX request, etc...\n}, false);\n{{}}\n",
        "rawContent": "<div class=\"rvt-alert rvt-alert--message rvt-m-bottom-md\">\n    <h2 class=\"rvt-alert__title\">Header changes in Rivet 0.5.0</h2>\n    <p class=\"rvt-alert__message\">We made some significant markup changes to the header in Rivet’s 0.5.0 release. The biggest change: The dropdown in the header now uses button elements to toggle dropdown. (Previously it used anchor elements.) We also replaced the dropdown toggle’s background images with inline SVGs. Finally, we updated its data attribute. <a href=\"../../../blog/0.5/#header-updates\">Learn how to make the necessary changes</a>.</p>\n</div>\n\n## Base header\nThe base header provides consistent branding in a condensed space. It replaces the common text “Indiana University” with a more useful link to your application’s default view. The base header is the bare minimum version of the header that **must be included in your application**.\n\n- [Identity menu extension](#header-with-identity-menu)\n- [Main navigation extension](#header-with-main-navigation)\n\n{{< example lang=\"html\" >}}<header class=\"rvt-header\" role=\"banner\">\n    <a class=\"rvt-skip-link\" href=\"#main-content\">Skip to content</a>\n    <div class=\"rvt-header__trident\">\n        <svg class=\"rvt-header__trident-logo\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 41 48\" aria-describedby=\"iu-logo\" aria-hidden=\"true\">\n            <title id=\"iu-logo\">Indiana University Logo</title>\n            <rect width=\"41\" height=\"48\" fill=\"#900\"/>\n            <polygon points=\"24.59 12.64 24.59 14.98 26.34 14.98 26.34 27.78 22.84 27.78 22.84 10.9 24.59 10.9 24.59 8.57 16.41 8.57 16.41 10.9 18.16 10.9 18.16 27.78 14.66 27.78 14.66 14.98 16.41 14.98 16.41 12.64 8.22 12.64 8.22 14.98 9.97 14.98 9.97 30.03 12.77 33.02 18.16 33.02 18.16 36.52 16.41 36.52 16.41 39.43 24.59 39.43 24.59 36.52 22.84 36.52 22.84 33.02 28 33.02 31.01 30.03 31.01 14.98 32.78 14.98 32.78 12.64 24.59 12.64\" fill=\"#fff\"/>\n        </svg>\n    </div>\n    <span class=\"rvt-header__title\">\n        <a href=\"#0\">Application Title</a>\n    </span>\n</header>\n{{< /example >}}\n\n### Accessibility\n**All versions** of the Rivet header should include a [skip link](#skip-navigation-link) that is only visible when in focus and that links via an `id` attribute to the `<main>` element of you application. See the skip link example for more details on implementation.\n\n### Header extensibility\nThe base header can be extended to fit the navigation needs of your application by using a handful of smaller sub-components and modifier CSS classes.\n\n## Header with identity menu\nThe inclusion of an avatar and username, or only username are both appropriate choices. When your application has multiple user functions consider including the dropdown menu. When there is only one user function consider replacing the carat with a bar followed by the single function. (example:  username | Log out). On mobile, this item collapses into the side menu above all other options.\n\n{{< example lang=\"html\" >}}<header class=\"rvt-header\" role=\"banner\">\n    <a class=\"rvt-skip-link\" href=\"#main-content\">Skip to content</a>\n    <div class=\"rvt-header__trident\">\n        <svg class=\"rvt-header__trident-logo\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 41 48\" aria-describedby=\"iu-logo\" aria-hidden=\"true\">\n            <title id=\"iu-logo\">Indiana University Logo</title>\n            <rect width=\"41\" height=\"48\" fill=\"#900\"/>\n            <polygon points=\"24.59 12.64 24.59 14.98 26.34 14.98 26.34 27.78 22.84 27.78 22.84 10.9 24.59 10.9 24.59 8.57 16.41 8.57 16.41 10.9 18.16 10.9 18.16 27.78 14.66 27.78 14.66 14.98 16.41 14.98 16.41 12.64 8.22 12.64 8.22 14.98 9.97 14.98 9.97 30.03 12.77 33.02 18.16 33.02 18.16 36.52 16.41 36.52 16.41 39.43 24.59 39.43 24.59 36.52 22.84 36.52 22.84 33.02 28 33.02 31.01 30.03 31.01 14.98 32.78 14.98 32.78 12.64 24.59 12.64\" fill=\"#fff\"/>\n        </svg>\n    </div>\n    <span class=\"rvt-header__title\">\n        <a href=\"#0\">Application Title</a>\n    </span>\n    <div class=\"rvt-header__controls\">\n        <div class=\"rvt-header-id\">\n            <div href=\"#0\" class=\"rvt-header-id__profile\">\n                <span class=\"rvt-header-id__avatar\" aria-hidden=\"true\">RS</span>\n                <span class=\"rvt-header-id__user\">rswanson</span>\n            </div>\n            <a href=\"#0\" class=\"rvt-header-id__log-out\">\n                Log out\n            </a>\n        </div>\n        <button type=\"button\" class=\"rvt-drawer-button\" aria-haspopup=\"true\" aria-expanded=\"false\" data-drawer-toggle=\"mobile-drawer\">\n            <span class=\"sr-only\">Toggle menu</span>\n            <svg aria-hidden=\"true\" class=\"rvt-drawer-button-open\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\">\n                <g fill=\"currentColor\">\n                    <path d=\"M15,3H1A1,1,0,0,1,1,1H15a1,1,0,0,1,0,2Z\"/>\n                    <path d=\"M15,9H1A1,1,0,0,1,1,7H15a1,1,0,0,1,0,2Z\"/>\n                    <path d=\"M15,15H1a1,1,0,0,1,0-2H15a1,1,0,0,1,0,2Z\"/>\n                </g>\n            </svg>\n            <svg aria-hidden=\"true\" class=\"rvt-drawer-button-close\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\">\n                <path fill=\"currentColor\" d=\"M9.41,8l5.29-5.29a1,1,0,0,0-1.41-1.41L8,6.59,2.71,1.29A1,1,0,0,0,1.29,2.71L6.59,8,1.29,13.29a1,1,0,1,0,1.41,1.41L8,9.41l5.29,5.29a1,1,0,0,0,1.41-1.41Z\"/>\n            </svg>\n        </button>\n    </div>\n    <div class=\"rvt-drawer\" aria-hidden=\"true\" id=\"mobile-drawer\">\n        <div class=\"rvt-header-id rvt-header-id--drawer\">\n            <div class=\"rvt-header-id__profile rvt-header-id__profile--drawer p-all-sm\">\n                <span class=\"rvt-header-id__avatar\" aria-hidden=\"true\">RS</span>\n                <span class=\"rvt-header-id__user\">rswanson</span>\n                <a href=\"#0\" class=\"rvt-header-id__log-out\">\n                    Log out\n                </a>\n            </div>\n        </div>\n        <button type=\"button\" class=\"rvt-drawer__bottom-close\">Close nav</button>\n    </div>\n</header>\n{{< /example >}}\n\n## Header with main navigation\nThese lists work best for priority tasks and internal navigation. Consider including **no more than five items** in this list. These items can optionally also include nested structural navigation as a Rivet standard styled dropdown on desktop. On mobile these items collapse into the side menu, below the identity row and above the side menu options.\n\n{{< example lang=\"html\" >}}<header class=\"rvt-header\" role=\"banner\">\n    <a class=\"rvt-skip-link\" href=\"#main-content\">Skip to content</a>\n    <!-- Trident -->\n    <div class=\"rvt-header__trident\">\n        <svg class=\"rvt-header__trident-logo\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 41 48\" aria-describedby=\"iu-logo\" aria-hidden=\"true\">\n            <title id=\"iu-logo\">Indiana University Logo</title>\n            <rect width=\"41\" height=\"48\" fill=\"#900\"/>\n            <polygon points=\"24.59 12.64 24.59 14.98 26.34 14.98 26.34 27.78 22.84 27.78 22.84 10.9 24.59 10.9 24.59 8.57 16.41 8.57 16.41 10.9 18.16 10.9 18.16 27.78 14.66 27.78 14.66 14.98 16.41 14.98 16.41 12.64 8.22 12.64 8.22 14.98 9.97 14.98 9.97 30.03 12.77 33.02 18.16 33.02 18.16 36.52 16.41 36.52 16.41 39.43 24.59 39.43 24.59 36.52 22.84 36.52 22.84 33.02 28 33.02 31.01 30.03 31.01 14.98 32.78 14.98 32.78 12.64 24.59 12.64\" fill=\"#fff\"/>\n        </svg>\n    </div>\n    <!-- App title -->\n    <span class=\"rvt-header__title\">\n        <a href=\"#\">Application Title</a>\n    </span>\n    <!-- Wrapper for header interactive elements -->\n    <div class=\"rvt-header__controls\">\n        <!-- Main inline nav element -->\n        <nav class=\"rvt-header__main-nav\" role=\"navigation\">\n            <ul>\n                <li>\n                    <a href=\"#\">Nav one</a>\n                </li>\n                <li>\n                    <div class=\"rvt-dropdown\">\n                        <button type=\"button\" class=\"rvt-dropdown__toggle\" data-dropdown-toggle=\"dropdown-1\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                            <span class=\"rvt-dropdown__toggle-text\">Nav two</span>\n                            <svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\">\n                                <title>Dropdown icon</title>\n                                <path fill=\"currentColor\" d=\"M8,12.46a2,2,0,0,1-1.52-.7L1.24,5.65a1,1,0,1,1,1.52-1.3L8,10.46l5.24-6.11a1,1,0,0,1,1.52,1.3L9.52,11.76A2,2,0,0,1,8,12.46Z\"\n                                />\n                            </svg>\n                        </button>\n                        <div class=\"rvt-dropdown__menu\" id=\"dropdown-1\" role=\"menu\" aria-hidden=\"true\">\n                            <a href=\"#\">Item one</a>\n                            <a href=\"#\">Item two</a>\n                            <a href=\"#\">Item three</a>\n                            <a href=\"#\">Item four</a>\n                        </div>\n                    </div>\n                </li>\n                <li>\n                    <a href=\"#\" aria-current=\"page\">Nav three</a>\n                </li>\n                <li>\n                    <div class=\"rvt-dropdown\">\n                        <button type=\"button\" class=\"rvt-dropdown__toggle\" data-dropdown-toggle=\"dropdown-2\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                            <span class=\"rvt-dropdown__toggle-text\">Nav four</span>\n                            <svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\">\n                                <path fill=\"currentColor\" d=\"M8,12.46a2,2,0,0,1-1.52-.7L1.24,5.65a1,1,0,1,1,1.52-1.3L8,10.46l5.24-6.11a1,1,0,0,1,1.52,1.3L9.52,11.76A2,2,0,0,1,8,12.46Z\"/>\n                            </svg>\n                        </button>\n                        <div class=\"rvt-dropdown__menu\" id=\"dropdown-2\" role=\"menu\" aria-hidden=\"true\">\n                            <a href=\"#\">Item one</a>\n                            <a href=\"#\">Item two</a>\n                            <a href=\"#\">Item three</a>\n                            <a href=\"#\">Item four</a>\n                        </div>\n                    </div>\n                </li>\n            </ul>\n        </nav>\n        <!-- ID menu w/ dropdown -->\n        <div class=\"rvt-header-id\">\n            <div class=\"rvt-dropdown\">\n                <button type=\"button\" class=\"rvt-header-id__profile rvt-header-id__profile--has-dropdown rvt-dropdown__toggle\" data-dropdown-toggle=\"id-dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                    <span class=\"rvt-header-id__avatar\" aria-hidden=\"true\">RS</span>\n                    <span class=\"rvt-header-id__user\">rswanson</span>\n                    <svg aria-hidden=\"true\" class=\"rvt-m-left-xs\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\">\n                        <path fill=\"currentColor\" d=\"M8,12.46a2,2,0,0,1-1.52-.7L1.24,5.65a1,1,0,1,1,1.52-1.3L8,10.46l5.24-6.11a1,1,0,0,1,1.52,1.3L9.52,11.76A2,2,0,0,1,8,12.46Z\"/>\n                    </svg>\n                </button>\n                <div class=\"rvt-dropdown__menu rvt-header-id__menu\" id=\"id-dropdown\" aria-hidden=\"true\">\n                    <a href=\"#\">Account settings</a>\n                    <a href=\"#\">Admin task one</a>\n                    <a href=\"#\">Admin task two</a>\n                    <div role=\"group\" aria-label=\"User actions\">\n                        <a href=\"\">Log out</a>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <!-- Drawer close button - shows on small screens -->\n        <button type=\"button\" class=\"rvt-drawer-button\" aria-haspopup=\"true\" aria-expanded=\"false\" data-drawer-toggle=\"mobile-drawer-2\">\n            <span class=\"sr-only\">Toggle menu</span>\n            <svg aria-hidden=\"true\" class=\"rvt-drawer-button-open\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\">\n                <g fill=\"currentColor\">\n                    <path d=\"M15,3H1A1,1,0,0,1,1,1H15a1,1,0,0,1,0,2Z\"/>\n                    <path d=\"M15,9H1A1,1,0,0,1,1,7H15a1,1,0,0,1,0,2Z\"/>\n                    <path d=\"M15,15H1a1,1,0,0,1,0-2H15a1,1,0,0,1,0,2Z\"/>\n                </g>\n            </svg>\n            <svg aria-hidden=\"true\" class=\"rvt-drawer-button-close\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\">\n                <path fill=\"currentColor\" d=\"M9.41,8l5.29-5.29a1,1,0,0,0-1.41-1.41L8,6.59,2.71,1.29A1,1,0,0,0,1.29,2.71L6.59,8,1.29,13.29a1,1,0,1,0,1.41,1.41L8,9.41l5.29,5.29a1,1,0,0,0,1.41-1.41Z\"/>\n            </svg>\n        </button>\n    </div>\n    <!--\n        Drawer - small screens only\n        NOTE: If we are going to give people the option to use the drawer\n        on desktop as well, a combo of duplicating markup and showing/hiding\n        is probably the best way to handle that kind of flexibility.\n        We'll just need to be clear about it in the documentation.\n    -->\n    <div class=\"rvt-drawer\" aria-hidden=\"true\" id=\"mobile-drawer-2\">\n        <!-- Drawer nav -->\n        <nav class=\"rvt-drawer__nav\" role=\"navigation\">\n            <ul>\n                <li class=\"has-children\">\n                    <button type=\"button\" class=\"rvt-header-id__profile rvt-header-id__profile--drawer\" data-subnav-toggle=\"subnav-id\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                        <span class=\"rvt-header-id__avatar\" aria-hidden=\"true\">RS</span>\n                        <span class=\"rvt-header-id__user rvt-header-id__user--has-dropdown\">rswanson</span>\n                    </button>\n                    <div id=\"subnav-id\" role=\"menu\" aria-hidden=\"true\">\n                        <ul>\n                            <li>\n                                <a href=\"#\">Account settings</a>\n                            </li>\n                            <li>\n                                <a href=\"#\">Admin task one</a>\n                            </li>\n                            <li>\n                                <a href=\"#\">Admin task two</a>\n                            </li>\n                            <li>\n                                <a href=\"\">Log out</a>\n                            </li>\n                        </ul>\n                    </div>\n                </li>\n                <li>\n                    <a href=\"#\">Nav one</a>\n                </li>\n                <li class=\"has-children\">\n                    <button type=\"button\" data-subnav-toggle=\"subnav-1\" aria-haspopup=\"true\" aria-expanded=\"false\">Nav two</button>\n                    <div id=\"subnav-1\" role=\"menu\" aria-hidden=\"true\">\n                        <ul>\n                            <li>\n                                <a href=\"#\">Subnav one</a>\n                            </li>\n                            <li>\n                                <a href=\"#\">Subnav two</a>\n                            </li>\n                            <li>\n                                <a href=\"#\">Subnav three</a>\n                            </li>\n                        </ul>\n                    </div>\n                </li>\n                <li>\n                    <a href=\"#\" aria-current=\"page\">Nav three</a>\n                </li>\n                <li class=\"has-children\">\n                    <button type=\"button\" data-subnav-toggle=\"subnav-2\" aria-haspopup=\"true\" aria-expanded=\"false\">Nav four</button>\n                    <div id=\"subnav-2\" role=\"menu\" aria-hidden=\"true\">\n                        <ul>\n                            <li>\n                                <a href=\"#\">Subnav one</a>\n                            </li>\n                            <li>\n                                <a href=\"#\">Subnav two</a>\n                            </li>\n                            <li>\n                                <a href=\"#\">Subnav three</a>\n                            </li>\n                        </ul>\n                    </div>\n                </li>\n            </ul>\n            <button type=\"button\" class=\"rvt-drawer__bottom-close\">Close nav</button>\n        </nav>\n    </div>\n</header>\n{{< /example >}}\n\n### Navigation current state\nTo indicate the current page in the navigation you can add `aria-current=\"page\"` to the link in the main nav and/or the drawer for that page. Using `aria-current` informs screenreaders that the user is focused on the link to the current page.\n\n{{< code >}}<nav class=\"rvt-header__main-nav\" role=\"navigation\">\n    <ul>\n        <li><a href=\"#0\">Nav one</a></li>\n        <!-- aria-current also applies visual styling -->\n        <li><a href=\"#0\" aria-current=\"page\">Nav two</a></li>\n        <li><a href=\"#0\">Nav three</a></li>\n        <li><a href=\"#0\">Nav four</a></li>\n    </ul>\n</nav>\n{{< /code >}}\n\n### Implementation notes\nThe main navigation extension (`.rvt-header__main-nav`) will always need to be used with the drawer (`.rvt-drawer`) component. To allow for maximum flexibility, the markup in `.rvt-header__main-nav` needs to be duplicated inside of the `.rvt-drawer__nav` inside of the drawer. Starting at medium screen sizes (1080px–740px) and smaller the main nav extension is hidden using `display: none;` and the the `.rvt-drawer__nav` (with duplicate navigation) is shown using `display: block;`.\n\n### Main navigation with dropdowns\nTo create a nested navigation structure you can use [Rivet's standard dropdown menus]({{< ref \"components/navigation/dropdown.md\" >}}). Dropdown menus can be nested inside of any of the main navigation `li` elements and implemented using the appropriate data attributes on the dropdown.\n\n### Persistent drawer\nTo keep the Rivet drawer nav visible at large screen sizes, add the `.rvt-drawer-button--persistent` class to the `.rvt-drawer-button` element.\n\n### Nested navigation inside drawer\nTo create a nested navigation structure, you can use Rivet's dropdown menus along with the Rivet drawer nav. Dropdown menus can be nested inside of the Rivet drawer navigation `li` and accompanying `<div role=\"menu\">` (wrapping a nested `<ul>`) elements using the appropriate data attributes on the dropdown. Set the data attributes using the `data-subnav-toggle` attribute on the `button` element for the `li` navigation item. Then on each `div` sub navigation element set the id to the matching `data-subnav-toggle`.\n\nAdditionally, any navigation item that will contain sub navigation items needs the `has-children` class for appropriate styling in the dropdown menu. Lastly, each `<div>` sub navigation item needs`aria-hidden` set to true to hide the element until the dropdown menu toggle is clicked.\n\n{{< code >}}<div class=\"rvt-drawer\" aria-hidden=\"true\" id=\"mobile-drawer-3\">\n    <!-- Drawer nav -->\n    <nav class=\"rvt-drawer__nav\" role=\"navigation\">\n        <ul>\n            <li class=\"has-children\">\n                <button type=\"button\" class=\"rvt-header-id__profile rvt-header-id__profile--drawer\" data-subnav-toggle=\"subnav-id\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                    <span class=\"rvt-header-id__avatar\" aria-hidden=\"true\">RS</span>\n                    <span class=\"rvt-header-id__user rvt-header-id__user--has-dropdown\">rswanson</span>\n                </button>\n                <div id=\"subnav-id\" role=\"menu\" aria-hidden=\"false\">\n                    <ul>\n                        <li>\n                            <a href=\"#\">Account settings</a>\n                        </li>\n                        <li>\n                            <a href=\"#\">Admin task one</a>\n                        </li>\n                        <li>\n                            <a href=\"#\">Admin task two</a>\n                        </li>\n                        <li>\n                            <a href=\"\">Log out</a>\n                        </li>\n                    </ul>\n                </div>\n            </li>\n            <li><a href=\"#0\">Nav one</a></li>\n            <li class=\"has-children\">\n                <button type=\"button\" data-subnav-toggle=\"subnav-1\" aria-haspopup=\"true\" aria-expanded=\"false\">Nav two</button>\n                <div id=\"subnav-1\" role=\"menu\" aria-hidden=\"true\">\n                    <ul>\n                        <li>\n                            <a href=\"#\">Subnav one</a>\n                        </li>\n                        <li>\n                            <a href=\"#\">Subnav two</a>\n                        </li>\n                        <li>\n                            <a href=\"#\">Subnav three</a>\n                        </li>\n                    </ul>\n                </div>\n            </li>\n            <li><a href=\"#0\">Nav three</a></li>\n            <li class=\"has-children\">\n                <button type=\"button\" data-subnav-toggle=\"subnav-2\" aria-haspopup=\"true\" aria-expanded=\"false\">Nav four</button>\n                <div id=\"subnav-2\" role=\"menu\" aria-hidden=\"true\">\n                    <ul>\n                        <li>\n                            <a href=\"#\">Subnav one</a>\n                        </li>\n                        <li>\n                            <a href=\"#\">Subnav two</a>\n                        </li>\n                        <li>\n                            <a href=\"#\">Subnav three</a>\n                        </li>\n                    </ul>\n                </div>\n            </li>\n        </ul>\n        <button type=\"button\" class=\"rvt-drawer__bottom-close\">Close nav</button>\n    </nav>\n</div>\n{{< /code >}}\n\n### Identity menu dropdown\nWhen your application has multiple user-specific functions (e.g. \"Account settings\") you can wrap the contents of the `.rvt-header-id` extension in a standard Rivet dropdown component. Note that you'll need to add a `--has-dropdown` modifier class to the `.rvt-header-id__profile` element to remove the default styling.\n\n{{< code >}}<!-- ID menu w/ dropdown -->\n<div class=\"rvt-header-id\">\n    <div class=\"rvt-dropdown\">\n        <button type=\"button\" class=\"rvt-header-id__profile rvt-header-id__profile--has-dropdown rvt-dropdown__toggle\" data-dropdown-toggle=\"id-dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n            <span class=\"rvt-header-id__avatar\" aria-hidden=\"true\">RS</span>\n            <span class=\"rvt-header-id__user\">rswanson</span>\n            <svg aria-hidden=\"true\" class=\"rvt-m-left-xs\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\">\n                <path fill=\"currentColor\" d=\"M8,12.46a2,2,0,0,1-1.52-.7L1.24,5.65a1,1,0,1,1,1.52-1.3L8,10.46l5.24-6.11a1,1,0,0,1,1.52,1.3L9.52,11.76A2,2,0,0,1,8,12.46Z\"/>\n            </svg>\n        </button>\n        <div class=\"rvt-dropdown__menu rvt-header-id__menu\" id=\"id-dropdown\" aria-hidden=\"true\">\n            <a href=\"#\">Account settings</a>\n            <a href=\"#\">Admin task one</a>\n            <a href=\"#\">Admin task two</a>\n            <div role=\"group\" aria-label=\"User actions\">\n                <a href=\"\">Log out</a>\n            </div>\n        </div>\n    </div>\n</div>\n{{< /code >}}\n\n## Light background variant\nFor applications that use a light gray background/stage, the header can also be used with the modifier class `.rvt-header--light`. This will give the header a white background color to help provide contrast against the stage.\n\nIf you choose to use a light gray background for your app we recommend a gray no darker than `#f7f7f7`.\n\n{{< code >}}<header class=\"rvt-header rvt-header--light\" role=\"banner\">\n    Header markup...\n</header>\n{{< /code >}}\n\n## Skip navigation link\nUsers that browse websites using a keyboard only need a fast way to skip to the main content of an application without having to tab through each navigation item. **All versions** of the Rivet header should include a skip link that is only visible when in focus. The skip link should be the first focus-able element in the DOM and link via an `id` attribute to the `<main>` element of you application.\n\n## JavaScript API (Drawer)\nThe Rivet header uses JavaScript to toggle the visibility of the \"Drawer\" that contains navigation on smaller screens. The Rivet `Drawer` JavaScript component exposes a few APIs that you can use in your own scripts.\n\n{{< apidocs type=\"methods\" >}}{{< /apidocs >}}\n\n### Custom events\n\n{{< apidocs type=\"events\" >}}{{< /apidocs >}}\n\n#### Custom event example\nNote here that the `event.detail.name()` property of the `customEvent` object is a function that returns a String. Read more about custom events on the [MDN web docs](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent).\n\n{{< code lang=\"js\" >}}// Listen for a custom \"drawerOpen\" event\ndocument.addEventListener('drawerOpen', event => {\n  if (event.detail.name() === 'my-drawer') {\n    alert('Hey, you opened the drawer!')\n  }\n  // Maybe send some data via an AJAX request, etc...\n}, false);\n{{< /code >}}\n",
        "tags": [],
        "description": "The Rivet header provides consistent branding and flexible navigation layout for your application."
    },
    {
        "uri": "components/navigation/pagination",
        "title": "Pagination",
        "content": "Pagination Example\n{{}}\n\n            Previous\n\n            4\n\n            5\n\n            6\n\n            Next\n\n{{}}\n\nWhen to use\nUse when a user's action returns a large data set such as search results, or a large number of rows in a data table to break results into multiple pages to help with load times.\n\nWhen to consider something else\nWith smaller amounts of data consider displaying the whole dataset in one page that users can scroll through instead of breaking it into pages.\n\nAccessibility\nThe pagination component is wrapped in a nav element so that it is announced to assistive technologies. Use an aria-label attribute to describe the purpose of your pagination. This will help assistive technologies distinguish between navigation sections on pages that use more than one `` element.\n\nAccessible dynamic pagination\nThis article on a11ymatters.com has some really good tips on implementing dynamic aria-label(s) on pagination items based on how many pages are returned.\n\nImplementation\nWhen using the .is-disabled classes to create pagination links that appear to be disabled, add a tabindex=\"-1\" attribute to the ` tag so that it removes the disabled link from the tab order. It's also advisable to use JavaScript to disable the link's default functionality with the .preventDefault()` method.\n\nPositioning\nThe pagination component is left-aligned by default, but you can easily center or right-align it using the rvt-pagination--center or rvt-pagination--right modifier classes.\n\n{{}}\n\n            Previous\n\n            1\n\n            2\n\n            3\n\n            4\n\n            Next\n\n{{}}\n\nSmall pagination\nAdd the CSS modifier class .rvt-pagination--small if you need to display the pagination component at a smaller size.\n\n{{}}\n\n            Previous\n\n            4\n\n            5\n\n            6\n\n            Next\n\n{{}}\n",
        "rawContent": "## Pagination Example\n{{< example lang=\"html\" >}}<nav role=\"navigation\" aria-label=\"Default results pages\">\n    <ul class=\"rvt-pagination\">\n        <li class=\"rvt-pagination__item\">\n            <a href=\"#\" aria-label=\"Previous set of pages\">Previous</a>\n        </li>\n        <li class=\"rvt-pagination__item\">\n            <a href=\"#\" aria-label=\"Page 4\">4</a>\n        </li>\n        <li class=\"rvt-pagination__item is-active\" aria-current=\"true\">\n            <a href=\"#\" aria-label=\"Page 5, current page\">5</a>\n        </li>\n        <li class=\"rvt-pagination__item\">\n            <a href=\"#\" aria-label=\"Page 6\">6</a>\n        </li>\n        <li class=\"rvt-pagination__item\">\n            <a href=\"#\" aria-label=\"Next set of pages\">Next</a>\n        </li>\n    </ul>\n</nav>\n{{< /example >}}\n\n## When to use\nUse when a user's action returns a large data set such as search results, or a large number of rows in a data table to break results into multiple pages to help with load times.\n\n## When to consider something else\nWith smaller amounts of data consider displaying the whole dataset in one page that users can scroll through instead of breaking it into pages.\n\n## Accessibility\nThe pagination component is wrapped in a `nav` element so that it is announced to assistive technologies. Use an `aria-label` attribute to describe the purpose of your pagination. This will help assistive technologies distinguish between navigation sections on pages that use more than one `<nav>` element.\n\n### Accessible dynamic pagination\nThis [article on a11ymatters.com](http://www.a11ymatters.com/pattern/pagination/) has some really good tips on implementing dynamic `aria-label`(s) on pagination items based on how many pages are returned.\n\n## Implementation\nWhen using the `.is-disabled` classes to create pagination links that appear to be disabled, add a `tabindex=\"-1\"` attribute to the `<a>` tag so that it removes the disabled link from the tab order. It's also advisable to use JavaScript to disable the link's default functionality with the `.preventDefault()` method.\n\n### Positioning\nThe pagination component is left-aligned by default, but you can easily center or right-align it using the `rvt-pagination--center` or `rvt-pagination--right` modifier classes.\n\n{{< example lang=\"html\" >}}<nav role=\"navigation\" aria-label=\"Right-aligned results pages\">\n    <ul class=\"rvt-pagination rvt-pagination--right\">\n        <li class=\"rvt-pagination__item is-disabled\">\n            <a href=\"#\" aria-label=\"Previous pages\" tabindex=\"-1\">Previous</a>\n        </li>\n        <li class=\"rvt-pagination__item\">\n            <a href=\"#\" aria-label=\"Page 1\">1</a>\n        </li>\n        <li class=\"rvt-pagination__item\">\n            <a href=\"#\" aria-label=\"Page 2\">2</a>\n        </li>\n        <li class=\"rvt-pagination__item\">\n            <a href=\"#\" aria-label=\"Page 3\">3</a>\n        </li>\n        <li class=\"rvt-pagination__item is-active\" aria-current=\"true\">\n            <a href=\"#\" aria-label=\"Page 4, current page\">4</a>\n        </li>\n        <li class=\"rvt-pagination__item\">\n            <a href=\"#\" arial-label=\"Nex set of pages\">Next</a>\n        </li>\n    </ul>\n</nav>\n{{< /example >}}\n\n### Small pagination\nAdd the CSS modifier class `.rvt-pagination--small` if you need to display the pagination component at a smaller size.\n\n{{< example lang=\"html\" >}}<nav role=\"navigation\" aria-label=\"Small results pages\">\n    <ul class=\"rvt-pagination rvt-pagination--small\">\n        <li class=\"rvt-pagination__item\">\n            <a href=\"#\" aria-label=\"Previous set of pages\">Previous</a>\n        </li>\n        <li class=\"rvt-pagination__item\">\n            <a href=\"#\" aria-label=\"Page 4\">4</a>\n        </li>\n        <li class=\"rvt-pagination__item is-active\" aria-current=\"true\">\n            <a href=\"#\" aria-label=\"Page 5, current page\">5</a>\n        </li>\n        <li class=\"rvt-pagination__item\">\n            <a href=\"#\" aria-label=\"Page 6\">6</a>\n        </li>\n        <li class=\"rvt-pagination__item\">\n            <a href=\"#\" aria-label=\"Next set of pages\">Next</a>\n        </li>\n    </ul>\n</nav>\n{{< /example >}}\n",
        "tags": [],
        "description": "The pagination component is used to break up large sets of data across multiple pages."
    },
    {
        "uri": "components/overlays/alerts",
        "title": "Alerts",
        "content": "Page-level alerts\n{{}}\n    Scheduled System Maintenance\n    This system will be unavailable on August 1st due to scheduled system maintenance. Please check back on August 2nd.\n\n        Dismiss this alert\n\n    Thank you!\n    We have received your application. Check your email in a few weeks to find out if you’ve been admitted.\n\n        Dismiss this alert\n\n    Unsaved Changes\n    Your changes have not been saved. To save your changes, click ‘Save my changes’ or click ‘Cancel’ to exit without saving.\n\n        Dismiss this alert\n\n    Incorrect User ID or Password\n    The user ID and password you entered do not match. Please check your entries and try again. Forgot your user ID or password?\n\n{{}}\n\nDeprecated page-level alert class names\nVersion 1.1.0 of Rivet updated the CSS class names used by page-level alerts to be consistent with class names used by other components. The table below shows the deprecated class names and their replacements.\n\nThe deprecated class names will still work in version 1.1.0. However, they will be removed in a future release.\n\n    Rivet page-level alert CSS classes: deprecated and new\n\n        Deprecated\n        New in 1.1.0\n\n            .rvt-alert--message\n            .rvt-alert--warning\n\n            .rvt-alert--error\n            .rvt-alert--danger\n\nStandalone inline alerts\nInline alerts in Rivet should be used for form validation situations where the standard inline form input validation error would not make sense. For instance, marking a group of radio buttons or checkboxes will give an input error. Adding the rvt-inline-alert--standalone modifier class to the standard inline alert element will give the alert a subtle background color and left border to add some visual contrast.\n\n{{}}\n\n        This field is required to continue.\n\n        This field is required to continue.\n\n        This field is required to continue.\n\n        This field is required to continue.\n\n{{}}\n\n{{}}\nFor more information on techniques for better form validation UX, see this list of form validation tips.\n{{}}\n\nWhen using a standalone inline alert with a group of inputs, make sure to add the aria-describedby attribute to each input (in this case radio buttons) that is invalid. The aria-describedy by value should correspond to a matching id attribute on the .rvt-inline-alert__message element.\n\n{{}}\n\n        Radio list\n\n                Option one\n\n                Option two\n\n                Option three disabled\n\n                Option four checked and disabled\n\n                This field is required to continue.\n\n{{}}\n\nDeprecated standalone inline alert class names\nVersion 1.1.0 of Rivet updated the CSS class names used by standalone inline alerts to be consistent with class names used by other components. The table below shows the deprecated class names and their replacements.\n\nThe deprecated class names will still work in version 1.1.0. However, they will be removed in a future release.\n\n    Rivet standalone inline alert CSS classes: deprecated and new\n\n        Deprecated\n        New in 1.1.0\n\n            .rvt-inline-alert--has-info\n            .rvt-inline-alert--info\n\n            .rvt-inline-alert--is-valid\n            .rvt-inline-alert--success\n\n            .rvt-inline-alert--has-warning\n            .rvt-inline-alert--warning\n\n            .rvt-inline-alert--is-invalid\n            .rvt-inline-alert--danger\n\nAlert lists\nAlert lists provide a way to group a set of errors together. For instance, when summarizing a list of errors on a long form.\n\n{{}}\n\n            Please correct the following errors.\n            Alert lists are useful for summarizing multiple errors on a page.\n\n            Errors can have a title only, with a link to the invalid element.\n\n            Error message three is soooo long!\n            Lorem ipsum dolor sit amet, consectetur adipisicing elit. Molestias veniam iste, nesciunt aliquam illum quaerat hic expedita ducimus error assumenda explicabo quos harum delectus deserunt, autem corrupti quas doloremque. Veritatis.\n\n{{}}\n\nWhen to use\nTo notify users about system status including error, warnings, and updates.\nTo notify users they’ve successfully completed a task\nUse along with inline validation alerts to summarize multiple errors on longer forms\n\nWhen to use something else\nWhen it’s necessary to interrupt the user’s work flow.\nWhen user input/action is required to continue working\nIf action taken by the user will result in losing/destroying their work, use a modal dialog that allows the user to confirm the destructive action.\n\nAccessibility\nAlerts should use the role=\"alert\" attribute\nAlerts that have a dismiss or close button should use the role=\"alertdialog\" attribute\nUse the aria-labelledby attribute to link the alert title with the alert element\nDynamically rendered alerts are automatically announced by most screen readers, but it’s important to note that screen readers will not inform users of alerts that are present before a page has finished loading\n\nAlert list accessibility\nAlert lists can be particularly useful for summarizing multiple errors on a page, and providing links to the invalid fields. These summaries are especially helpful for non-sighted users, who will not receive the visual cue provided by multiple inline alerts appearing on the page when a form is submitted.\n\nMicrocopy notes\nAlert title should be clear and concise. “Success!” rather than “Application was submitted successfully!\"\nAlert message should be descriptive and should clearly articulate the problem the user has encountered or the information you are trying to convey to the user. “The user ID and password you entered do not match” is more clear than “Unauthorized”.\nWhere appropriate, alert title should be a link to the position on the page where the invalid element can be found.\nAlert message should offer next steps where appropriate.\n\nGood example:\nScheduled System Maintenance\nThis system will be unavailable on August 1st due to scheduled system maintenance. Please check back on August 2nd.\n\nClear title; explains that maintenance was scheduled and expected\nInforms the user of the length of the outage\nLets the user know when the system is expected to be available\n\nBad example:\nSystem is Down\nThe system is currently unavailable.\n\nDoesn't indicate that maintenance was scheduled and expected\nDoesn't inform the user how long the system will be unavailable\nDoesn't let the user know when the system is expected to be available again\n\nSee the content guide section for additional information.\n\nImplementation\nPage-level alerts can be used with an optional dismiss button (X icon), however it’s important to avoid allowing users to dismiss alerts that are used to display error messages. Do allow users to dismiss alerts wherever appropriate.\nAvoid using error messages that automatically disappear. If a user doesn’t have time to read the error message they may not know how to correct the problem once it has been automatically removed.\nWrite helpful alert messages. For errors, Include a brief description of the problem and how to fix it. Check out the Voice and tone/microcopy section for more information.\n\nJavaScript API\nThe Rivet alert component comes with a couple of methods you can use to programmatically control alerts. The init() method is called by default when rivet.js is loaded. Alerts are dismissed when clicking a button element within the alert with the data-alert-close attribute. You can also dismiss an alert by calling the Alert.dismiss() method in your own script.\n\n{{}}\nIn previous versions of Rivet, alerts were dismissed by clicking a button element within the alert with the .rvt-alert__dismiss class.\n\nIn an effort to decouple CSS classes from JavaScript behavior, the .rvt-alert__dismiss class has been deprecated in favor of the data-alert-close attribute. The examples on this page have been updated to reflect this new approach.\n\nWe recommend updating your application to use the latest version of the alert.\n{{}}\n\nAvailable methods\n\n{{}}{{}}\n",
        "rawContent": "## Page-level alerts\n{{< example lang=\"html\" >}}<div class=\"rvt-alert rvt-alert--info rvt-m-bottom-md\" role=\"alertdialog\" aria-labelledby=\"information-alert-title\">\n    <h1 class=\"rvt-alert__title\" id=\"information-alert-title\">Scheduled System Maintenance</h1>\n    <p class=\"rvt-alert__message\">This system will be unavailable on August 1st due to scheduled system maintenance. Please check back on August 2nd.</p>\n    <button type=\"button\" class=\"rvt-alert__dismiss\" data-alert-close>\n        <span class=\"v-hide\">Dismiss this alert</span>\n        <svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\">\n            <path fill=\"currentColor\" d=\"M9.41,8l5.29-5.29a1,1,0,0,0-1.41-1.41L8,6.59,2.71,1.29A1,1,0,0,0,1.29,2.71L6.59,8,1.29,13.29a1,1,0,1,0,1.41,1.41L8,9.41l5.29,5.29a1,1,0,0,0,1.41-1.41Z\"/>\n        </svg>\n    </button>\n</div>\n\n<div class=\"rvt-alert rvt-alert--success rvt-m-bottom-md\" role=\"alertdialog\" aria-labelledby=\"success-alert-title\">\n    <h1 class=\"rvt-alert__title\" id=\"success-alert-title\">Thank you!</h1>\n    <p class=\"rvt-alert__message\">We have received your application. Check your email in a few weeks to find out if you’ve been admitted.</p>\n    <button type=\"button\" class=\"rvt-alert__dismiss\" data-alert-close>\n        <span class=\"v-hide\">Dismiss this alert</span>\n        <svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\">\n            <path fill=\"currentColor\" d=\"M9.41,8l5.29-5.29a1,1,0,0,0-1.41-1.41L8,6.59,2.71,1.29A1,1,0,0,0,1.29,2.71L6.59,8,1.29,13.29a1,1,0,1,0,1.41,1.41L8,9.41l5.29,5.29a1,1,0,0,0,1.41-1.41Z\"/>\n        </svg>\n    </button>\n</div>\n\n<div class=\"rvt-alert rvt-alert--warning rvt-m-bottom-md\" role=\"alertdialog\" aria-labelledby=\"warning-alert-title\">\n    <h1 class=\"rvt-alert__title\" id=\"warning-alert-title\">Unsaved Changes</h1>\n    <p class=\"rvt-alert__message\">Your changes have not been saved. To save your changes, click ‘Save my changes’ or click ‘Cancel’ to exit without saving.</p>\n    <button type=\"button\" class=\"rvt-alert__dismiss\" data-alert-close>\n        <span class=\"v-hide\">Dismiss this alert</span>\n        <svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\">\n            <path fill=\"currentColor\" d=\"M9.41,8l5.29-5.29a1,1,0,0,0-1.41-1.41L8,6.59,2.71,1.29A1,1,0,0,0,1.29,2.71L6.59,8,1.29,13.29a1,1,0,1,0,1.41,1.41L8,9.41l5.29,5.29a1,1,0,0,0,1.41-1.41Z\"/>\n        </svg>\n    </button>\n</div>\n\n<div class=\"rvt-alert rvt-alert--danger\" role=\"alert\" aria-labelledby=\"error-alert-title\">\n    <h1 class=\"rvt-alert__title\" id=\"danger-alert-title\">Incorrect User ID or Password</h1>\n    <p class=\"rvt-alert__message\">The user ID and password you entered do not match. Please check your entries and try again. <a href=\"#\">Forgot your user ID or password?</a></p>\n</div>\n{{< /example >}}\n\n### Deprecated page-level alert class names\nVersion `1.1.0` of Rivet updated the CSS class names used by page-level alerts to be consistent with class names used by other components. The table below shows the deprecated class names and their replacements.\n\nThe deprecated class names will still work in version `1.1.0`. However, they will be removed in a future release.\n\n<table class=\"rvt-m-top-lg\">\n    <caption class=\"rvt-sr-only\">Rivet page-level alert CSS classes: deprecated and new</caption>\n    <thead>\n        <th>Deprecated</th>\n        <th>New in <code>1.1.0</code></th>\n    </thead>\n    <tbody>\n        <tr>\n            <td><code>.rvt-alert--message</code></td>\n            <td><code>.rvt-alert--warning</code></td>\n        </tr>\n        <tr>\n            <td><code>.rvt-alert--error</code></td>\n            <td><code>.rvt-alert--danger</code></td>\n        </tr>\n    </tbody>\n</table>\n\n## Standalone inline alerts\nInline alerts in Rivet should be used for form validation situations where [the standard inline form input validation]({{< ref \"components/forms/text-input.md#inline-validation-states\" >}}) error would not make sense. For instance, marking a group of radio buttons or checkboxes will give an input error. Adding the `rvt-inline-alert--standalone` modifier class to the standard inline alert element will give the alert a subtle background color and left border to add some visual contrast.\n\n{{< example lang=\"html\" >}}\n<div class=\"rvt-inline-alert rvt-inline-alert--standalone rvt-inline-alert--info\">\n    <span class=\"rvt-inline-alert__icon\">\n        <svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\">\n            <g fill=\"currentColor\">\n                <path d=\"M8,16a8,8,0,1,1,8-8A8,8,0,0,1,8,16ZM8,2a6,6,0,1,0,6,6A6,6,0,0,0,8,2Z\"/>\n                <path d=\"M8,12a1,1,0,0,1-1-1V8A1,1,0,0,1,9,8v3A1,1,0,0,1,8,12Z\"/>\n                <circle cx=\"8\" cy=\"5\" r=\"1\"/>\n            </g>\n        </svg>\n    </span>\n    <span class=\"rvt-inline-alert__message\" id=\"radio-list-message\">\n        This field is required to continue.\n    </span>\n</div>\n\n<div class=\"rvt-inline-alert rvt-inline-alert--standalone rvt-inline-alert--success\">\n    <span class=\"rvt-inline-alert__icon\">\n        <svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\">\n            <g fill=\"currentColor\">\n                <path d=\"M10.2,5.4,7.1,9.53,5.67,8.25a1,1,0,1,0-1.34,1.5l2.05,1.82a1.29,1.29,0,0,0,.83.32h.12a1.23,1.23,0,0,0,.88-.49L11.8,6.6a1,1,0,1,0-1.6-1.2Z\"/>\n                <path d=\"M8,0a8,8,0,1,0,8,8A8,8,0,0,0,8,0ZM8,14a6,6,0,1,1,6-6A6,6,0,0,1,8,14Z\"/>\n            </g>\n        </svg>\n    </span>\n    <span class=\"rvt-inline-alert__message\" id=\"radio-list-message\">\n        This field is required to continue.\n    </span>\n</div>\n\n<div class=\"rvt-inline-alert rvt-inline-alert--standalone rvt-inline-alert--warning\">\n    <span class=\"rvt-inline-alert__icon\">\n        <svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\">\n            <g fill=\"currentColor\">\n                <path d=\"M11,9H5A1,1,0,0,1,5,7h6a1,1,0,0,1,0,2Z\"/>\n                <path d=\"M8,16a8,8,0,1,1,8-8A8,8,0,0,1,8,16ZM8,2a6,6,0,1,0,6,6A6,6,0,0,0,8,2Z\"/>\n            </g>\n        </svg>\n    </span>\n    <span class=\"rvt-inline-alert__message\" id=\"radio-list-message\">\n        This field is required to continue.\n    </span>\n</div>\n\n<div class=\"rvt-inline-alert rvt-inline-alert--standalone rvt-inline-alert--danger\">\n    <span class=\"rvt-inline-alert__icon\">\n        <svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\">\n            <g fill=\"currentColor\">\n                <path d=\"M8,0a8,8,0,1,0,8,8A8,8,0,0,0,8,0ZM8,14a6,6,0,1,1,6-6A6,6,0,0,1,8,14Z\" />\n                <path d=\"M10.83,5.17a1,1,0,0,0-1.41,0L8,6.59,6.59,5.17A1,1,0,0,0,5.17,6.59L6.59,8,5.17,9.41a1,1,0,1,0,1.41,1.41L8,9.41l1.41,1.41a1,1,0,0,0,1.41-1.41L9.41,8l1.41-1.41A1,1,0,0,0,10.83,5.17Z\"/>\n            </g>\n        </svg>\n    </span>\n    <span class=\"rvt-inline-alert__message\" id=\"radio-list-message\">\n        This field is required to continue.\n    </span>\n</div>\n{{< /example >}}\n\n{{< alert variant=\"info\" title=\"More form validation tips\" >}}\nFor more information on techniques for better form validation UX, [see this list of form validation tips](../../forms/text-input/#form-validation-tips).\n{{< /alert >}}\n\nWhen using a standalone inline alert with a group of inputs, make sure to add the `aria-describedby` attribute to **each input** (in this case radio buttons) that is invalid. The `aria-describedy` by value should correspond to a matching `id` attribute on the `.rvt-inline-alert__message` element.\n\n\n{{< example lang=\"html\" >}}<form>\n    <fieldset>\n        <legend class=\"rvt-ts-23 rvt-text-bold rvt-m-bottom-sm\">Radio list</legend>\n        <ul class=\"rvt-plain-list\">\n            <li>\n                <input type=\"radio\" name=\"radio-demo-2\" id=\"radio-3\" aria-describedby=\"radio-list-message\">\n                <label for=\"radio-3\">Option one</label>\n            </li>\n            <li>\n                <input type=\"radio\" name=\"radio-demo-2\" id=\"radio-4\" aria-describedby=\"radio-list-message\">\n                <label for=\"radio-4\">Option two</label>\n            </li>\n            <li>\n                <input type=\"radio\" name=\"radio-demo-2\" id=\"radio-4-disabled\" aria-describedby=\"radio-list-message\">\n                <label for=\"radio-4-disabled\">Option three disabled</label>\n            </li>\n            <li>\n                <input type=\"radio\" name=\"radio-demo-2\" id=\"radio-5\" aria-describedby=\"radio-list-message\">\n                <label for=\"radio-5\">Option four checked and disabled</label>\n            </li>\n        </ul>\n        <div class=\"rvt-inline-alert rvt-inline-alert--standalone rvt-inline-alert--danger\">\n            <span class=\"rvt-inline-alert__icon\">\n                <svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\">\n                    <g fill=\"currentColor\">\n                        <path d=\"M8,0a8,8,0,1,0,8,8A8,8,0,0,0,8,0ZM8,14a6,6,0,1,1,6-6A6,6,0,0,1,8,14Z\" />\n                        <path d=\"M10.83,5.17a1,1,0,0,0-1.41,0L8,6.59,6.59,5.17A1,1,0,0,0,5.17,6.59L6.59,8,5.17,9.41a1,1,0,1,0,1.41,1.41L8,9.41l1.41,1.41a1,1,0,0,0,1.41-1.41L9.41,8l1.41-1.41A1,1,0,0,0,10.83,5.17Z\"/>\n                    </g>\n                </svg>\n            </span>\n            <span class=\"rvt-inline-alert__message\" id=\"radio-list-message\">\n                This field is required to continue.\n            </span>\n        </div>\n    </fieldset>\n</form>\n{{< /example >}}\n\n### Deprecated standalone inline alert class names\nVersion `1.1.0` of Rivet updated the CSS class names used by standalone inline alerts to be consistent with class names used by other components. The table below shows the deprecated class names and their replacements.\n\nThe deprecated class names will still work in version `1.1.0`. However, they will be removed in a future release.\n\n<table class=\"rvt-m-top-lg\">\n    <caption class=\"rvt-sr-only\">Rivet standalone inline alert CSS classes: deprecated and new</caption>\n    <thead>\n        <th>Deprecated</th>\n        <th>New in <code>1.1.0</code></th>\n    </thead>\n    <tbody>\n        <tr>\n            <td><code>.rvt-inline-alert--has-info</code></td>\n            <td><code>.rvt-inline-alert--info</code></td>\n        </tr>\n        <tr>\n            <td><code>.rvt-inline-alert--is-valid</code></td>\n            <td><code>.rvt-inline-alert--success</code></td>\n        </tr>\n        <tr>\n            <td><code>.rvt-inline-alert--has-warning</code></td>\n            <td><code>.rvt-inline-alert--warning</code></td>\n        </tr>\n        <tr>\n            <td><code>.rvt-inline-alert--is-invalid</code></td>\n            <td><code>.rvt-inline-alert--danger</code></td>\n        </tr>\n    </tbody>\n</table>\n\n## Alert lists\nAlert lists provide a way to group a set of errors together. For instance, when summarizing a list of errors on a long form.\n\n{{< example lang=\"html\" >}}<ul class=\"rvt-alert-list\">\n    <li class=\"rvt-alert-list__item\">\n        <div class=\"rvt-alert rvt-alert--danger\" role=\"alert\">\n            <h1 class=\"rvt-alert__title\">Please correct the following errors.</h1>\n            <p class=\"rvt-alert__message\">Alert lists are useful for summarizing multiple errors on a page.</p>\n        </div>\n    </li>\n    <li class=\"rvt-alert-list__item\">\n        <div class=\"rvt-alert rvt-alert--danger\" role=\"alert\">\n            <h1 class=\"rvt-alert__title\">Errors can have a title only, <a href=\"#\">with a link</a> to the invalid element.</h1>\n        </div>\n    </li>\n    <li class=\"rvt-alert-list__item\">\n        <div class=\"rvt-alert rvt-alert--danger\" role=\"alert\">\n            <h1 class=\"rvt-alert__title\">Error message three is soooo long!</h1>\n            <p class=\"rvt-alert__message\">Lorem ipsum dolor sit amet, consectetur adipisicing elit. Molestias veniam iste, nesciunt aliquam illum quaerat hic expedita ducimus error assumenda explicabo quos harum delectus deserunt, autem corrupti quas doloremque. Veritatis.</p>\n        </div>\n    </li>\n</ul>\n{{< /example >}}\n\n## When to use\n- To notify users about system status including error, warnings, and updates.\n- To notify users they’ve successfully completed a task\n- Use along with inline validation alerts to summarize multiple errors on longer forms\n\n## When to use something else\n- When it’s necessary to interrupt the user’s work flow.\n- When user input/action is required to continue working\n- If action taken by the user will result in losing/destroying their work, use a modal dialog that allows the user to confirm the destructive action.\n\n## Accessibility\n- Alerts should use the `role=\"alert\"` attribute\n- Alerts that have a dismiss or close button should use the `role=\"alertdialog\"` attribute\n- Use the `aria-labelledby` attribute to link the alert title with the alert element\n- Dynamically rendered alerts are automatically announced by most screen readers, but it’s important to note that screen readers will not inform users of alerts that are present before a page has finished loading\n\n### Alert list accessibility\nAlert lists can be particularly useful for summarizing multiple errors on a page, and providing links to the invalid fields. These summaries are especially helpful for non-sighted users, who will not receive the visual cue provided by multiple inline alerts appearing on the page when a form is submitted.\n\n## Microcopy notes\n- Alert title should be clear and concise. “Success!” rather than “Application was submitted successfully!\"\n- Alert message should be descriptive and should clearly articulate the problem the user has encountered or the information you are trying to convey to the user. “The user ID and password you entered do not match” is more clear than “Unauthorized”.\n- Where appropriate, alert title should be a link to the position on the page where the invalid element can be found.\n- Alert message should offer next steps where appropriate.\n\n### Good example:\n**Scheduled System Maintenance**\nThis system will be unavailable on August 1st due to scheduled system maintenance. Please check back on August 2nd.\n\n- Clear title; explains that maintenance was scheduled and expected\n- Informs the user of the length of the outage\n- Lets the user know when the system is expected to be available\n\n### Bad example:\n**System is Down**\nThe system is currently unavailable.\n\n- Doesn't indicate that maintenance was scheduled and expected\n- Doesn't inform the user how long the system will be unavailable\n- Doesn't let the user know when the system is expected to be available again\n\nSee the [content guide section](/content-guide) for additional information.\n\n### Implementation\n- Page-level alerts can be used with an optional dismiss button (X icon), however it’s important to avoid allowing users to dismiss alerts that are used to display error messages. Do allow users to dismiss alerts wherever appropriate.\n- Avoid using error messages that automatically disappear. If a user doesn’t have time to read the error message they may not know how to correct the problem once it has been automatically removed.\n- Write helpful alert messages. For errors, Include a brief description of the problem and how to fix it. Check out the Voice and tone/microcopy section for more information.\n\n## JavaScript API\nThe Rivet alert component comes with a couple of methods you can use to programmatically control alerts. The `init()` method is called by default when `rivet.js` is loaded. Alerts are dismissed when clicking a `button` element within the alert with the `data-alert-close` attribute. You can also dismiss an alert by calling the `Alert.dismiss()` method in your own script.\n\n{{< alert variant=\"warning\" title=\"Alert dismissal class deprecation\" >}}\nIn previous versions of Rivet, alerts were dismissed by clicking a `button` element within the alert with the `.rvt-alert__dismiss` class. \n\nIn an effort to [decouple CSS classes from JavaScript behavior](https://github.com/indiana-university/rivet-source/issues/85), the `.rvt-alert__dismiss` class has been deprecated in favor of the `data-alert-close` attribute. The examples on this page have been updated to reflect this new approach. \n\nWe recommend updating your application to use the latest version of the alert.\n{{< /alert >}}\n\n### Available methods\n\n{{< apidocs type=\"methods\" >}}{{< /apidocs >}}\n",
        "tags": [],
        "description": "Alerts are used to display brief important messages to users. They are designed to attract the user’s attention, but not interrupt their work."
    },
    {
        "uri": "components/overlays/loading-indicator",
        "title": "Loading indicator",
        "content": "{{}}\nThe loading indicator is new as of 1.2.0. If you need help moving to 1.2.0, see our instructions for updating Rivet.\n{{}}\n\nDefault\n{{}}\n{{}}\n\nThe loading indicator can be used to indicate the loading of page content, such as when a single page application makes a request for new content. The loading indicator element does not come with any specific positioning styles, so you'll need to position it appropriately in the container where your content will eventually display once it’s loaded.\n\nUsing the loading indicator inside buttons\nIt can be helpful to indicate that the submit button is in an inactive/loading state, such as when a user submits a form and the data is being sent to the server. The loading indicator can be used inside of buttons by applying the .rvt-button--loading modifier class.\n\nButton loading state\nWhile the button is in the loading state, the aria-busy=\"true\" and disabled attributes should be applied. This helps prevent users from trying to resubmit data while the current form is being submitted.\n\n{{}}\n  Update settings\n\n{{}}\n\nHandling button text display while in the loading state\nWhen using the loading indicator inside buttons, the visible button text should be wrapped in a .rvt-button__content class (see above example). This class visually hides the button text when the loading indicator is visible while maintaining the display width of the button. This class also hides any other content inside the button, such as SVG icons.\n\n{{}}\nIn previous versions of Rivet, we used the .rivet-button__text class to wrap a button’s content. However, we realized that the class name implied that non-text button content such as icons did not need to be wrapped to be hidden.\n\nIf you are using .rivet-buttontext, please update your application to use the new .rivet-buttoncontent class, as the previous class is now deprecated.\n{{}}\n\nLoading indicator sizes\nThe loading indicator comes in multiple sizes that follow the standard Rivet size naming conventions used for spacing and typography.\n\nrvt-loader--xxs\nrvt-loader--xs - The default size. Same as rvt-loader with no modifier. NOTE: This is the only size usable inside a button.\nrvt-loader--sm\nrvt-loader--md\nrvt-loader--lg\nrvt-loader--xl\nrvt-loader--xxl\n\n{{}}\n\n{{}}\n",
        "rawContent": "{{< alert variant=\"info\" title=\"New in Rivet 1.2.0\" >}}\nThe loading indicator is new as of 1.2.0. If you need help moving to 1.2.0, see our [instructions for updating Rivet](/components/#updating-the-rivet-npm-package\").\n{{< /alert >}}\n\n## Default\n{{< example lang=\"html\" >}}<div class=\"rvt-loader\" aria-label=\"Content loading\"></div>\n{{< /example >}}\n\nThe loading indicator can be used to indicate the loading of page content, such as when a single page application makes a request for new content. The loading indicator element does not come with any specific positioning styles, so you'll need to position it appropriately in the container where your content will eventually display once it’s loaded.\n\n## Using the loading indicator inside buttons\nIt can be helpful to indicate that the submit button is in an inactive/loading state, such as when a user submits a form and the data is being sent to the server. The loading indicator can be used inside of buttons by applying the `.rvt-button--loading` modifier class.\n\n### Button loading state\nWhile the button is in the loading state, the `aria-busy=\"true\"` and `disabled` attributes should be applied. This helps prevent users from trying to resubmit data while the current form is being submitted.\n\n{{< example lang=\"html\" >}}<button class=\"rvt-button rvt-button--loading\" aria-busy=\"true\" disabled>\n  <span class=\"rvt-button__content\">Update settings</span>\n  <div class=\"rvt-loader rvt-loader--xs\" aria-label=\"Content loading\"></div>\n</button>\n{{< /example >}}\n\n### Handling button text display while in the loading state\nWhen using the loading indicator inside buttons, the visible button text should be wrapped in a `.rvt-button__content` class (see above example). This class visually hides the button text when the loading indicator is visible while maintaining the display width of the button. This class also hides any other content inside the button, such as SVG icons.\n\n{{< alert variant=\"warning\" title=\"Class deprecation\" >}}\nIn previous versions of Rivet, we used the `.rivet-button__text` class to wrap a button’s content. However, we realized that the class name implied that non-text button content such as icons did not need to be wrapped to be hidden. \n\nIf you are using `.rivet-button__text`, please update your application to use the new `.rivet-button__content` class, as the previous class is now deprecated.\n{{< /alert >}}\n\n## Loading indicator sizes\nThe loading indicator comes in multiple sizes that follow the standard Rivet size naming conventions used for [spacing]({{< ref \"/components/layout/spacing.md\" >}}) and [typography]({{< ref \"components/layout/typography.md\" >}}).\n\n- `rvt-loader--xxs`\n- `rvt-loader--xs` - The default size. Same as `rvt-loader` with no modifier. **NOTE**: This is the **only** size usable inside a button.\n- `rvt-loader--sm`\n- `rvt-loader--md`\n- `rvt-loader--lg`\n- `rvt-loader--xl`\n- `rvt-loader--xxl`\n\n{{< example lang=\"html\" >}}<div class=\"rvt-loader rvt-loader--xxs\" aria-label=\"Content loading\"></div>\n<div class=\"rvt-loader rvt-loader--xs\" aria-label=\"Content loading\"></div>\n<div class=\"rvt-loader rvt-loader--sm\" aria-label=\"Content loading\"></div>\n<div class=\"rvt-loader rvt-loader--md\" aria-label=\"Content loading\"></div>\n<div class=\"rvt-loader rvt-loader--lg\" aria-label=\"Content loading\"></div>\n<div class=\"rvt-loader rvt-loader--xl\" aria-label=\"Content loading\"></div>\n<div class=\"rvt-loader rvt-loader--xxl\" aria-label=\"Content loading\"></div>\n{{< /example >}}\n",
        "tags": [],
        "description": "The Rivet loading indicator helps notify users when their action is being processed"
    },
    {
        "uri": "components/overlays/modals",
        "title": "Modals",
        "content": "Modal example\n{{}}Open modal example\n\n            Modal title\n\n            Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\n            OK\n            Cancel\n\n            Close\n\n{{}}\n\nWhen to use\nFor single specific tasks related to a goal on the main page of the application\nTo help users determine information needed in their main workflow e.g. calculating a number, looking up a code\n\nWhen to consider something else\nWhen you need to display an error message consider using an alert on the page in which the error occurred.\nWhen you need to display large amounts of information for multiple tasks consider using a dedicated page instead.\n\nImplementation notes\nThe modal component is made up of the following elements:\n\n.rvt-modal and .rvt-modal__inner - An overlay and inner container, which wraps all other elements\n.rvt-modal__header — A header with a title that is used to label the modal\n.rvt-modal__body — A modal body that holds the main content of the modal\n.rvt-modal__controls — An optional footer element that holds modal controls, like \"Save\" and \"Cancel\"\n.rvt-modal__close — An optional close button at the top of the modal\n\nRequired elements\nThe only elements required in order for the modal to work are the .rvt-modal, .rvt-modalinner, and .rvt-modalbody, but it is advisable to use the .rvt-modalheader element to help describe what the modal is use for. Likewise, the .rvt-modalcontrols element provides an easy way to add additional actions to the modal like \"Save\" and \"Close\".\n\nModal controls\nThe .rvt-modal__controls element provides a space to add additional controls like buttons. It is advisable to stick to one or two buttons action buttons in a modal. The primary action should always appear as the left-most button in the group with secondary actions, like \"Cancel\" appearing after.\n\nModal set up\nTo use the modal component you'll need to do a few things. First, add the markup to your document.\n\n{{}}Open the modal\n\n    modal markup here...\n\n        button markup here...\n\n{{}}\n\nIn the code above, my-modal-id should correspond to the id attribute on the the .rvt-modal container and the data-modal-trigger attribute on a `` element that triggers the modal.\n\nThe data-modal-close attribute is used as a hook to close the modal. You can add the data-modal-close attribute to other buttons in the modal like a \"Cancel\" button if you need to allow users other options for closing the modal. The value of data-modal-close should be the same as the id attribute of the modal it closes.\n\nMultiple modals can be placed on the same page, as long as each has a unique id and corresponding data-modal-trigger element.\n\nModal dialog\nWe use the generic term \"Modal\" to mean any smaller window that is displayed on top of the main application, but there are some subtle differences between a modal and a dialog.\n\nA modal dialog is similar to a regular modal except that it requires the user to interact with it before continuing any interaction with the main application. The user must select from the available actions in the dialog—they cannot disregard and simply close the window.\n\n{{}}Open modal dialog\n\n            Modal Dialog\n\n            A modal dialog:\n\n                Is not dismissable i.e. doesn't have an (X) button\n                Requires user input before they continue their work\n\n            Yes\n            No, thanks\n\n{{}}\n\nWhen to use a dialog\nConfirmation dialogs are used to verify the action a user selected, especially when that action will result in the loss of data. For example, ‘All files in this folder will be deleted. Do you want to continue?’\nProvide the user with clarifying information before they continue with a task or action. For example, \"A 10% fee will be charged to your account. Do you want to continue?\"\n\nWhen to consider something else\nDo not use to second guess the users’ choice of actions when no destruction or loss of data will occur.\nWhen you need to create a focused space for users to complete a small subtask, use a regular modal instead.\n\nAccessibility notes\nWhen a modal is opened the modal itself receives focus, so that screen readers begin at the top of the modal content.\nWhen the modal is closed the focus should be returned to the button/trigger that was used to open the modal so that keyboard only users and those using assistive technologies do not lose their place in the document.\nA modal should trap focus inside of itself so that when a keyboard-only user navigates from the last focusable element in the modal it returns back to the first focusable element.\n\nMicrocopy notes\nFollow UX Planet’s recommendations for modal text:\n\nThe button that launches the modal should clearly describe the action (“Submit feedback”)\nUse the launch button text as the modal title. This reminds the user what to do, within the context of the overall page.\n\nJavaScript API\nIf you use the appropriate data attribute/id combination in your markup, modals will work without the need for any additional JavaScript. But if you need to control the modal programmatically, there are a handful of methods from the Rivet modal’s API you can use:\n\n{{}}{{}}\n\nManaging focus\nWhen a modal is triggered using the default data attribute method via a click event on the modal trigger (data-modal-trigger), the modal script will store a reference to the element that triggered it, and return focus to that element when the modal is closed.\n\nPlease note: If you open the modal programmatically using Modal.open() based on some other event, it is your responsibility to return focus to the appropriate element after the modal is closed. The .focusTrigger() method can be combined with the .close() method's callback function to accomplish this.\n\n{{}}Modal.close('my-modal-id', function() {\n    Modal.focusTrigger('my-modal-id');\n});\n{{}}\n\nCustom Events\nThe Rivet Modal also emits various custom events that you can listen for in your own scripts.\n\n{{}}{{}}\n\nCustom event example\nNote here that the event.detail.name() property of the customEvent object is a function that returns a String. Read more about custom events on the MDN web docs.\n\n{{}}// Listen for a custom \"modalOpen\" event\ndocument.addEventListener('modalOpen', event => {\n  if (event.detail.name() === 'my-modal') {\n    alert('Hey, you opened the modal!')\n  }\n  // Maybe send some data via an AJAX request, etc...\n}, false);\n{{}}\n",
        "rawContent": "## Modal example\n{{< example lang=\"html\" >}}<button type=\"button\" class=\"rvt-button\" data-modal-trigger=\"modal-example-basic\">Open modal example</button>\n\n<div class=\"rvt-modal\"\n     id=\"modal-example-basic\"\n     role=\"dialog\"\n     aria-labelledby=\"modal-example-title\"\n     aria-hidden=\"true\"\n     tabindex=-1>\n     <div class=\"rvt-modal__inner\">\n        <header class=\"rvt-modal__header\">\n            <h1 class=\"rvt-modal__title\" id=\"modal-example-title\">Modal title</h1>\n        </header>\n        <div class=\"rvt-modal__body\">\n            <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor <a href=\"#\">incididunt ut labore</a> et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>\n        </div>\n        <div class=\"rvt-modal__controls\">\n            <button type=\"button\" class=\"rvt-button\">OK</button>\n            <button type=\"button\" class=\"rvt-button rvt-button--secondary\" data-modal-close=\"modal-example-basic\">Cancel</button>\n        </div>\n        <button type=\"button\" class=\"rvt-button rvt-modal__close\" data-modal-close=\"modal-example-basic\">\n            <span class=\"rvt-sr-only\">Close</span>\n            <svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\">\n                <path fill=\"currentColor\" d=\"M9.41,8l5.29-5.29a1,1,0,0,0-1.41-1.41L8,6.59,2.71,1.29A1,1,0,0,0,1.29,2.71L6.59,8,1.29,13.29a1,1,0,1,0,1.41,1.41L8,9.41l5.29,5.29a1,1,0,0,0,1.41-1.41Z\"/>\n            </svg>\n        </button>\n    </div>\n</div>\n{{< /example >}}\n\n## When to use\n- For single specific tasks related to a goal on the main page of the application\n- To help users determine information needed in their main workflow e.g. calculating a number, looking up a code\n\n## When to consider something else\n- When you need to display an error message consider using an [alert]({{< relref \"alerts.md\" >}}) on the page in which the error occurred.\n- When you need to display large amounts of information for multiple tasks consider using a dedicated page instead.\n\n## Implementation notes\nThe modal component is made up of the following elements:\n\n- `.rvt-modal` and `.rvt-modal__inner` - An overlay and inner container, which wraps all other elements\n- `.rvt-modal__header` — A header with a title that is used to label the modal\n- `.rvt-modal__body` — A modal body that holds the main content of the modal\n- `.rvt-modal__controls` — An optional footer element that holds modal controls, like \"Save\" and \"Cancel\"\n- `.rvt-modal__close` — An optional close button at the top of the modal\n\n### Required elements\nThe only elements required in order for the modal to work are the `.rvt-modal`, `.rvt-modal__inner`, and `.rvt-modal__body`, but it is advisable to use the `.rvt-modal__header` element to help describe what the modal is use for. Likewise, the `.rvt-modal__controls` element provides an easy way to add additional actions to the modal like \"Save\" and \"Close\".\n\n### Modal controls\nThe `.rvt-modal__controls` element provides a space to add additional controls like buttons. It is advisable to **stick to one or two buttons** action buttons in a modal. The primary action should **always appear as the left-most button** in the group with secondary actions, like \"Cancel\" appearing after.\n\n### Modal set up\nTo use the modal component you'll need to do a few things. First, add the markup to your document.\n\n{{< code lang=\"html\" >}}<button type=\"button\" class=\"rvt-button\" data-modal-trigger=\"my-modal-id\">Open the modal</button>\n\n<div class=\"rvt-modal\" id=\"my-modal-id\">\n    modal markup here...\n\n    <button type=\"button\" class=\"rvt-button rvt-button--plain rvt-modal__close\" data-modal-close=\"my-modal-id\">\n        button markup here...\n    </button>\n</div>\n{{< /code >}}\n\nIn the code above, `my-modal-id` should correspond to the `id` attribute on the the `.rvt-modal` container and the `data-modal-trigger` attribute on a `<button>` element that triggers the modal.\n\nThe `data-modal-close` attribute is used as a hook to close the modal. You can add the `data-modal-close` attribute to other buttons in the modal like a \"**Cancel**\" button if you need to allow users other options for closing the modal. The value of `data-modal-close` should be the same as the `id` attribute of the modal it closes.\n\nMultiple modals can be placed on the same page, as long as each has a unique `id` and corresponding `data-modal-trigger` element.\n\n## Modal dialog\nWe use the generic term \"Modal\" to mean any smaller window that is displayed on top of the main application, but there are some subtle differences between a modal and a dialog.\n\nA modal dialog is similar to a regular modal except that **it requires the user to interact with it** before continuing any interaction with the main application. The user must select from the available actions in the dialog—they cannot disregard and simply close the window.\n\n{{< example lang=\"html\" >}}<button type=\"button\" class=\"rvt-button\" data-modal-trigger=\"modal-dialog-example\">Open modal dialog</button>\n<div class=\"rvt-modal\"\n     id=\"modal-dialog-example\"\n     role=\"dialog\"\n     aria-labelledby=\"modal-dialog-title\"\n     aria-hidden=\"true\"\n     tabindex=-1\n     data-modal-dialog=\"true\">\n    <div class=\"rvt-modal__inner\">\n        <header class=\"rvt-modal__header\">\n            <h1 class=\"rvt-modal__title\" id=\"modal-dialog-title\">Modal Dialog</h1>\n        </header>\n        <div class=\"rvt-modal__body\">\n            <p>A modal dialog:</p>\n            <ul>\n                <li>Is not dismissable i.e. doesn't have an (X) button</li>\n                <li>Requires user input before they continue their work</li>\n            </ul>\n        </div>\n        <div class=\"rvt-modal__controls\">\n            <button type=\"button\" class=\"rvt-button\">Yes</button>\n            <button type=\"button\" class=\"rvt-button rvt-button--secondary\" data-modal-close=\"modal-dialog-example\">No, thanks</button>\n        </div>\n    </div>\n</div>\n{{< /example >}}\n\n### When to use a dialog\n- Confirmation dialogs are used to verify the action a user selected, especially when that action will result in the loss of data. For example, ‘All files in this folder will be deleted. Do you want to continue?’\n- Provide the user with clarifying information before they continue with a task or action. For example, \"A 10% fee will be charged to your account. Do you want to continue?\"\n\n### When to consider something else\n- Do not use to second guess the users’ choice of actions when no destruction or loss of data will occur.\n- When you need to create a focused space for users to complete a small subtask, use a regular modal instead.\n\n## Accessibility notes\n- When a modal is opened the modal itself receives focus, so that screen readers begin at the top of the modal content.\n- When the modal is closed the focus should be returned to the button/trigger that was used to open the modal so that keyboard only users and those using assistive technologies do not lose their place in the document.\n- A modal should trap focus inside of itself so that when a keyboard-only user navigates from the last focusable element in the modal it returns back to the first focusable element.\n\n## Microcopy notes\nFollow [UX Planet’s recommendations for modal text](https://uxplanet.org/best-practices-for-modals-overlays-dialog-windows-c00c66cddd8c):\n\n- The button that launches the modal should clearly describe the action (“Submit feedback”)\n- Use the launch button text as the modal title. This reminds the user what to do, within the context of the overall page.\n\n## JavaScript API\nIf you use the appropriate data attribute/id combination in your markup, modals will work without the need for any additional JavaScript. But if you need to control the modal programmatically, there are a handful of methods from the Rivet modal’s API you can use:\n\n{{< apidocs type=\"methods\" >}}{{< /apidocs >}}\n\n### Managing focus\nWhen a modal is triggered using the default data attribute method via a click event on the modal trigger (`data-modal-trigger`), the modal script will store a reference to the element that triggered it, and return focus to that element when the modal is closed.\n\n**Please note**: If you open the modal programmatically using `Modal.open()` based on some other event, it is your responsibility to return focus to the appropriate element after the modal is closed. The `.focusTrigger()` method can be combined with the `.close()` method's callback function to accomplish this.\n\n{{< code lang=\"javascript\" >}}Modal.close('my-modal-id', function() {\n    Modal.focusTrigger('my-modal-id');\n});\n{{< /code >}}\n\n### Custom Events\nThe Rivet Modal also emits various custom events that you can listen for in your own scripts.\n\n{{< apidocs type=\"events\" >}}{{< /apidocs >}}\n\n#### Custom event example\nNote here that the `event.detail.name()` property of the `customEvent` object is a function that returns a String. Read more about custom events on the [MDN web docs](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent).\n\n{{< code lang=\"js\" >}}// Listen for a custom \"modalOpen\" event\ndocument.addEventListener('modalOpen', event => {\n  if (event.detail.name() === 'my-modal') {\n    alert('Hey, you opened the modal!')\n  }\n  // Maybe send some data via an AJAX request, etc...\n}, false);\n{{< /code >}}\n",
        "tags": [],
        "description": "A modal is a smaller window that is displayed on top of the main application/site window. The main page is still visible, but the background is darkened to direct focus to the content of the modal window."
    },
    {
        "uri": "components/page-content",
        "title": "Page content",
        "content": "",
        "rawContent": "",
        "tags": [],
        "description": ""
    },
    {
        "uri": "components/page-content/badges",
        "title": "Badges",
        "content": "Default Badges\n{{}}Base\nInfo\nSuccess\nWarning\nDanger\n{{}}\n\nSecondary badges\n{{}}Base\nInfo\nSuccess\nWarning\nDanger\n{{}}\n\nWhen to use\nTo label new content on a page\nTo help users discover important information changes in your UI\n\nWhen to consider something else\nWhen there is a critical error that requires the users attention to fix, use a page-level alert instead\nAvoid using lots of badges on one page when possible as it will diminish the affect of calling out important parts of the UI\n\nAccessibility\nBadges are visual indicators that the information is important, but visual queues are insufficient for those using assistive technologies, such as screen readers. The colors of the badge alone will not be enough to convey meaning to screen readers. Use the .sr-only utility class to add sufficient information with the text of the badge. Adding additional text to the badge and visually hiding the additional text is a good user experience.\n",
        "rawContent": "## Default Badges\n{{< example lang=\"html\" >}}<span class=\"rvt-badge\">Base</span>\n<span class=\"rvt-badge rvt-badge--info\">Info</span>\n<span class=\"rvt-badge rvt-badge--success\">Success</span>\n<span class=\"rvt-badge rvt-badge--warning\">Warning</span>\n<span class=\"rvt-badge rvt-badge--danger\">Danger</span>\n{{< /example >}}\n\n## Secondary badges\n{{< example lang=\"html\" >}}<span class=\"rvt-badge rvt-badge--secondary\">Base</span>\n<span class=\"rvt-badge rvt-badge--info-secondary\">Info</span>\n<span class=\"rvt-badge rvt-badge--success-secondary\">Success</span>\n<span class=\"rvt-badge rvt-badge--warning-secondary\">Warning</span>\n<span class=\"rvt-badge rvt-badge--danger-secondary\">Danger</span>\n{{< /example >}}\n\n## When to use\n- To label new content on a page\n- To help users discover important information changes in your UI\n\n## When to consider something else\n- When there is a critical error that requires the users attention to fix, use a page-level alert instead\n- Avoid using lots of badges on one page when possible as it will diminish the affect of calling out important parts of the UI\n\n## Accessibility\nBadges are visual indicators that the information is important, but visual queues are insufficient for those using assistive technologies, such as screen readers. The colors of the badge alone will not be enough to convey meaning to screen readers. Use the `.sr-only` utility class to add sufficient information with the text of the badge. Adding additional text to the badge and visually hiding the additional text is a good user experience.\n",
        "tags": [],
        "description": "Use badges to call out or label important information in your UI."
    },
    {
        "uri": "components/page-content/links",
        "title": "Links",
        "content": "\nInline links\n{{}} This is a text link on a light background.\nThis link is Bold link.\n{{}}\n\nWhen to use\nNavigating to a new page or view in your application\nNavigating to different web page, e.g. external documentation\n\nWhen to consider something else\nOpening or closing a modal or dialog\nTriggering a dropdown menu\nSubmitting data to the server\n\nMicrocopy & accessibility notes\nYour link should always describe where it will take users. Users tend to scan text online, and elements that stand out (like links) grab attention. Clear links can help users navigate more quickly.\n\nFor example, instead of:\n\n> Learn more\n\nUse:\n\n> Learn how to reset your passphrase\n\nNever use a link to say “click here.” A nondescript link forces users to backtrack and read the surrounding text for more context. This is even more problematic for those who rely on screen readers, which can list links for quicker navigation. A list of “click here” isn’t helpful for anyone.\n\nResources\nLinks vs. Buttons in Modern Web Applications\n",
        "rawContent": "\n## Inline links\n{{< example lang=\"html\" >}}<p class=\"rvt-m-top-remove\"> <a href=\"#\">This is a text link</a> on a light background.</p>\n<p>This link is <a href=\"#\" class=\"rvt-link-bold\">Bold link</a>.</p>\n{{< /example >}}\n\n## When to use\n- Navigating to a new page or view in your application\n- Navigating to different web page, e.g. external documentation\n\n## When to consider something else\n- Opening or closing a modal or dialog\n- Triggering a dropdown menu\n- Submitting data to the server\n\n## Microcopy & accessibility notes\nYour link should always describe where it will take users. Users tend to scan text online, and elements that stand out (like links) grab attention. Clear links can help users navigate more quickly.\n\nFor example, instead of:\n\n> [Learn more](https://kb.iu.edu/d/ataz)\n\nUse:\n\n> [Learn how to reset your passphrase](https://kb.iu.edu/d/ataz)\n\nNever use a link to say “click here.” A nondescript link forces users to backtrack and read the surrounding text for more context. This is even more problematic for those who rely on screen readers, which can list links for quicker navigation. A list of “click here” isn’t helpful for anyone.\n\n## Resources\n- [Links vs. Buttons in Modern Web Applications](https://marcysutton.com/links-vs-buttons-in-modern-web-applications/)\n",
        "tags": [],
        "description": "Inline text links are used to navigate between documents (pages)."
    },
    {
        "uri": "components/page-content/lists",
        "title": "Lists",
        "content": "\nUnordered list\n{{}}\n    List Item One\n    List Item Two\n    List Item Three\n    List Item Four\n\n{{}}\n\nOrdered list\n{{}}\n    List Item One\n    List Item Two\n    List Item Three\n    List Item Four\n\n{{}}\n\nPlain list\nYou can use the helper class .rvt-plain-list to remove list formatting for display purposes.\n\n{{}}\n    List Item One\n    List Item Two\n    List Item Three\n    List Item Four\n\n{{}}\n\nInline list\nYou can use the helper class .rvt-inline-list to remove list formatting and display list items inline. These items will have some extra right and bottom margin applied to them (for instance, where they flow onto more than one line).\n\n{{}}\n    List Item One\n    List Item Two\n    List Item Three\n    List Item Four\n\n{{}}\n\nDefinition list\n{{}}\n   Definition list item one\n   Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n   Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n   Definition list item two\n   Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n   Definition list item three\n   Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\n\n{{}}\n\nUsability notes\nUse unordered lists `` when your collection has no specific order\nUse ordered lists `` when you want to display content in some specific order like ranking or a series of steps in a process\nUse definition lists to display groups of terms with descriptions like a glossary or other metadata\n\nMicrocopy notes\nFollow the IT Communications Office’s style guide here:\n\nMaintain a parallel structure. If you begin a list item with a verb, all others should begin with a verb too.\nDon’t include punctuation unless a complete sentence follows in the same bullet (like in the sentence above)\n\nResources\nW3C Docs about all the lists.\n",
        "rawContent": "\n## Unordered list\n{{< example lang=\"html\" >}}<ul>\n    <li>List Item One</li>\n    <li>List Item Two</li>\n    <li>List Item Three</li>\n    <li>List Item Four</li>\n</ul>\n{{< /example >}}\n\n## Ordered list\n{{< example lang=\"html\" >}}<ol>\n    <li>List Item One</li>\n    <li>List Item Two</li>\n    <li>List Item Three</li>\n    <li>List Item Four</li>\n</ol>\n{{< /example >}}\n\n## Plain list\nYou can use the helper class `.rvt-plain-list` to remove list formatting for display purposes.\n\n{{< example lang=\"html\" >}}<ul class=\"rvt-plain-list\">\n    <li>List Item One</li>\n    <li>List Item Two</li>\n    <li>List Item Three</li>\n    <li>List Item Four</li>\n</ul>\n{{< /example >}}\n\n## Inline list\nYou can use the helper class `.rvt-inline-list` to remove list formatting and display list items inline. These items will have some extra right and bottom margin applied to them (for instance, where they flow onto more than one line).\n\n{{< example lang=\"html\" >}}<ul class=\"rvt-inline-list\">\n    <li>List Item One</li>\n    <li>List Item Two</li>\n    <li>List Item Three</li>\n    <li>List Item Four</li>\n</ul>\n{{< /example >}}\n\n## Definition list\n{{< example lang=\"html\" >}}<dl>\n   <dt>Definition list item one</dt>\n   <dd>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</dd>\n   <dd>Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</dd>\n   <dt>Definition list item two</dt>\n   <dd>Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</dd>\n   <dt>Definition list item three</dt>\n   <dd>Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.</dd>\n</dl>\n{{< /example >}}\n\n## Usability notes\n- Use unordered lists `<ul>` when your collection has no specific order\n- Use ordered lists `<ol>` when you want to display content in some specific order like ranking or a series of steps in a process\n- Use definition lists to display groups of terms with descriptions like a glossary or other metadata\n\n## Microcopy notes\nFollow the [IT Communications Office’s style guide](https://uits.iu.edu/itco/style-basics) here:\n\n- Maintain a parallel structure. If you begin a list item with a verb, all others should begin with a verb too.\n- Don’t include punctuation unless a complete sentence follows in the same bullet (like in the sentence above)\n\n## Resources\n- [W3C Docs](https://www.w3.org/TR/WCAG20-TECHS/H48.html) about all the lists.\n",
        "tags": [],
        "description": "Lists are used to group and organize collections of content."
    },
    {
        "uri": "components/page-content/media-object",
        "title": "Media Object",
        "content": "{{}}\nThe media object is new as of 1.2.0. If you need help moving to 1.2.0, see our instructions for updating Rivet.\n{{}}\n\nThe media object component\nThe media object component is made up of three content areas nested inside a main .rvt-mo wrapper:\n\n.rvt-mo__prepend (1)\n.rvt-mo__main (2)\n.rvt-mo__append (3)\n\n{{}}\n\n    1\n\n    2\n\n    3\n\n{{}}\n\nMedia object content areas\nEach of the three media object areas (.rvt-moprepend, .rvt-momain, .rvt-moappend) will expand to fit the content you put inside of them, but you should try to maintain an approximate ratio where the the main content area (.rvt-momain) takes up the majority of the width of the row, and the two supplemental areas (.rvt-moprepend and .rvt-moappend) fill the remaining space.\n\nMedia objects and the grid\nThe media object is designed to be a simple layout aid used for displaying lists of non-tabular items with similar content. You should not use the Rivet grid inside any of the media object content areas shown in the previous example.\n\nBasic media object\nThe simplest media object configuration consists of a wrapper element with the .rvt-mo class, a child element with the .rvt-moprepend class, and a second child element with the .rvt-momain class.\n\nIn this example, we've created a simple avatar to place inside the element with the .rvt-mo__prepend class. Some Rivet spacing utility classes are used to add small amounts of padding between each area of the media object.\n\n{{}}\n\n    Rivet 1.2.0 is now available!\n    Updated Sept. 24 by bmacklin\n\n{{}}\n\nUsing media objects to represent records\nYou can add buttons and form elements to a media object, allowing you to represent an entry in a list of CRUD application records that a user can interact with.\n\nThe example below features a checkbox in the .rvt-moprepend area (for record selection) and a dropdown in the .rvt-moappend area (for record actions or configuration):\n\n{{}}\n\n      Select this item\n\n    Rivet 1.2.0 is now available!\n\n      Updated Sept. 24 by bmacklin\n      Updated\n\n        Application menu\n\n        Notify all\n        Notify admins\n        Notify contributors\n\n{{}}\n\nCombining media object and box components\nYou can combine the media object component with the box component to create list views for complex content. This combination can be used in place of tables when displaying lists of records that are not tabular data.\n\n{{}}\n\n    Messages\n\n        Rivet 1.2.0 is now available!\n        Updated Sept. 24 by bmacklin\n\n        Rivet 1.2.0 is now available!\n        Updated Sept. 24 by bmacklin\n\n        Rivet 1.2.0 is now available!\n        Updated Sept. 24 by bmacklin\n",
        "rawContent": "{{< alert variant=\"info\" title=\"New in Rivet 1.2.0\" >}}\nThe media object is new as of 1.2.0. If you need help moving to 1.2.0, see our [instructions for updating Rivet](/components/#updating-the-rivet-npm-package\").\n{{< /alert >}}\n\n## The media object component\nThe media object component is made up of three content areas nested inside a main `.rvt-mo` wrapper:\n\n- `.rvt-mo__prepend` (1)\n- `.rvt-mo__main` (2)\n- `.rvt-mo__append` (3)\n\n{{< example lang=\"html\" spacious=\"true\" >}}<!--\n  These background-color utility classes are used for\n   demo purposes only here.\n-->\n<div class=\"rvt-mo\">\n  <div class=\"rvt-mo__prepend rvt-bg-blue rvt-p-all-md\">\n    1\n  </div>\n  <div class=\"rvt-mo__main rvt-bg-green rvt-p-all-md\">\n    2\n  </div>\n  <div class=\"rvt-mo__append rvt-bg-orange rvt-p-all-md\">\n    3\n  </div>\n</div>\n{{< /example >}}\n\n## Media object content areas\nEach of the three media object areas (`.rvt-mo__prepend`, `.rvt-mo__main`, `.rvt-mo__append`) will expand to fit the content you put inside of them, but you should try to maintain an approximate ratio where the the main content area (`.rvt-mo__main`) takes up the majority of the width of the row, and the two supplemental areas (`.rvt-mo__prepend` and `.rvt-mo__append`) fill the remaining space.\n\n### Media objects and the grid\nThe media object is designed to be a simple layout aid used for displaying lists of non-tabular items with similar content. You should not use [the Rivet grid]({{< ref \"components/layout/grid.md\" >}}) inside any of the media object content areas shown in [the previous example](#the-media-object-component).\n\n## Basic media object\nThe simplest media object configuration consists of a wrapper element with the `.rvt-mo` class, a child element with the `.rvt-mo__prepend` class, and a second child element with the `.rvt-mo__main` class.\n\nIn this example, we've created a simple avatar to place inside the element with the `.rvt-mo__prepend` class. Some [Rivet spacing utility classes]({{< ref \"/components/layout/spacing.md\" >}}) are used to add small amounts of padding between each area of the media object.\n\n{{< example lang=\"html\" spacious=\"true\" >}}<div class=\"rvt-mo\">\n  <div class=\"rvt-mo__prepend\">\n    <!-- Inline styles are for demo purposes only -->\n    <div style=\"width: 2rem; height: 2rem; border-radius: 999rem; overflow: hidden;\" class=\"rvt-m-right-sm\">\n      <img src=\"https://www.fillmurray.com/g/200/200\" alt=\"\">\n    </div>\n  </div>\n  <div class=\"rvt-mo__main\">\n    <a href=\"#\" class=\"rvt-link-bold rvt-ts-18\">Rivet 1.2.0 is now available!</a>\n    <div class=\"rvt-ts-14\">Updated Sept. 24 by <strong>bmacklin</strong></div>\n  </div>\n</div>\n{{< /example >}}\n\n## Using media objects to represent records\nYou can add buttons and form elements to a media object, allowing you to represent an entry in a list of [CRUD application](https://en.wikipedia.org/wiki/Create,_read,_update_and_delete) records that a user can interact with.\n\nThe example below features a [checkbox]({{< ref \"/components/forms/checkboxes.md\" >}}) in the `.rvt-mo__prepend` area (for record selection) and a [dropdown]({{< ref \"/components/navigation/dropdown.md\" >}}) in the `.rvt-mo__append` area (for record actions or configuration):\n\n{{< example lang=\"html\" spacious=\"true\" >}}<div class=\"rvt-mo\">\n  <div class=\"rvt-mo__prepend\">\n    <input id=\"check-1\" type=\"checkbox\" aria-describedby=\"option-1-title\">\n    <label for=\"check-1\">\n      <span class=\"rvt-sr-only\">Select this item</span>\n    </label>\n  </div>\n  <div class=\"rvt-mo__main\">\n    <div href=\"#\" class=\"rvt-text-bold rvt-ts-18\" id=\"option-1-title\">Rivet 1.2.0 is now available!</div>\n    <div>\n      <span class=\"rvt-ts-14\">Updated Sept. 24 by bmacklin</span>\n      <span class=\"rvt-badge\">Updated</span>\n    </div>\n  </div>\n  <div class=\"rvt-mo__append\">\n    <div class=\"rvt-dropdown\">\n      <button class=\"rvt-button rvt-button--small rvt-button--plain\" type=\"button\" data-dropdown-toggle=\"dropdown-1\"\n        aria-haspopup=\"true\" aria-expanded=\"false\">\n        <span class=\"rvt-sr-only\">Application menu</span>\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\">\n          <g fill=\"currentColor\">\n            <circle cx=\"8\" cy=\"8\" r=\"2\"></circle>\n            <circle cx=\"14\" cy=\"8\" r=\"2\"></circle>\n            <circle cx=\"2\" cy=\"8\" r=\"2\"></circle>\n          </g>\n        </svg>\n      </button>\n      <div class=\"rvt-dropdown__menu rvt-dropdown__menu--right\" id=\"dropdown-1\" role=\"menu\" aria-hidden=\"true\">\n        <button type=\"button\" role=\"menuitemradio\">Notify all</button>\n        <button type=\"button\" role=\"menuitemradio\" aria-checked=\"true\">Notify admins</button>\n        <button type=\"button\" role=\"menuitemradio\">Notify contributors</button>\n      </div>\n    </div>\n  </div>\n</div>\n{{< /example >}}\n\n### Combining media object and box components\nYou can combine the media object component with the [box component]({{< ref \"/components/layout/box.md\" >}}) to create list views for complex content. This combination can be used in place of tables when displaying lists of records that are not tabular data.\n\n{{< example lang=\"html\" spacious=\"true\" >}}<div class=\"rvt-box\">\n  <div class=\"rvt-box__header\">\n    Messages\n  </div>\n  <div class=\"rvt-box__row\">\n    <div class=\"rvt-mo\">\n      <div class=\"rvt-mo__prepend\">\n        <div style=\"width: 2rem; height: 2rem; border-radius: 999rem; overflow: hidden;\" class=\"rvt-m-right-sm\">\n          <img src=\"https://www.fillmurray.com/g/200/200\" alt=\"\">\n        </div>\n      </div>\n      <div class=\"rvt-mo__main\">\n        <a href=\"#\" class=\"rvt-link-bold rvt-ts-18\">Rivet 1.2.0 is now available!</a>\n        <div class=\"rvt-ts-14\">Updated Sept. 24 by <strong>bmacklin</strong></div>\n      </div>\n    </div>\n  </div>\n  <div class=\"rvt-box__row\">\n    <div class=\"rvt-mo\">\n      <div class=\"rvt-mo__prepend\">\n        <div style=\"width: 2rem; height: 2rem; border-radius: 999rem; overflow: hidden;\" class=\"rvt-m-right-sm\">\n          <img src=\"https://www.fillmurray.com/g/200/200\" alt=\"\">\n        </div>\n      </div>\n      <div class=\"rvt-mo__main\">\n        <a href=\"#\" class=\"rvt-link-bold rvt-ts-18\">Rivet 1.2.0 is now available!</a>\n        <div class=\"rvt-ts-14\">Updated Sept. 24 by <strong>bmacklin</strong></div>\n      </div>\n    </div>\n  </div>\n  <div class=\"rvt-box__row\">\n    <div class=\"rvt-mo\">\n      <div class=\"rvt-mo__prepend\">\n        <div style=\"width: 2rem; height: 2rem; border-radius: 999rem; overflow: hidden;\" class=\"rvt-m-right-sm\">\n          <img src=\"https://www.fillmurray.com/g/200/200\" alt=\"\">\n        </div>\n      </div>\n      <div class=\"rvt-mo__main\">\n        <a href=\"#\" class=\"rvt-link-bold rvt-ts-18\">Rivet 1.2.0 is now available!</a>\n        <div class=\"rvt-ts-14\">Updated Sept. 24 by <strong>bmacklin</strong></div>\n      </div>\n    </div>\n  </div>\n</div>\n",
        "tags": [],
        "description": "The media object is a simple layout component that can generally be used to display items in a list of content."
    },
    {
        "uri": "components/page-content/tables",
        "title": "Tables",
        "content": "\nDefault table\nDefault tables in Rivet come with styled headers and bottom borders on row to help with readability.\n{{}}\n    Table example one\n\n            Service\n            Description\n            URL\n\n            One.IU\n            One.IU was created to bring a modern app store experience to finding what you need at IU. With One.IU, you search for what you want to do, and click to launch it.\n            one.iu.edu\n\n            Box\n            Box is a no-cost cloud storage and collaboration environment available to students, faculty, and staff.\n            box.iu.edu\n\n            Zoom\n            Zoom is a web collaboration tool available to all Indiana University students, faculty, and staff.\n            zoom.iu.edu\n\n            Canvas\n            Canvas is a learning management system developed by Instructure, Inc.\n            canvas.iu.edu\n\n{{}}\n\nStriped table\nYou can use the .rvt-table-stripes class to alternate light gray backgrounds on table rows for improved scannability.\n{{}}\n    Table example two\n\n            Service\n            Description\n            URL\n\n            One.IU\n            One.IU was created to bring a modern app store experience to finding what you need at IU. With One.IU, you search for what you want to do, and click to launch it.\n            one.iu.edu\n\n            Box\n            Box is a no-cost cloud storage and collaboration environment available to students, faculty, and staff.\n            box.iu.edu\n\n            Zoom\n            Zoom is a web collaboration tool available to all Indiana University students, faculty, and staff.\n            zoom.iu.edu\n\n            Canvas\n            Canvas is a learning management system developed by Instructure, Inc.\n            canvas.iu.edu\n\n{{}}\n\nPlain table\nThe .rvt-table-plain class will remove all borders and thead formatting on a table.\n{{}}\n    Table example three\n\n            Service\n            Description\n            URL\n\n            One.IU\n            One.IU was created to bring a modern app store experience to finding what you need at IU. With One.IU, you search for what you want to do, and click to launch it.\n            one.iu.edu\n\n            Box\n            Box is a no-cost cloud storage and collaboration environment available to students, faculty, and staff.\n            box.iu.edu\n\n            Zoom\n            Zoom is a web collaboration tool available to all Indiana University students, faculty, and staff.\n            zoom.iu.edu\n\n            Canvas\n            Canvas is a learning management system developed by Instructure, Inc.\n            canvas.iu.edu\n\n{{}}\n\nCompact table variant\nThe .rvt-table-compact class will decrease the amount of vertical padding applied to each table cell. This variant can be useful in situations where you need to conserve vertical space when displaying large amounts of data.\n{{}}\n    Table example three\n\n            Service\n            Description\n            URL\n\n            One.IU\n            One.IU was created to bring a modern app store experience to finding what you need at IU. With One.IU, you search for what you want to do, and click to launch it.\n            one.iu.edu\n\n            Box\n            Box is a no-cost cloud storage and collaboration environment available to students, faculty, and staff.\n            box.iu.edu\n\n            Zoom\n            Zoom is a web collaboration tool available to all Indiana University students, faculty, and staff.\n            zoom.iu.edu\n\n            Canvas\n            Canvas is a learning management system developed by Instructure, Inc.\n            canvas.iu.edu\n\n{{}}\n\nCells table variant\nThe \"cells\" table variant adds borders to all table cells which can help with vertical and horizontal visual scanning.\n{{}}\n    Table example three\n\n            Service\n            Description\n            URL\n\n            One.IU\n            One.IU was created to bring a modern app store experience to finding what you need at IU. With One.IU, you search for what you want to do, and click to launch it.\n            one.iu.edu\n\n            Box\n            Box is a no-cost cloud storage and collaboration environment available to students, faculty, and staff.\n            box.iu.edu\n\n            Zoom\n            Zoom is a web collaboration tool available to all Indiana University students, faculty, and staff.\n            zoom.iu.edu\n\n            Canvas\n            Canvas is a learning management system developed by Instructure, Inc.\n            canvas.iu.edu\n\n{{}}\n\nWhen to use\nIf you’re wrangling a lot of data, tables can help you visualize that content. They’re much easier to scan than long paragraphs cluttered with numbers or dates.\n\nWhen to consider something else\nConsider using a definition list when your data only has two dimensions.\nDon’t use tables to structure web pages\n\nMicrocopy notes\nKeep labels short. For best scannability, use just two to three words.\nLimit the data or information in each cell. Make repetitive information, like the properties of the data, part of the label.\nSort the information or data logically, using alphabetical or numerical order\n\nAccessibility notes\nUse a ` tag inside of the ` body when you need to add a title to a table.\nWhen using multiple levels of headers (`) in a table each header cell should also have a scope=\"col\" or scope=\"row\"` attribute.\n",
        "rawContent": "\n## Default table\nDefault tables in Rivet come with styled headers and bottom borders on row to help with readability.\n{{< example lang=\"html\" >}}<table>\n    <caption class=\"sr-only\">Table example one</caption>\n    <thead>\n        <tr>\n            <th scope=\"col\">Service</th>\n            <th scope=\"col\">Description</th>\n            <th scope=\"col\">URL</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <th scope=\"row\">One.IU</th>\n            <td>One.IU was created to bring a modern app store experience to finding what you need at IU. With One.IU, you search for what you want to do, and click to launch it.</td>\n            <td><a href=\"#\">one.iu.edu</a></td>\n        </tr>\n        <tr>\n            <th scope=\"row\">Box</th>\n            <td>Box is a no-cost cloud storage and collaboration environment available to students, faculty, and staff.</td>\n            <td><a href=\"#\">box.iu.edu</a></td>\n        </tr>\n        <tr>\n            <th scope=\"row\">Zoom</th>\n            <td>Zoom is a web collaboration tool available to all Indiana University students, faculty, and staff.</td>\n            <td><a href=\"#\">zoom.iu.edu</a></td>\n        </tr>\n        <tr>\n            <th scope=\"row\">Canvas</th>\n            <td>Canvas is a learning management system developed by Instructure, Inc.</td>\n            <td><a href=\"#\">canvas.iu.edu</a></td>\n        </tr>\n    </tbody>\n</table>\n{{< /example >}}\n\n## Striped table\nYou can use the `.rvt-table-stripes` class to alternate light gray backgrounds on table rows for improved scannability.\n{{< example lang=\"html\" >}}<table class=\"rvt-table-stripes\">\n    <caption class=\"sr-only\">Table example two</caption>\n    <thead>\n        <tr>\n            <th scope=\"col\">Service</th>\n            <th scope=\"col\">Description</th>\n            <th scope=\"col\">URL</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <th scope=\"row\">One.IU</th>\n            <td>One.IU was created to bring a modern app store experience to finding what you need at IU. With One.IU, you search for what you want to do, and click to launch it.</td>\n            <td><a href=\"#\">one.iu.edu</a></td>\n        </tr>\n        <tr>\n            <th scope=\"row\">Box</th>\n            <td>Box is a no-cost cloud storage and collaboration environment available to students, faculty, and staff.</td>\n            <td><a href=\"#\">box.iu.edu</a></td>\n        </tr>\n        <tr>\n            <th scope=\"row\">Zoom</th>\n            <td>Zoom is a web collaboration tool available to all Indiana University students, faculty, and staff.</td>\n            <td><a href=\"#\">zoom.iu.edu</a></td>\n        </tr>\n        <tr>\n            <th scope=\"row\">Canvas</th>\n            <td>Canvas is a learning management system developed by Instructure, Inc.</td>\n            <td><a href=\"#\">canvas.iu.edu</a></td>\n        </tr>\n    </tbody>\n</table>\n{{< /example >}}\n\n## Plain table\nThe `.rvt-table-plain` class will remove all borders and `thead` formatting on a table.\n{{< example lang=\"html\" >}}<table class=\"rvt-table-plain\">\n    <caption class=\"sr-only\">Table example three</caption>\n    <thead>\n        <tr>\n            <th scope=\"col\">Service</th>\n            <th scope=\"col\">Description</th>\n            <th scope=\"col\">URL</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <th scope=\"row\">One.IU</th>\n            <td>One.IU was created to bring a modern app store experience to finding what you need at IU. With One.IU, you search for what you want to do, and click to launch it.</td>\n            <td><a href=\"#\">one.iu.edu</a></td>\n        </tr>\n        <tr>\n            <th scope=\"row\">Box</th>\n            <td>Box is a no-cost cloud storage and collaboration environment available to students, faculty, and staff.</td>\n            <td><a href=\"#\">box.iu.edu</a></td>\n        </tr>\n        <tr>\n            <th scope=\"row\">Zoom</th>\n            <td>Zoom is a web collaboration tool available to all Indiana University students, faculty, and staff.</td>\n            <td><a href=\"#\">zoom.iu.edu</a></td>\n        </tr>\n        <tr>\n            <th scope=\"row\">Canvas</th>\n            <td>Canvas is a learning management system developed by Instructure, Inc.</td>\n            <td><a href=\"#\">canvas.iu.edu</a></td>\n        </tr>\n    </tbody>\n</table>\n{{< /example >}}\n\n## Compact table variant\nThe `.rvt-table-compact` class will decrease the amount of vertical padding applied to each table cell. This variant can be useful in situations where you need to conserve vertical space when displaying large amounts of data.\n{{< example lang=\"html\" >}}<table class=\"rvt-table-compact\">\n    <caption class=\"sr-only\">Table example three</caption>\n    <thead>\n        <tr>\n            <th scope=\"col\">Service</th>\n            <th scope=\"col\">Description</th>\n            <th scope=\"col\">URL</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <th scope=\"row\">One.IU</th>\n            <td>One.IU was created to bring a modern app store experience to finding what you need at IU. With One.IU, you search for what you want to do, and click to launch it.</td>\n            <td><a href=\"#\">one.iu.edu</a></td>\n        </tr>\n        <tr>\n            <th scope=\"row\">Box</th>\n            <td>Box is a no-cost cloud storage and collaboration environment available to students, faculty, and staff.</td>\n            <td><a href=\"#\">box.iu.edu</a></td>\n        </tr>\n        <tr>\n            <th scope=\"row\">Zoom</th>\n            <td>Zoom is a web collaboration tool available to all Indiana University students, faculty, and staff.</td>\n            <td><a href=\"#\">zoom.iu.edu</a></td>\n        </tr>\n        <tr>\n            <th scope=\"row\">Canvas</th>\n            <td>Canvas is a learning management system developed by Instructure, Inc.</td>\n            <td><a href=\"#\">canvas.iu.edu</a></td>\n        </tr>\n    </tbody>\n</table>\n{{< /example >}}\n\n## Cells table variant\nThe \"cells\" table variant adds borders to all table cells which can help with vertical and horizontal visual scanning.\n{{< example lang=\"html\" >}}<table class=\"rvt-table-cells\">\n    <caption class=\"sr-only\">Table example three</caption>\n    <thead>\n        <tr>\n            <th scope=\"col\">Service</th>\n            <th scope=\"col\">Description</th>\n            <th scope=\"col\">URL</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <th scope=\"row\">One.IU</th>\n            <td>One.IU was created to bring a modern app store experience to finding what you need at IU. With One.IU, you search for what you want to do, and click to launch it.</td>\n            <td><a href=\"#\">one.iu.edu</a></td>\n        </tr>\n        <tr>\n            <th scope=\"row\">Box</th>\n            <td>Box is a no-cost cloud storage and collaboration environment available to students, faculty, and staff.</td>\n            <td><a href=\"#\">box.iu.edu</a></td>\n        </tr>\n        <tr>\n            <th scope=\"row\">Zoom</th>\n            <td>Zoom is a web collaboration tool available to all Indiana University students, faculty, and staff.</td>\n            <td><a href=\"#\">zoom.iu.edu</a></td>\n        </tr>\n        <tr>\n            <th scope=\"row\">Canvas</th>\n            <td>Canvas is a learning management system developed by Instructure, Inc.</td>\n            <td><a href=\"#\">canvas.iu.edu</a></td>\n        </tr>\n    </tbody>\n</table>\n{{< /example >}}\n\n## When to use\nIf you’re wrangling a lot of data, tables can help you visualize that content. They’re much easier to scan than long paragraphs cluttered with numbers or dates.\n\n## When to consider something else\n- Consider using a [definition list]({{< ref \"components/page-content/lists.md#definition-list\" >}}) when your data only has two dimensions.\n- Don’t use tables to structure web pages\n\n## Microcopy notes\n- Keep labels short. For best scannability, use just two to three words.\n- Limit the data or information in each cell. Make repetitive information, like the properties of the data, part of the label.\n- Sort the information or data logically, using alphabetical or numerical order\n\n## Accessibility notes\n- Use a `<caption>` tag inside of the `<table>` body when you need to add a title to a table.\n- When using multiple levels of headers (`<th>`) in a table each header cell should also have a `scope=\"col\"` or `scope=\"row\"` attribute.\n",
        "tags": [],
        "description": "Tables are used to display tabular data in rows and columns."
    },
    {
        "uri": "components/page-content/tabs",
        "title": "Tabs",
        "content": "Default tabs example\n{{}}\n\n            Tab one\n\n            Tab two\n\n            Tab three\n\n        Panel 1\n\n            Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor\n            in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\n        Panel 2\n\n            Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\n        A grid inside a tab panel\n\n                    Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\n                    Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non\n                    proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\n{{}}\n\nWhen to use\nDisplaying a small number (2-5 categories) of closely related, distinct data\nDisplaying multiple unique views of the same data\nCategory labels are short and easy to understand\nSwitching between views is common for your users’ goals\nCategory names are unlikely to change very often and number of categories is unlikely to grow\n\nWhen to consider something else\nDisplaying six or more categories (or more than what will easily fit horizontally on your target users' screen)\nDisplaying categories that require long labels for clarity\nUsers will frequently need to compare data from different tabs/categories\nThe data for each tab could just as easily function as its own page\nIf you are tempted to include a ‘More’ tab\nIf the amount of data that would be shown on each tab is small\n\nAccessibility Requirements\n{{% a11y %}}\nThe Rivet Tabs are built to follow the WAI-ARIA authoring standards. It is marked up with the appropriate ARIA attributes and uses the JavaScript included in rivet.js to implement the keyboard navigation and focus management required to meet the ARIA Authoring Practices standards. If you need to create the Tabs functionality in another framework/library like React, Angular, etc., please ensure that it meets the following accessibility requirements.\n\nFocus\nTabs should have a visible :focus state\nActive tabs should have a visible aria-selected=\"true\" state\nActivating a tab should set its associated tab panel's tabindex attribute to -1. All in active tabs should have their tabindex attribute set to 0 so that after the used activates a tab, pressing Tab will move focus to the active tab's tab panel.\n\nLabeling\nTabs should be wrapped in an element with a role of tablist\nEach tab (button) should have a role of tab\nEach tab panel should have a role of tabpanel\nThe active tab should have the attribute aria-selected set to true. All inactive tabs should have aria-selected set to false\nEach tabpanel should have an aria-labelledby attribute that references its associated tab\n\nKeyboard navigation\nEnter or Space = Activate tab (when focused)\n&larr;&rarr; = Moves focus to previous/next tab\n{{% /a11y %}}\n\nImplementation notes\nDo not stack rows of tabs - only use a small set of tabs in a single row\nOrder tabs in a logical manner\nDefault tab (on page load) should be the first tab. The first tab should be the most frequently viewed or most important tab.\nTab order should stay the same as the user moves between tabs\nLabel tabs with clear concise categories - 1-2 words is ideal\nDo not use all capital letters in the tab labels\nDo not include a ‘More’ tab\nPage should not reload or refresh when the user switches to a different tab\nOnly the content of the tab and tab bar indicating the user's location should change. The rest of the page should remain the same.\n\nFitted version\nApplying the modifier class .rvt-tabs--fitted to the main .rvt-tabs container will make the tabs take up equal amounts of the space of the tabs container.\n\n{{}}\n\n            Tab one\n\n            Tab two\n\n            Tab three\n\n        Sue’s Salads\n\n            Panel 1: Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute\n            irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\n        JJ’s Diner\n\n            Panel 2: Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\n        Food n’ Stuff\n\n            Panel 3: Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\n{{}}\n\nVertical Tabs\n\n{{}}\nWhile Rivet supports displaying tabs vertically along the left-hand side of the content area, we've deprecated that feature and will be removing vertical tabs in a future release.\n{{}}\n\nTabs work best when displayed horizontally. Displaying tabs vertically along the left-hand side of the content area takes up horizontal screen space, which limits the display area of your tab's content. In addition, vertical tabs cause confusion, as users might mistake the tabs for your application's main navigation. The vertical arrangement may also tempt you to use a larger number of tabs, which is not recommended.\n\nIf you need help replacing vertical tabs in your interface, reach out to the Rivet team.\n\nJavaScript API\nIf you use the appropriate data attribute/id combination in your markup, tabs will work without the need for any additional JavaScript. But if you need to control tabs programmatically, there are a handful of methods from the Rivet tabs API you can use:\n\n{{}}{{}}\n\nCustom Events\nThe Rivet Tabs also emit a custom event when a tab is activated that you can listen for in your own scripts.\n\n{{}}{{}}\n\nCustom event example\nNote here that the event.detail.name() property of the customEvent object is a function that returns a String. Read more about custom events on the MDN web docs.\n\n{{}}// Listen for a custom \"tabActivated\" event\ndocument.addEventListener('tabActivated', event => {\n  if (event.detail.name() === 'my-tab') {\n    alert('Hey, you activated the tab!')\n  }\n  // Maybe send some data via an AJAX request, etc...\n}, false);\n{{}}",
        "rawContent": "## Default tabs example\n{{< example lang=\"html\" >}}<div class=\"rvt-tabs\">\n    <div class=\"rvt-tabs__tablist\" role=\"tablist\" aria-label=\"Rivet tabs\">\n        <button class=\"rvt-tabs__tab\" role=\"tab\" aria-selected=\"true\" data-tab=\"tab-1\" id=\"t-one\">\n            Tab one\n        </button>\n        <button class=\"rvt-tabs__tab\" role=\"tab\" aria-selected=\"false\" data-tab=\"tab-2\" id=\"t-two\" tabindex=\"-1\">\n            Tab two\n        </button>\n        <button class=\"rvt-tabs__tab\" role=\"tab\" aria-selected=\"false\" data-tab=\"tab-3\" id=\"t-three\" tabindex=\"-1\">\n            Tab three\n        </button>\n    </div>\n    <div class=\"rvt-tabs__panel\" tabindex=\"0\" role=\"tabpanel\" id=\"tab-1\" aria-labelledby=\"t-one\">\n        <span class=\"rvt-ts-23 rvt-text-bold\">Panel 1</span>\n        <p>\n            Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor\n            in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n        </p>\n    </div>\n    <div class=\"rvt-tabs__panel\" tabindex=\"0\" role=\"tabpanel\" id=\"tab-2\" aria-labelledby=\"t-two\" hidden=\"\">\n        <span class=\"rvt-ts-23 rvt-text-bold\">Panel 2</span>\n        <p>\n            Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n        </p>\n    </div>\n    <div class=\"rvt-tabs__panel\" tabindex=\"0\" role=\"tabpanel\" id=\"tab-3\" aria-labelledby=\"t-three\" hidden=\"\">\n        <span class=\"rvt-ts-23 rvt-text-bold\">A grid inside a tab panel</span>\n        <div class=\"rvt-grid\">\n            <div class=\"rvt-grid__item-4-md-up\">\n                <p>\n                    Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n                </p>\n            </div>\n            <div class=\"rvt-grid__item-8-md-up\">\n                <p>\n                    Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non\n                    proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n                </p>\n            </div>\n        </div>\n    </div>\n</div>\n{{< /example >}}\n\n## When to use\n- Displaying a small number (2-5 categories) of closely related, distinct data\n- Displaying multiple unique views of the same data\n- Category labels are short and easy to understand\n- Switching between views is common for your users’ goals\n- Category names are unlikely to change very often and number of categories is unlikely to grow\n\n## When to consider something else\n- Displaying six or more categories (or more than what will easily fit horizontally on your target users' screen)\n- Displaying categories that require long labels for clarity\n- Users will frequently need to compare data from different tabs/categories\n- The data for each tab could just as easily function as its own page\n- If you are tempted to include a ‘More’ tab\n- If the amount of data that would be shown on each tab is small\n\n## Accessibility Requirements\n{{% a11y %}}\nThe Rivet Tabs are built to follow the WAI-ARIA authoring standards. It is marked up with the appropriate ARIA attributes and uses the JavaScript included in `rivet.js` to implement the keyboard navigation and focus management required to meet the [ARIA Authoring Practices](http://w3c.github.io/aria-practices/) standards. If you need to create the Tabs functionality in another framework/library like React, Angular, etc., please ensure that it meets the following accessibility requirements.\n\n### Focus\n- Tabs should have a visible `:focus` state\n- Active tabs should have a visible `aria-selected=\"true\"` state\n- Activating a tab should set its associated tab panel's `tabindex` attribute to `-1`. All in active tabs should have their `tabindex` attribute set to `0` so that after the used activates a tab, pressing <kbd>Tab</kbd> will move focus to the active tab's tab panel.\n\n### Labeling\n- Tabs should be wrapped in an element with a role of [tablist](https://www.w3.org/TR/wai-aria-1.1/#tablist)\n- Each tab (button) should have a role of [tab](https://www.w3.org/TR/wai-aria-1.1/#tab)\n- Each tab panel should have a role of [tabpanel](https://www.w3.org/TR/wai-aria-1.1/#tabpanel)\n- The active tab should have the attribute [aria-selected](https://www.w3.org/TR/wai-aria-1.1/#aria-selected) set to `true`. All inactive tabs should have `aria-selected` set to `false`\n- Each `tabpanel` should have an `aria-labelledby` attribute that references its associated tab\n\n### Keyboard navigation\n- <kbd>Enter</kbd> or <kbd>Space</kbd> = Activate tab (when focused)\n- <kbd>&larr;</kbd><kbd>&rarr;</kbd> = Moves focus to previous/next tab\n{{% /a11y %}}\n\n## Implementation notes\n- Do not stack rows of tabs - only use a small set of tabs in a single row\n- Order tabs in a logical manner\n- Default tab (on page load) should be the first tab. The first tab should be the most frequently viewed or most important tab.\n- Tab order should stay the same as the user moves between tabs\n- Label tabs with clear concise categories - 1-2 words is ideal\n- Do not use all capital letters in the tab labels\n- Do not include a ‘More’ tab\n- Page should not reload or refresh when the user switches to a different tab\n- Only the content of the tab and tab bar indicating the user's location should change. The rest of the page should remain the same.\n\n## Fitted version\nApplying the modifier class `.rvt-tabs--fitted` to the main `.rvt-tabs` container will make the tabs take up equal amounts of the space of the tabs container.\n\n{{< example lang=\"html\" >}}<div class=\"rvt-tabs rvt-tabs--fitted\">\n    <div class=\"rvt-tabs__tablist\" role=\"tablist\" aria-label=\"Rivet tabs\">\n        <button class=\"rvt-tabs__tab\" role=\"tab\" aria-selected=\"true\" data-tab=\"tab-1-fitted\" id=\"t-one-fitted\">\n            Tab one\n        </button>\n        <button class=\"rvt-tabs__tab\" role=\"tab\" aria-selected=\"false\" data-tab=\"tab-2-fitted\" id=\"t-two-fitted\" tabindex=\"-1\">\n            Tab two\n        </button>\n        <button class=\"rvt-tabs__tab\" role=\"tab\" aria-selected=\"false\" data-tab=\"tab-3-fitted\" id=\"t-three-fitted\" tabindex=\"-1\">\n            Tab three\n        </button>\n    </div>\n    <div class=\"rvt-tabs__panel\" tabindex=\"0\" role=\"tabpanel\" id=\"tab-1-fitted\" aria-labelledby=\"t-one-fitted\">\n        <span class=\"rvt-ts-26 rvt-text-bold rvt-display-block\">Sue’s Salads</span>\n        <p>\n            Panel 1: Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute\n            irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n        </p>\n    </div>\n    <div class=\"rvt-tabs__panel\" tabindex=\"0\" role=\"tabpanel\" id=\"tab-2-fitted\" aria-labelledby=\"t-two-fitted\" hidden=\"\">\n        <span class=\"rvt-ts-26 rvt-text-bold rvt-display-block\">JJ’s Diner</span>\n        <p>\n            Panel 2: Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n        </p>\n    </div>\n    <div class=\"rvt-tabs__panel\" tabindex=\"0\" role=\"tabpanel\" id=\"tab-3-fitted\" aria-labelledby=\"t-three-fitted\" hidden=\"\">\n        <span class=\"rvt-ts-26 rvt-text-bold rvt-display-block\">Food n’ Stuff</span>\n        <p>\n            Panel 3: Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n        </p>\n    </div>\n</div>\n{{< /example >}}\n\n## Vertical Tabs\n\n{{< alert variant=\"danger\" title=\"Vertical tabs are deprecated\" >}}\nWhile Rivet supports displaying tabs vertically along the left-hand side of the content area, we've deprecated that feature and will be removing vertical tabs in a future release.\n{{< /alert >}}\n\nTabs work best when displayed horizontally. Displaying tabs vertically along the left-hand side of the content area takes up horizontal screen space, which limits the display area of your tab's content. In addition, vertical tabs cause confusion, as users might mistake the tabs for your application's main navigation. The vertical arrangement may also tempt you to use a larger number of tabs, which is not recommended.\n\nIf you need help replacing vertical tabs in your interface, [reach out to the Rivet team](mailto:rivet@iu.edu).\n\n## JavaScript API\nIf you use the appropriate data attribute/id combination in your markup, tabs will work without the need for any additional JavaScript. But if you need to control tabs programmatically, there are a handful of methods from the Rivet tabs API you can use:\n\n{{< apidocs type=\"methods\" >}}{{< /apidocs >}}\n\n### Custom Events\nThe Rivet Tabs also emit a custom event when a tab is activated that you can listen for in your own scripts.\n\n{{< apidocs type=\"events\" >}}{{< /apidocs >}}\n\n#### Custom event example\nNote here that the `event.detail.name()` property of the `customEvent` object is a function that returns a String. Read more about custom events on the [MDN web docs](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent).\n\n{{< code lang=\"js\" >}}// Listen for a custom \"tabActivated\" event\ndocument.addEventListener('tabActivated', event => {\n  if (event.detail.name() === 'my-tab') {\n    alert('Hey, you activated the tab!')\n  }\n  // Maybe send some data via an AJAX request, etc...\n}, false);\n{{< /code >}}",
        "tags": [],
        "description": "Use tabs to allow users to switch between logical chunks of content without having to leave the current page."
    },
    {
        "uri": "components/utilities/border",
        "title": "Border",
        "content": "Border utility examples\nEasily add borders to any element using the following utility classes. All borders applied via utility classes will have the value 1px solid #dddddd. We've also included an extra border utility class to add the default border-radius (.25rem/4px) to an element.\n\n{{}}\n\n            Border top\n\n            Border right\n\n            Border bottom\n\n            Border left\n\n            Border all\n\n            Border radius\n\n{{}}\n\nBorder utility CSS classes\n\nrvt-border-top\nrvt-border-right\nrvt-border-bottom\nrvt-border-left\nrvt-border-all\nrvt-border-radius",
        "rawContent": "## Border utility examples\nEasily add borders to any element using the following utility classes. All borders applied via utility classes will have the value `1px solid #dddddd`. We've also included an extra border utility class to add the default border-radius (.25rem/4px) to an element.\n\n{{< example lang=\"html\" >}}<ul class=\"rvt-plain-list\">\n    <li class=\"rvt-m-top-md\">\n        <!--\n            Using some padding utilities here for demo purposes,\n            but they are not required to use with border utilities\n        -->\n        <div class=\"rvt-border-top rvt-p-all-md\">\n            <span>Border top</span>\n        </div>\n    </li>\n    <li class=\"rvt-m-top-md\">\n        <div class=\"rvt-border-right rvt-p-all-md\">\n            <span>Border right</span>\n        </div>\n    </li>\n    <li class=\"rvt-m-top-md\">\n        <div class=\"rvt-border-bottom rvt-p-all-md\">\n            <span>Border bottom</span>\n        </div>\n    </li>\n    <li class=\"rvt-m-top-md\">\n        <div class=\"rvt-border-left rvt-p-all-md\">\n            <span>Border left</span>\n        </div>\n    </li>\n    <li class=\"rvt-m-top-md\">\n        <div class=\"rvt-border-all rvt-p-all-md\">\n            <span>Border all</span>\n        </div>\n    </li>\n    <li class=\"rvt-m-top-md\">\n        <div class=\"rvt-border-all rvt-border-radius rvt-p-all-md\">\n            <span>Border radius</span>\n        </div>\n    </li>\n</ul>\n{{< /example >}}\n\n## Border utility CSS classes\n\n- `rvt-border-top`\n- `rvt-border-right`\n- `rvt-border-bottom`\n- `rvt-border-left`\n- `rvt-border-all`\n- `rvt-border-radius`",
        "tags": [],
        "description": "Use Rivet's border utilities to add a border to any or all sides of an element."
    },
    {
        "uri": "components/utilities/display",
        "title": "Display",
        "content": "\nScreen reader only\nUse the .rvt-sr-only utility class to visually hide content, but still leave it accessible to screen readers.\n\n{{}}This text is visible but, this text is visually hidden and still accessible to screen readers.\n{{}}\n\nVisually hidden labels example\nAnother practical example of when to use the the .rvt-sr-only utility is when you need to hide a form label from visual users, but still want it to be available to those using assistive technology. This can be helpful when you are implementing patterns like a search bar and need to conserve space.\n\n{{}}Search\n\n        Search\n\n{{}}\n\nDisplay property utilities\nThe Rivet rvt-display-* utilities can be used to easily change the css display: property. The display utilities included in Rivet are:\n\n.rvt-display-inline\n.rvt-display-inline-block\n.rvt-display-block\n.rvt-display-flex\n    .rvt-vertical-center (only works with .rvt-display-flex)\n\n{{}}Display inline\n{{}}\n\n{{}}Display block\n{{}}\n\n{{}}\nIn previous versions of Rivet, we used the .rvt-display-flex and .rvt-vertical-center classes to lay out items in a container. These classes are now deprecated in favor of the new Rivet flex utility classes.\n\nIf you are using .rvt-display-flex or .rvt-vertical-center, please update your application to use the new flex utility classes.\n{{}}\n\n{{}}\n    Flex child\n    Flex child\n    Flex child\n\n{{}}\n\nVertically centered flex children\nYou can use the .rvt-vertical-center along with .rvt-display-flex to vertically center child elements. This sets the align-items property to center.\n{{}}\n    Flex child\n    Flex child\n    Flex child\n\n{{}}\n",
        "rawContent": "\n## Screen reader only\nUse the `.rvt-sr-only` utility class to visually hide content, but still leave it accessible to screen readers.\n\n{{< example lang=\"html\" >}}<h1 class=\"rvt-ts-32\">This text is visible <span class=\"rvt-sr-only\">but, this text is visually hidden and still accessible to screen readers.</span></h1>\n{{< /example >}}\n\n## Visually hidden labels example\nAnother practical example of when to use the the `.rvt-sr-only` utility is when you need to hide a form label from visual users, but still want it to be available to those using assistive technology. This can be helpful when you are implementing patterns like a search bar and need to conserve space.\n\n{{< example lang=\"html\" >}}<label for=\"search\" class=\"rvt-sr-only\">Search</label>\n<div class=\"rvt-input-group\">\n    <input class=\"rvt-input-group__input\" type=\"text\" id=\"search\">\n    <div class=\"rvt-input-group__append\">\n        <button class=\"rvt-button\">Search</button>\n    </div>\n</div>\n{{< /example >}}\n\n## Display property utilities\nThe Rivet `rvt-display-*` utilities can be used to easily change the css `display:` property. The display utilities included in Rivet are:\n\n- `.rvt-display-inline`\n- `.rvt-display-inline-block`\n- `.rvt-display-block`\n- `.rvt-display-flex`\n    - `.rvt-vertical-center` (only works with `.rvt-display-flex`)\n\n{{< example lang=\"html\" >}}<div class=\"rvt-display-inline bg-midnight\">Display inline</div>\n{{< /example >}}\n\n{{< example lang=\"html\" >}}<span class=\"rvt-display-block bg-green\">Display block</span>\n{{< /example >}}\n\n{{< alert variant=\"warning\" title=\"Class deprecation\" >}}\nIn previous versions of Rivet, we used the `.rvt-display-flex` and `.rvt-vertical-center` classes to lay out items in a container. These classes are now deprecated in favor of the new [Rivet flex utility classes](https://rivet.iu.edu/components/utilities/flex/). \n\nIf you are using `.rvt-display-flex` or `.rvt-vertical-center`, please update your application to use the new flex utility classes.\n{{< /alert >}}\n\n{{< example lang=\"html\" >}}<div class=\"rvt-display-flex\">\n    <div class=\"bg-orange rvt-m-right-sm\">Flex child</div>\n    <div class=\"bg-orange rvt-m-right-sm\">Flex child</div>\n    <div class=\"bg-orange rvt-m-right-sm\">Flex child</div>\n</div>\n{{< /example >}}\n\n### Vertically centered flex children\nYou can use the `.rvt-vertical-center` along with `.rvt-display-flex` to vertically center child elements. This sets the `align-items` property to `center`.\n{{< example lang=\"html\" >}}<div class=\"rvt-display-flex rvt-vertical-center\" style=\"height: 200px; background-color: #ddd;\">\n    <div class=\"bg-orange rvt-m-right-sm\">Flex child</div>\n    <div class=\"bg-orange rvt-m-right-sm\">Flex child</div>\n    <div class=\"bg-orange rvt-m-right-sm\">Flex child</div>\n</div>\n{{< /example >}}\n",
        "tags": [],
        "description": "The Rivet display utility classes make it easy to control how elements display on screen and how they are presented to assistive technologies like screen readers."
    },
    {
        "uri": "components/utilities/flex",
        "title": "Flex",
        "content": "Flex utilities example\nThe Rivet flexbox utilities provide a robust set of CSS classes you can use to lay out items in a container. These utilities take advantage of CSS flexbox and are designed to be used when fine-tuning the layout of items at the individual component level.\n\nThe flex utilities are not intended for page layout. You should use the Rivet grid system for page layout.\n\n{{}}\n  Item one\n  Item two\n  Item three\n  Item four\n  Item five\n\n{{}}\n\nAvailable flex utilities\nThe flex utilities come with CSS classes for most flex properties, but not all.\n\nBecause we have designed these utilities to be generic, we have intentionally left out flex properties that require specific knowledge of how many items live in a given flex container (e.g. order), as we'd be unable to create utility classes that would cover every likely combination. We've left out properties that set the widths of flex children (e.g. flex-basis) for similar reasons.\n\n{{}}\nThe specifics of how the various flexbox properties work is beyond the scope of this documentation. If you need help with flexbox, we recommend checking out this Complete Guide to Flexbox on CSS-Tricks.\n{{}}\n\nResponsive flex utilities\nAll of the flex utilities have responsive variants that correspond to Rivet's standard breakpoints. Adding the breakpoint suffix --up will cause the flex utility to start working at that breakpoint screen size and larger, similar to how Rivet's spacing and typography classes work.\n\n{{}}\n  Item one\n  Item two\n  Item three\n\n{{}}\n\nFlex container utilities\nA flex container is generally the parent element to which you would apply the display: flex; property. The flex utilities have CSS classes for most of the flex container properties available in the flexbox model.\n\nThe following flex container CSS utility classes are available:\n\nflex, flex-direction, and flex-wrap\nSee the documentation on the Mozilla Developer Network (MDN) for more information about the flex, flex-direction, and flex-wrap properties.\n\n.rvt-flex\n.rvt-inline-flex\n.rvt-row\n.rvt-row-reverse\n.rvt-column\n.rvt-column-reverse\n.rvt-wrap\n.rvt-no-wrap\n.rvt-wrap-reverse\n\njustify-content\nSee the documentation on MDN for more information about the justify-content property.\n\n.rvt-justify-start\n.rvt-justify-end\n.rvt-justify-center\n.rvt-justify-space-between\n.rvt-justify-space-around\n.rvt-justify-space-evenly\n\nalign-content\nSee the documentation on MDN for more information about the align-content property.\n\n.rvt-content-start\n.rvt-content-end\n.rvt-content-center\n.rvt-content-stretch\n.rvt-content-baseline\n\nalign-items\nSee the documentation on MDN for more information about the align-items property.\n\n.rvt-items-start\n.rvt-items-end\n.rvt-items-center\n.rvt-items-stretch\n.rvt-items-baseline\n\nFlex item utilities\nA flex item is generally the direct child of any flex container. The flex utilities have CSS classes for most of the flex item properties in the flexbox model.\n\nThe following flex item CSS utility classes are available:\n\nflex-shrink and flex-grow\nSee the documentation on MDN for more information about the flex-shrink and flex-grow properties.\n\n.rvt-shrink-1\n.rvt-shrink-0\n.rvt-grow-1\n.rvt-grow-0\n\nalign-self\nSee the documentation on MDN for more information about the align-self property.\n\n.rvt-self-start\n.rvt-self-end\n.rvt-center-end\n.rvt-stretch-end\n.rvt-baseline-end",
        "rawContent": "## Flex utilities example\nThe Rivet flexbox utilities provide a robust set of CSS classes you can use to lay out items in a container. These utilities take advantage of [CSS flexbox](https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Flexbox) and are designed to be used when fine-tuning the layout of items at the individual component level. \n\nThe flex utilities **are not intended for page layout**. You should use the [Rivet grid system]({{< ref \"components/layout/grid.md\" >}}) for page layout.\n\n{{< example lang=\"html\" >}}<div class=\"rvt-flex rvt-wrap\">\n  <div class=\"rvt-bg-blue rvt-m-right-sm\">Item one</div>\n  <div class=\"rvt-bg-blue rvt-m-right-sm\">Item two</div>\n  <div class=\"rvt-grow-1 rvt-bg-blue rvt-m-right-sm\">Item three</div>\n  <div class=\"rvt-bg-blue rvt-m-right-sm\">Item four</div>\n  <div class=\"rvt-bg-blue rvt-m-right-sm\">Item five</div>\n</div>\n{{< /example >}}\n\n## Available flex utilities\nThe flex utilities come with CSS classes for most [flex properties](https://developer.mozilla.org/en-US/docs/Web/CSS/flex), but not all.\n\nBecause we have designed these utilities to be generic, we have intentionally left out flex properties that require specific knowledge of how many items live in a given flex container (e.g. `order`), as we'd be unable to create utility classes that would cover every likely combination. We've left out properties that set the widths of flex children (e.g. `flex-basis`) for similar reasons.\n\n{{< alert variant=\"info\" title=\"Help with flexbox\" >}}\nThe specifics of how the various flexbox properties work is beyond the scope of this documentation. If you need help with flexbox, we recommend checking out this [Complete Guide to Flexbox on CSS-Tricks](https://css-tricks.com/snippets/css/a-guide-to-flexbox/).\n{{< /alert >}}\n\n### Responsive flex utilities\nAll of the flex utilities have responsive variants that correspond to [Rivet's standard breakpoints]({{< ref \"components/layout/grid.md#grid-breakpoints\" >}}). Adding the breakpoint suffix `-<breakpoint name>-up` will cause the flex utility to start working at that breakpoint screen size and larger, similar to how Rivet's [spacing]({{< ref \"components/layout/spacing.md\" >}}) and [typography]({{< ref \"components/layout/typography.md\" >}}) classes work.\n\n{{< example lang=\"html\" >}}<div class=\"rvt-flex-md-up rvt-justify-space-between-lg-up\">\n  <div class=\"rvt-bg-blue rvt-m-right-sm-md-up\">Item one</div>\n  <div class=\"rvt-bg-blue rvt-m-right-sm-md-up\">Item two</div>\n  <div class=\"rvt-bg-blue rvt-m-right-sm-md-up\">Item three</div>\n</div>\n{{< /example >}}\n\n### Flex container utilities\nA flex container is generally the parent element to which you would apply the `display: flex;` property. The flex utilities have CSS classes for most of the flex container properties available in the flexbox model.\n\nThe following flex **container** CSS utility classes are available:\n\n#### flex, flex-direction, and flex-wrap\nSee the documentation on the [Mozilla Developer Network (MDN)][1] for more information about the [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex), [flex-direction](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-direction), and [flex-wrap](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-wrap) properties.\n\n- `.rvt-flex`\n- `.rvt-inline-flex`\n- `.rvt-row`\n- `.rvt-row-reverse`\n- `.rvt-column`\n- `.rvt-column-reverse`\n- `.rvt-wrap`\n- `.rvt-no-wrap`\n- `.rvt-wrap-reverse`\n\n#### justify-content\nSee the documentation on [MDN][1] for more information about the [justify-content](https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content) property.\n\n- `.rvt-justify-start`\n- `.rvt-justify-end`\n- `.rvt-justify-center`\n- `.rvt-justify-space-between`\n- `.rvt-justify-space-around`\n- `.rvt-justify-space-evenly`\n\n#### align-content\nSee the documentation on [MDN][1] for more information about the [align-content](https://developer.mozilla.org/en-US/docs/Web/CSS/align-content) property.\n\n- `.rvt-content-start`\n- `.rvt-content-end`\n- `.rvt-content-center`\n- `.rvt-content-stretch`\n- `.rvt-content-baseline`\n\n#### align-items\nSee the documentation on [MDN][1] for more information about the [align-items](https://developer.mozilla.org/en-US/docs/Web/CSS/align-items) property.\n\n- `.rvt-items-start`\n- `.rvt-items-end`\n- `.rvt-items-center`\n- `.rvt-items-stretch`\n- `.rvt-items-baseline`\n\n### Flex item utilities\nA flex item is generally the direct child of any flex container. The flex utilities have CSS classes for most of the flex item properties in the flexbox model.\n\nThe following flex **item** CSS utility classes are available:\n\n#### flex-shrink and flex-grow\nSee the documentation on [MDN][1] for more information about the [flex-shrink](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-shrink) and [flex-grow](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-grow) properties.\n\n- `.rvt-shrink-1`\n- `.rvt-shrink-0`\n- `.rvt-grow-1`\n- `.rvt-grow-0`\n\n#### align-self\nSee the documentation on [MDN][1] for more information about the [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) property.\n\n- `.rvt-self-start`\n- `.rvt-self-end`\n- `.rvt-center-end`\n- `.rvt-stretch-end`\n- `.rvt-baseline-end`\n\n[1]: https://developer.mozilla.org/en-US/docs/Web",
        "tags": [],
        "description": "This set of responsive flexbox utilities can help you fine-tune layouts based on different screen sizes."
    },
    {
        "uri": "components/utilities/text",
        "title": "Text",
        "content": "Font weight\nYou can use the rivet text utilities to change the font-weight property of text. The available utility classes are:\n\n.rvt-text-regular\n.rvt-text-bold\n\n{{}}Regular text utilitiy\nBold Text utility\n{{}}\n\nLine height\nIn Rivet the line-height of the ` element is set to 1.5 globally for better legibility. This can sometimes make larger text (like headings or titles) appear as if the line-height is too tall. For that reason, we created a text utility called .rvt-lh-title that you can use to give larger text a smaller line-height`.\n\n{{}}This large text could sometimes end up in a space that causes it to run on to two lines.\n{{}}\n\nText alignment\nUse the text alignment utilities to change the text-align property of any text. The available text alignment utilities are:\n\n.rvt-text-left\n.rvt-text-center\n.rvt-text-right\n\n{{}}Left-aligned text utilitiy\nCenter-aligned text utilitiy\nRight-aligned text utilitiy\n{{}}\n\nUppercase\nThe .rvt-text-uppercase utility class sets the text-transform CSS property to uppercase and adds a small amount of letter-spacing to improve readablility.\n\n{{}}Uppercase text utilitiy\n{{}}\n\nNo break\nIf you need to stop text from wrapping, for example next to radio buttons or checkboxes, you can use the .rvt-text-nobr utility.\n\n{{}}\n\n        Checkbox list\n\n                The label for this checkbox is quite long, but will not break.\n\n                Option two\n\n{{}}\n",
        "rawContent": "## Font weight\nYou can use the rivet text utilities to change the `font-weight` property of text. The available utility classes are:\n\n- `.rvt-text-regular`\n- `.rvt-text-bold`\n\n{{< example lang=\"html\" >}}<strong class=\"rvt-text-regular\">Regular text utilitiy</strong>\n<div class=\"rvt-text-bold\">Bold Text utility</div>\n{{< /example >}}\n\n## Line height\nIn Rivet the `line-height` of the `<body>` element is set to `1.5` globally for better legibility. This can sometimes make larger text (like headings or titles) appear as if the line-height is too tall. For that reason, we created a text utility called `.rvt-lh-title` that you can use to give larger text a smaller `line-height`.\n\n{{< example lang=\"html\" >}}<h3 class=\"rvt-ts-36 rvt-lh-title\">This large text could sometimes end up in a space that causes it to run on to two lines.</h3>\n{{< /example >}}\n\n## Text alignment\nUse the text alignment utilities to change the `text-align` property of any text. The available text alignment utilities are:\n\n- `.rvt-text-left`\n- `.rvt-text-center`\n- `.rvt-text-right`\n\n{{< example lang=\"html\" >}}<p class=\"rvt-text-left\">Left-aligned text utilitiy</p>\n<p class=\"rvt-text-center\">Center-aligned text utilitiy</p>\n<p class=\"rvt-text-right\">Right-aligned text utilitiy</p>\n{{< /example >}}\n\n## Uppercase\nThe `.rvt-text-uppercase` utility class sets the `text-transform` CSS property to `uppercase` and adds a small amount of `letter-spacing` [to improve readablility](http://webtypography.net/2.1.6).\n\n{{< example lang=\"html\" >}}<p class=\"rvt-text-uppercase\">Uppercase text utilitiy</p>\n{{< /example >}}\n\n## No break\nIf you need to stop text from wrapping, for example next to radio buttons or checkboxes, you can use the `.rvt-text-nobr` utility.\n\n{{< example lang=\"html\" >}}<form>\n    <fieldset>\n        <legend class=\"sr-only\">Checkbox list</legend>\n        <ul class=\"rvt-plain-list\">\n            <li>\n                <input type=\"checkbox\" name=\"checkbox-demo\" id=\"checkbox-3\">\n                <label for=\"checkbox-3\" class=\"rvt-m-right-sm rvt-text-nobr\">The label for this checkbox is quite long, but will not break.</label>\n            </li>\n            <li>\n                <input type=\"checkbox\" name=\"checkbox-demo\" id=\"checkbox-4\">\n                <label for=\"checkbox-4\">Option two</label>\n            </li>\n        </ul>\n    </fieldset>\n</form>\n{{< /example >}}\n",
        "tags": [],
        "description": "The Rivet text utilities make it easy to style text."
    },
    {
        "uri": "components/utilities/visibility",
        "title": "Visibility",
        "content": "Hide down responsive utilities\nThe rvt-hide--downresponsive display utilities start out visible on any screen size above the largest breakpoint (1400px) and will hide content as the screen size becomes smaller*.\n\nResize your browser window to see how the rvt-hide-*-down utilities work.\n\n{{}}\n    .rvt-hide-sm-down\n    Hidden at small breakpoint down\n    .rvt-hide-md-down\n    Hidden at medium breakpoint down\n    .rvt-hide-lg-down\n    Hidden at large breakpoint down\n    .rvt-ide-xl-down\n    Hidden at extra large breakpoint down\n    .rvt-hide-xxl-down\n    Hidden at extra extra large breakpoint down\n\n{{}}\n\nHide up responsive utilities\nThe rvt-hide--up responsive display utilities start out visible on small screens and will hide content as the screen size becomes larger*.\n{{}}\n    .rvt-hide-sm-up\n    Hidden at small breakpoint up\n    .rvt-hide-md-up\n    Hidden at medium breakpoint up\n    .rvt-hide-lg-up\n    Hidden at large breakpoint up\n    .rvt-hide-xl-up\n    Hidden at extra large breakpoint up\n    .rvt-hide-xxl-up\n    Hidden at extra extra large breakpoint up\n\n{{}}\n",
        "rawContent": "## Hide down responsive utilities\nThe `rvt-hide-*-down`responsive display utilities start out visible on any screen size above the largest breakpoint (1400px) and will **hide content as the screen size becomes smaller**.\n\nResize your browser window to see how the `rvt-hide-*-down` utilities work.\n\n{{< example lang=\"html\" >}}<dl>\n    <dt>.rvt-hide-sm-down</dt>\n    <dd class=\"rvt-hide-sm-down\">Hidden at <strong>small breakpoint</strong> down</dd>\n    <dt>.rvt-hide-md-down</dt>\n    <dd class=\"rvt-hide-md-down\">Hidden at <strong>medium breakpoint</strong> down</dd>\n    <dt>.rvt-hide-lg-down</dt>\n    <dd class=\"rvt-hide-lg-down\">Hidden at <strong>large breakpoint</strong> down</dd>\n    <dt>.rvt-ide-xl-down</dt>\n    <dd class=\"rvt-hide-xl-down\">Hidden at <strong>extra large breakpoint</strong> down</dd>\n    <dt>.rvt-hide-xxl-down</dt>\n    <dd class=\"rvt-hide-xxl-down\">Hidden at <strong>extra extra large breakpoint</strong> down</dd>\n</dl>\n{{< /example >}}\n\n## Hide up responsive utilities\nThe `rvt-hide-*-up` responsive display utilities start out visible on small screens and will hide content as the screen **size becomes larger**.\n{{< example lang=\"html\" >}}<dl>\n    <dt class=\"color-midnight\">.rvt-hide-sm-up</dt>\n    <dd class=\"rvt-hide-sm-up\">Hidden at <strong>small breakpoint</strong> up</dd>\n    <dt class=\"color-midnight\">.rvt-hide-md-up</dt>\n    <dd class=\"rvt-hide-md-up\">Hidden at <strong>medium breakpoint</strong> up</dd>\n    <dt class=\"color-midnight\">.rvt-hide-lg-up</dt>\n    <dd class=\"rvt-hide-lg-up\">Hidden at <strong>large breakpoint</strong> up</dd>\n    <dt class=\"color-midnight\">.rvt-hide-xl-up</dt>\n    <dd class=\"rvt-hide-xl-up\">Hidden at <strong>extra large breakpoint</strong> up</dd>\n    <dt class=\"color-midnight\">.rvt-hide-xxl-up</dt>\n    <dd class=\"rvt-hide-xxl-up\">Hidden at <strong>extra extra large breakpoint</strong> up</dd>\n</dl>\n{{< /example >}}\n",
        "tags": [],
        "description": "These utilities make it easy to show and hide content depending on screen sizes."
    },
    {
        "uri": "components/utilities/z-index",
        "title": "z-index",
        "content": "z-index range\nThere are 10 z-index utility classes that set z-index values in increments of 100. We chose these increments so that it’s possible to set z-index to custom numbers that fall somewhere between the preset numbers (0, 100, 200, etc.).\n\n{{}}\n\n        1000\n\n        900\n\n        800\n\n        700\n\n        600\n\n        500\n\n        400\n\n        300\n\n        200\n\n        100\n\n        0\n\n{{}}\n",
        "rawContent": "## z-index range\nThere are 10 z-index utility classes that set z-index values in increments of 100. We chose these increments so that it’s possible to set z-index to custom numbers that fall somewhere between the preset numbers (0, 100, 200, etc.).\n\n{{< example lang=\"html\" >}}<div style=\"position: relative; height: 550px; width: 100%; overflow-y: scroll;\">\n    <div class=\"rvt-z-1000 z-example\">\n        1000\n    </div>\n    <div class=\"rvt-z-900 z-example\">\n        900\n    </div>\n    <div class=\"rvt-z-800 z-example\">\n        800\n    </div>\n    <div class=\"rvt-z-700 z-example\">\n        700\n    </div>\n    <div class=\"rvt-z-600 z-example\">\n        600\n    </div>\n    <div class=\"rvt-z-500 z-example\">\n        500\n    </div>\n    <div class=\"rvt-z-400 z-example\">\n        400\n    </div>\n    <div class=\"rvt-z-300 z-example\">\n        300\n    </div>\n    <div class=\"rvt-z-200 z-example\">\n        200\n    </div>\n    <div class=\"rvt-z-100 z-example\">\n        100\n    </div>\n    <div class=\"rvt-z-0 z-example\">\n        0\n    </div>\n</div>\n{{< /example >}}\n\n",
        "tags": [],
        "description": "These utility classes let you easily change the z-index of an element."
    },
    {
        "uri": "content-guide",
        "title": "Content guide",
        "content": "Our approach\n\nStart with user needs\nWrite in a way that suits the situation. Ask yourself: Who is going to read this? What do they need to know? How might they be feeling?\nHelp people find the information they need quickly and easily. Guide them through the process.\n\nDo the hard work to make it simple\nUse plain language and simple sentences.\nChoose clarity over cleverness.\nBe concise.\n\nWrite for everyone\nRespect the complexity of our users’ experiences.\nBe willing to be surprised about who’s reading your work.\n\nBuild trust\nTalk like a person.\nTell the truth.\nUse positive language and concrete examples.\n\nStart small and iterate\nMake sure your content works for users. Don’t be afraid to scrap what’s there and start over.\nWrite a draft, test it out, gather feedback, and keep refining.\n\nWe drew heavily from 18F’s content guide to create this microcopy guide. Many thanks to 18F for keeping their work in the public domain!",
        "rawContent": "## Our approach\n\n### Start with user needs\n* Write in a way that suits the situation. Ask yourself: Who is going to read this? What do they need to know? How might they be feeling?\n* Help people find the information they need quickly and easily. Guide them through the process.\n\n### Do the hard work to make it simple\n* Use plain language and simple sentences.\n* Choose clarity over cleverness.\n* Be concise.\n\n\n### Write for everyone\n* Respect the complexity of our users’ experiences.\n* Be willing to be surprised about who’s reading your work.\n\n\n### Build trust\n* Talk like a person.\n* Tell the truth.\n* Use positive language and concrete examples.\n\n### Start small and iterate\n* Make sure your content works for users. Don’t be afraid to scrap what’s there and start over.\n* Write a draft, test it out, gather feedback, and keep refining.\n\n_We drew heavily from [18F’s content guide](https://content-guide.18f.gov/) to create this microcopy guide. Many thanks to 18F for keeping their work in the public domain!_",
        "tags": [],
        "description": "Learn how to write content that works for your users."
    },
    {
        "uri": "content-guide/microcopy",
        "title": "Microcopy",
        "content": "",
        "rawContent": "",
        "tags": [],
        "description": ""
    },
    {
        "uri": "content-guide/microcopy/active-voice",
        "title": "Active voice",
        "content": "The active voice helps the reader identify the subject of the sentence. In the following examples, the person who submits the form and saves the case number is essential information. Omitting that leads to a confusing, impersonal, and longer sentence.\n\nPassive: The request form must be submitted to the approving official.\nActive: You must submit the request form to the approving official.\nPassive: The case number should be saved in your records.\nActive: Save the case number in your records.\n\nWhen in doubt, cut directly to the verb and give the reader clear directions.\n\nHow to recognize the passive voice\nUse of the passive voice is common enough that many people don’t notice when they use it. Here’s a simple way to recognize it, courtesy of Dr. Rebecca Johnson: If you insert “by zombies” after the verb and the sentence still makes sense (“the banana was eaten by zombies”), you’re using the passive voice.\n",
        "rawContent": "**The active voice helps the reader identify the subject of the sentence.** In the following examples, the person who submits the form and saves the case number is essential information. Omitting that leads to a confusing, impersonal, and longer sentence.\n\n* **Passive**: The request form must be submitted to the approving official.\n* **Active**: You must submit the request form to the approving official.\n* **Passive**: The case number should be saved in your records.\n* **Active**: Save the case number in your records.\n\nWhen in doubt, cut directly to the verb and give the reader clear directions.\n\n## How to recognize the passive voice\nUse of the passive voice is common enough that many people don’t notice when they use it. Here’s a simple way to recognize it, courtesy of Dr. Rebecca Johnson: If you insert “**by zombies**” after the verb and the sentence still makes sense (“the banana was eaten by zombies”), you’re using the passive voice.\n",
        "tags": [],
        "description": "Our writing should be concise and direct. We prefer the active voice because it supports brevity and makes written content more engaging, too."
    },
    {
        "uri": "content-guide/microcopy/address-the-user",
        "title": "Address the user",
        "content": "About\nAddress the user as you whenever possible. For example:\n\n> Our core campuses, our regional campuses, and IU Online offer a learning environment for every kind of student. Wherever you study, you’ll earn an Indiana University degree and find a community where you belong.\n\nIf you’re creating content for multiple users—such as students and faculty—address the primary user as you and refer to secondary users by their roles or titles.\n\nAdditional resources\n\nIt can be difficult to address the user, provide meaningful content, and suggest next steps concisely. We highly recommend reading these two resources for tips on \"choosing the right words\":\n\n  UX Writing: How to do it like Google with this powerful checklist\n  Effective UI texts: Words to avoid in writing\n\nYou should also be mindful and inclusive of all users. For questions about respectful, conscious, and empowering language, refer to the Conscious style guide.",
        "rawContent": "## About\nAddress the user as **you** whenever possible. For example:\n\n> Our core campuses, our regional campuses, and IU Online offer a learning environment for every kind of student. Wherever **you** study, **you’ll** earn an Indiana University degree and find a community where **you** belong.\n\nIf you’re creating content for multiple users—such as students and faculty—address the primary user as you and refer to secondary users by their roles or titles.\n\n## Additional resources\n\nIt can be difficult to address the user, provide meaningful content, _and_ suggest next steps concisely. We highly recommend reading these two resources for tips on \"choosing the right words\":\n\n  - [UX Writing: How to do it like Google with this powerful checklist](https://uxplanet.org/ux-writing-how-to-do-it-like-google-with-this-powerful-checklist-e263cc37f5f1)\n  - [Effective UI texts: Words to avoid in writing](https://icons8.com/articles/words-to-avoid-writing/)\n\nYou should also be mindful and inclusive of all users. For questions about respectful, conscious, and empowering language, refer to the [Conscious style guide](http://consciousstyleguide.com/).",
        "tags": [],
        "description": "Content on Indiana University sites and apps often makes a direct appeal to students, faculty, or staff to get involved or take action."
    },
    {
        "uri": "content-guide/microcopy/plain-language-and-structure",
        "title": "Plain language and structure",
        "content": "To use plain language, you should:\n\nUse easy or short words instead of formal or long ones\n\n    Buy instead of purchase, help instead of assist, about instead of approximately, etc.\n\nAvoid using technical jargon\n\n    Jargon can be vague or unfamiliar and lead to misinformation--which could affect users’ trust.\n\nBe open and specific\n\n    Figurative language (go forward, one-stop shop, drive out, etc.) often doesn’t say what you actually mean. Simply describe what the user should do.\n\nIf you’re struggling to use plain language, try writing conversationally. Picture your audience and write as if you were talking to them one-on-one, with the authority of someone who can actively help.\n\nStructure your text\n\nOnline, users tend to scan text until they find the information they need. Large chunks of text can overwhelm readers, so break up your text.\n\nUse subheads and bullet points—they provide clear narrative structure for readers in a hurry.\n\nDon’t be afraid to use bold or italics to grab attention. If you want to include an inline tip or highlight a note, words in bold stand out from the rest of the content.\n\nPut information-carrying words at the beginning of the phrase. You should also use the active voice.\n\nInstead of:\n\n> Information and policies regarding the usage of IU branding assets\n\nUse:\n\n> IU branding asset information and policies",
        "rawContent": "To use plain language, you should:\n\n* **Use easy or short words instead of formal or long ones**\n\n    Buy instead of purchase, help instead of assist, about instead of approximately, etc.\n\n* **Avoid using technical jargon**\n\n    Jargon can be vague or unfamiliar and lead to misinformation--which could affect users’ trust.\n\n* **Be open and specific**\n\n    Figurative language (go forward, one-stop shop, drive out, etc.) often doesn’t say what you actually mean. Simply describe what the user should do.\n\nIf you’re struggling to use plain language, try writing conversationally. Picture your audience and write as if you were talking to them one-on-one, with the authority of someone who can actively help.\n\n## Structure your text\n\nOnline, users tend to scan text until they find the information they need. Large chunks of text can overwhelm readers, so break up your text.\n\n1. **Use subheads and bullet points**—they provide clear narrative structure for readers in a hurry.\n\n2. **Don’t be afraid to use bold or italics to grab attention**. If you want to include an inline tip or highlight a note, words in bold stand out from the rest of the content.\n\n3. **Put information-carrying words at the beginning of the phrase**. You should also use the [active voice](/docs/microcopy/active-voice).\n\nInstead of:\n\n> Information and policies regarding the usage of IU branding assets\n\nUse:\n\n> IU branding asset information and policies",
        "tags": [],
        "description": "One of the best ways to make content clear and usable is to use plain language. When we use words people understand, our content is more findable, accessible, and inclusive."
    },
    {
        "uri": "content-guide/microcopy/what-is-microcopy",
        "title": "What is microcopy?",
        "content": "Defining microcopy\nMicrocopy is any text that stands apart from the content at large, including:\n\nPage titles\nPage headings (headlines)\nTaglines\nEmail subject lines\nSummaries, decks\nHints, tips, explainers\nButtons\nLoading states/pages\nError states/pages\n\nWhy is it important?\n\nMicrocopy can answer questions that arise at unexpected obstacles. It can also set expectations and guide the user to the content they need. A helpful login error message, for example, identifies the problem and how to fix it.\n\nClear, concise microcopy can turn a usable app into a user-friendly one.",
        "rawContent": "## Defining microcopy\nMicrocopy is any text that stands apart from the content at large, including:\n\n* Page titles\n* Page headings (headlines)\n* Taglines\n* Email subject lines\n* Summaries, decks\n* Hints, tips, explainers\n* Buttons\n* Loading states/pages\n* Error states/pages\n\n## Why is it important?\n\nMicrocopy can answer questions that arise at unexpected obstacles. It can also set expectations and guide the user to the content they need. A helpful login error message, for example, identifies the problem _and_ how to fix it.\n\nClear, concise microcopy can turn a usable app into a user-friendly one.",
        "tags": [],
        "description": "Find out what microcopy is and why it's important."
    },
    {
        "uri": "content-guide/style-basics",
        "title": "Style basics",
        "content": "",
        "rawContent": "",
        "tags": [],
        "description": ""
    },
    {
        "uri": "content-guide/style-basics/capitalization",
        "title": "Capitalization",
        "content": "Follow a consistent capitalization scheme.\n\nCreating trustworthy internal and external communications relies, to a large extent, on the content's consistency. Inconsistent spellings and capitalizations undermine your narrative authority. We follow these capitalization guidelines:\n\nDo capitalize proper nouns, including names of individuals, places, and agencies\nDon't capitalize agile, unless it is the first word of a sentence\nDo capitalize the first word of every bullet\n\nAccessibility notes\nUsing ALL CAPS can cause some screen readers to treat the words as acronyms and say the individual letters. Use other methods, like bold or italic text, to emphasize a point.\n",
        "rawContent": "**Follow a consistent capitalization scheme.**\n\nCreating trustworthy internal and external communications relies, to a large extent, on the content's consistency. Inconsistent spellings and capitalizations undermine your narrative authority. We follow these capitalization guidelines:\n\n* Do capitalize proper nouns, including names of individuals, places, and agencies\n* Don't capitalize agile, unless it is the first word of a sentence\n* Do capitalize the first word of every bullet\n\n## Accessibility notes\nUsing ALL CAPS can cause some screen readers to treat the words as acronyms and say the individual letters. Use other methods, like **bold** or *italic* text, to emphasize a point.\n",
        "tags": [],
        "description": "**Follow a consistent capitalization scheme.**\n\nCreating trustworthy internal and external communications relies, to a large extent, on the cont"
    },
    {
        "uri": "content-guide/style-basics/naming-conventions",
        "title": "Naming conventions",
        "content": "When naming a new system, you should consider the following:\n\nIs it easy to say and spell?\nDoes it describe the system or product?\nWill it work as a URL?\n\nYou should be able to answer “yes!” to all of the above—which can often be easier said than done. To choose a descriptive and straightforward name, follow the principles below:\n\nDon’t use CaMeLbAcK spelling\nDon’t combine multiple words to make a new word (e.g., IndiAccessiBook)\nAsk users for feedback before making a decision\n",
        "rawContent": "When naming a new system, you should consider the following:\n\n* Is it easy to say and spell?\n* Does it describe the system or product?\n* Will it work as a URL?\n\nYou should be able to answer “yes!” to all of the above—which can often be easier said than done. To choose a descriptive and straightforward name, follow the principles below:\n\n* Don’t use CaMeLbAcK spelling\n* Don’t combine multiple words to make a new word (e.g., IndiAccessiBook)\n* Ask users for feedback before making a decision\n",
        "tags": [],
        "description": "Some guidelines to follow when naming a new system or service"
    },
    {
        "uri": "content-guide/style-basics/numbers",
        "title": "Numbers and dates",
        "content": "We follow the Chicago Manual of Style here. The IT Communications Office (ITCO) says it best:\n\n> Number formatting: Zero through nine, 10 and up.\n\n> Date formatting: July 1 (add the year if date is more than one year prior/after)\n\nSee ITCO's style guide for more information.\n\nPercentages\nUse the percent sign (%) in these circumstances:\n\nTables and in technical or scientific writing. For example: 60% of participants reported experiencing negative side effects.\nHeadings and subheadings. For example: Candidate Woof takes 7% lead in the election for best dog.\nInterface labels\nCaptions and infographics\n\nThe percent sign in these cases improves content's scannability. Otherwise, spell out percent in body copy.\n",
        "rawContent": "We follow the Chicago Manual of Style here. The IT Communications Office (ITCO) says it best:\n\n> Number formatting: Zero through nine, 10 and up.\n\n> Date formatting: July 1 (add the year if date is more than one year prior/after)\n\nSee <a href=\"https://uits.iu.edu/itco/style-basics\" target=\"_blank\">ITCO's style guide</a> for more information.\n\n## Percentages\nUse the percent sign (%) in these circumstances:\n\n* Tables and in technical or scientific writing. For example: 60% of participants reported experiencing negative side effects.\n* Headings and subheadings. For example: Candidate Woof takes 7% lead in the election for best dog.\n* Interface labels\n* Captions and infographics\n\nThe percent sign in these cases improves content's scannability. Otherwise, spell out percent in body copy.\n",
        "tags": [],
        "description": "We follow the Chicago Manual of Style here. The IT Communications Office (ITCO) says it best:\n\n> Number formatting: Zero through nine, 10 and up"
    },
    {
        "uri": "content-guide/style-basics/punctuation",
        "title": "Punctuation",
        "content": "Colons\nCapitalize the first word after a colon, only if what follows is a complete sentence. For example:\n\nI have several favorite foods: apples, bananas, and naan chips.\nI have several favorite foods: Apples were my first favorite snack, but naan chips are a rising star in my life.\n\nQuotes\nThese quotations are correctly punctuated:\n\n \"Would you like a banana?\" he asked.\n\n\"I hate bananas,\" she said. \"You know I hate bananas.\"\n\nHe paused before saying \"bananas are not something people should hate.\"\n\nSpaces\nSentences should always be separated by a single space. Never two spaces.\n\nSlashes\nAvoid using the slash symbol (/). Replace it with words or commas as appropriate.\n",
        "rawContent": "## Colons\nCapitalize the first word after a colon, **only** if what follows is a complete sentence. For example:\n\n<blockquote>I have several favorite foods: apples, bananas, and naan chips.</blockquote>\n<blockquote>I have several favorite foods: Apples were my first favorite snack, but naan chips are a rising star in my life.</blockquote>\n\n## Quotes\nThese quotations are correctly punctuated:\n\n<blockquote> \"Would you like a banana?\" he asked.</blockquote>\n\n<blockquote>\"I hate bananas,\" she said. \"You know I hate bananas.\"</blockquote>\n\n<blockquote>He paused before saying \"bananas are not something people should hate.\"</blockquote>\n\n## Spaces\nSentences should always be separated by a single space. Never two spaces.\n\n## Slashes\nAvoid using the slash symbol (/). Replace it with words or commas as appropriate.\n",
        "tags": [],
        "description": "Learn how to use correct puncuation in your application."
    },
    {
        "uri": "content-guide/style-basics/technical-terms-and-acronyms",
        "title": "Technical terms and acronyms",
        "content": "Technical terms and acronyms often confuse readers. Avoid them whenever possible.\n\nIt’s fine to use technical terms when they’re appropriate for the audience or the situation, but you need to explain what they mean on the first reference. You can also include a short, plain-language summary or define your terms up front.\n\nIf an acronym is necessary for future reference, spell the full word and follow with the acronym in parentheses on the first reference. For example, Office of the Vice President for IT (OVPIT).\n\nAccessibility notes\n\nWhile the `` tag can serve as an enhancement to make acronyms and abbreviations more clear to some users, inconsistent screen reader support means that the expanded abbreviations will not be available to all users, so it's important to make the same information available within the text of the page.\n",
        "rawContent": "**Technical terms and acronyms often confuse readers. Avoid them whenever possible.**\n\nIt’s fine to use technical terms when they’re appropriate for the audience or the situation, but you need to explain what they mean on the first reference. You can also include a short, plain-language summary or define your terms up front.\n\nIf an acronym is necessary for future reference, spell the full word and follow with the acronym in parentheses on the first reference. For example, Office of the Vice President for IT (OVPIT).\n\n## Accessibility notes\n\nWhile the `<abbr>` tag can serve as an enhancement to make acronyms and abbreviations more clear to *some* users, inconsistent screen reader support means that the expanded abbreviations will not be available to all users, so it's important to make the same information available within the text of the page.\n",
        "tags": [],
        "description": "Guidelines for using technical language"
    },
    {
        "uri": "how-to-use",
        "title": "How to **use Rivet**",
        "content": "",
        "rawContent": "",
        "tags": [],
        "description": "There are a few ways to use Rivet. This getting started guide will help get up an running in no time."
    },
    {
        "uri": "jobs",
        "title": "Jobs",
        "content": "",
        "rawContent": "",
        "tags": [],
        "description": "Check here for jobs on the UXO Design System team"
    },
    {
        "uri": "jobs/front-end-developer",
        "title": "Front-end Developer, Design Systems",
        "content": "About the User Experience Office\nThe User Experience Office (UXO) at Indiana University takes a holistic approach to creating simple, inclusive digital experiences. UXO collaborates with university partners to help them apply user experience principles and best practices to their projects.\n\nThe Role of the UXO Design System team\n\nThe role of the UXO Design System team is to:\n\nHelp create and ensure design consistency, quality, and accessibility across IU’s digital systems and services\nIncrease the efficiency of design and front-end development by building tools that help designers and developers focus on solving problems instead of implementation details\nProvide training and resources to help all members of the organization improve their design fluency\n\nResponsibilities\nAs a front-end developer on our Design System team you will:\n\nEstablish front-end patterns and practices that ensure accessible and highly-usable digital systems and services\nWork closely with designers to help grow our design system and keep it relevant\nHelp refactor the codebase to make it more modular, scalable, and well-documented\nHelp make decisions about front-end technologies we’ll use to develop and evolve our design system\nWrite clear, concise, and approachable documentation for every skill level\n\nRequirements\nOur ideal candidate has:\n\nExperience maintaining and scaling design systems\nExperience writing modular, modern JavaScript. Although using frameworks like React and Vue will be a part of the Front-end Developer’s responsibility, we are looking for someone with strong knowledge of vanilla JavaScript.\nExperience writing modular, scalable CSS using a preprocessor like Sass\nExperience evaulating the accessibility, readability, and performance of front-end code\nEnthusiasm about design systems and front-end architecture\nA commitment to ongoing learning about principles, best practices, and tools\n\nWhen applying, please provide examples of your work, including:\n\nPattern libraries or style guides you have created\nGitHub repositories with JavaScript, HTML, and CSS/Sass you have written\nLinks to any visual design work you’ve done in the past\nSamples/links to any writing you may have done, including documentation\n",
        "rawContent": "## About the User Experience Office\nThe User Experience Office (UXO) at Indiana University takes a holistic approach to creating simple, inclusive digital experiences. UXO collaborates with university partners to help them apply user experience principles and best practices to their projects.\n\n## The Role of the UXO Design System team\n\nThe role of the UXO Design System team is to:\n\n- Help create and ensure design consistency, quality, and accessibility across IU’s digital systems and services\n- Increase the efficiency of design and front-end development by building tools that help designers and developers focus on solving problems instead of implementation details\n- Provide training and resources to help all members of the organization improve their design fluency\n\n## Responsibilities\nAs a front-end developer on our Design System team you will:\n\n- Establish front-end patterns and practices that ensure accessible and highly-usable digital systems and services\n- Work closely with designers to help grow our design system and keep it relevant\n- Help refactor the codebase to make it more modular, scalable, and well-documented\n- Help make decisions about front-end technologies we’ll use to develop and evolve our design system\n- Write clear, concise, and approachable documentation for every skill level\n\n## Requirements\nOur ideal candidate has:\n\n- Experience maintaining and scaling design systems\n- Experience writing modular, modern JavaScript. Although using frameworks like React and Vue will be a part of the Front-end Developer’s responsibility, we are looking for someone with strong knowledge of vanilla JavaScript.\n- Experience writing modular, scalable CSS using a preprocessor like Sass\n- Experience evaulating the accessibility, readability, and performance of front-end code\n- Enthusiasm about design systems and front-end architecture \n- A commitment to ongoing learning about principles, best practices, and tools\n\nWhen applying, please provide examples of your work, including:\n\n- Pattern libraries or style guides you have created\n- GitHub repositories with JavaScript, HTML, and CSS/Sass you have written\n- Links to any visual design work you’ve done in the past\n- Samples/links to any writing you may have done, including documentation\n",
        "tags": [],
        "description": "We are looking for a front-end developer to join the User Experience Office Design System team at Indiana University"
    },
    {
        "uri": "workshop",
        "title": "Rivet Community Workshop",
        "content": "",
        "rawContent": "",
        "tags": [],
        "description": "An event where developers of all skill levels can learn about Rivet, help contribute to its codebase, and meet others using it in their projects."
    }
]